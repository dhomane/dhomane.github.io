"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[54803],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var u=n.createContext({}),l=function(t){var e=n.useContext(u),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},p=function(t){var e=l(t.components);return n.createElement(u.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,o=t.originalType,u=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),d=l(a),h=r,m=d["".concat(u,".").concat(h)]||d[h]||c[h]||o;return a?n.createElement(m,s(s({ref:e},p),{},{components:a})):n.createElement(m,s({ref:e},p))}));function h(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},662:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:4760,slug:"2023-01-22",title:"Python Ray Basic Concepts",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Ray is an open-source unified compute framework that makes it easy to scale AI and general Python workloads"},s=void 0,i={unversionedId:"IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction/index",id:"IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction/index",title:"Python Ray Basic Concepts",description:"Ray is an open-source unified compute framework that makes it easy to scale AI and general Python workloads",source:"@site/docs/IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction/index.md",sourceDirName:"IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction",slug:"/IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction/2023-01-22",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction/2023-01-22",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/AIOps/2023-01-22-python-ray-introduction/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"}],version:"current",sidebarPosition:4760,frontMatter:{sidebar_position:4760,slug:"2023-01-22",title:"Python Ray Basic Concepts",authors:"mpolinowski",tags:["Python","Machine Learning"],description:"Ray is an open-source unified compute framework that makes it easy to scale AI and general Python workloads"},sidebar:"tutorialSidebar",previous:{title:"AIOps",permalink:"/docs/category/aiops"},next:{title:"DVC Model Access",permalink:"/docs/IoT-and-Machine-Learning/AIOps/2023-01-06-dvc-model-access/2023-01-05"}},u={},l=[{value:"Installation",id:"installation",level:2},{value:"Hello World",id:"hello-world",level:2},{value:"Ray Remote (Task/Futures)",id:"ray-remote-taskfutures",level:3},{value:"Nested Remote Functions",id:"nested-remote-functions",level:4},{value:"Ray Datasets - Distributed Data Preprocessing",id:"ray-datasets---distributed-data-preprocessing",level:3},{value:"Ray Actors",id:"ray-actors",level:3}],p={toc:l};function c(t){let{components:e,...o}=t;return(0,r.kt)("wrapper",(0,n.Z)({},p,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guangzhou, China",src:a(75763).Z,width:"1500",height:"662"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#hello-world"},"Hello World"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ray-remote-taskfutures"},"Ray Remote (Task/Futures)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#nested-remote-functions"},"Nested Remote Functions")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ray-datasets---distributed-data-preprocessing"},"Ray Datasets - Distributed Data Preprocessing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ray-actors"},"Ray Actors"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"see Youtube ",(0,r.kt)("a",{parentName:"p",href:"https://youtu.be/vzMXTpdJSuk"},"Ray: A General Purpose Serverless Substrate? - Eric Liang, Anyscale"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/ray-project/ray"},"Ray")," is a unified framework for scaling AI and Python applications. Ray consists of a core distributed runtime and a toolkit of libraries (Ray AIR) for simplifying ML compute."),(0,r.kt)("p",null,"In a cloud computing model, the cloud provider allocates machine resources on demand, taking care of the servers on behalf of its customers. Ray provides a great foundation for ",(0,r.kt)("a",{parentName:"p",href:"https://www.anyscale.com/blog/the-ideal-foundation-for-a-general-purpose-serverless-platform"},"general-purpose serverless platforms")," by providing the following features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ray autoscaling transparently manages hardware resources while hiding the actual servers."),(0,r.kt)("li",{parentName:"ul"},"With ",(0,r.kt)("inlineCode",{parentName:"li"},"actors")," Ray not only implements a stateless but also a stateful programming model."),(0,r.kt)("li",{parentName:"ul"},"It allows you to specify resources, including hardware accelerators."),(0,r.kt)("li",{parentName:"ul"},"It supports direct communications between your tasks.")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,'Setting up a local Single Node "Cluster". There are two versions that can be installed via pip. You cannot install it with ',(0,r.kt)("inlineCode",{parentName:"p"},"pip install ray")," if you want to use the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/ray-core/ray-dashboard.html"},"dashboard"),". Use the following to install Ray with the proper dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pip install -U "ray[default]"\n')),(0,r.kt)("p",null,"You can access the dashboard through a URL printed when Ray is initialized (the default URL is ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8265"),")."),(0,r.kt)("p",null,"To use Ray\u2019s AI Runtime install Ray with the optional extra air packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pip install "ray[air]"\n')),(0,r.kt)("h2",{id:"hello-world"},"Hello World"),(0,r.kt)("h3",{id:"ray-remote-taskfutures"},"Ray Remote (Task/Futures)"),(0,r.kt)("p",null,"Execute a remote function that reports back where it was executed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import os\nimport socket\n\ndef hello_from():\n    print( f"Running on {socket.gethostname()} in pid {os.getpid()}" )\n    return \n\nhello_from()\n')),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ray.remote")," decorator to create a remote function. Ray returns a\n",(0,r.kt)("inlineCode",{parentName:"p"},"future"),". You can get the values returned in those futures with ",(0,r.kt)("inlineCode",{parentName:"p"},"ray.get"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import ray\nimport os\nimport socket\n\n@ray.remote\n\ndef hello_from():\n    return f"Running on {socket.gethostname()} in pid {os.getpid()}"\n\nfuture = hello_from.remote()\nray.get(future)\n')),(0,r.kt)("p",null,"I am going to add the following lines to pause the execution - giving me some time to explore the Ray dashboard:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'os.system("/bin/bash -c \'read -s -n 1 -p \\"Press any key to continue...\\"\'")\nprint()\n')),(0,r.kt)("p",null,'Since we are running Ray locally the remote function is executed "remotely" in a separate process:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Running on Link0815b in pid 35053\n2023-01-22 17:09:45,201 INFO worker.py:1529 -- Started a local Ray instance.\nView the dashboard at 127.0.0.1:8265 \nRunning on Link0815b in pid 35278\nPress any key to continue...\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Ray Introduction",src:a(41305).Z,width:"1619",height:"626"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Ray Introduction",src:a(34914).Z,width:"1611",height:"448"})),(0,r.kt)("h4",{id:"nested-remote-functions"},"Nested Remote Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"from bs4 import BeautifulSoup\nimport ray\nimport requests\n\n\n@ray.remote\n\ndef crawl(url, depth=0, maxdepth=2, maxlinks=5):\n    \n    # prepare arrays for scraped links / futures\n    links = []\n    link_futures = []\n\n    try:\n        # get target url\n        f = requests.get(url)\n        # add found URL to link array\n        links += [url]\n        \n        # continue following till max depth\n        if (depth > maxdepth):\n            return links\n\n        # run web scraper on target url\n        soup = BeautifulSoup(f.text, 'html.parser')\n        i = 0\n\n        # follow links and and find more links\n        for link in soup.find_all('a'):\n            try:\n                i = i+1\n                link_futures += [crawl.remote(link[\"href\"], depth=(depth+1), maxdepth=maxdepth)]\n                if i > maxlinks:\n                    break\n            except:\n                pass\n\n        # add links and title to array\n        for r in ray.get(link_futures):\n            links += r\n\n        return links\n\n    except requests.exceptions.InvalidSchema:\n        return [] # Skip on invalid links\n    except requests.exceptions.MissingSchema:\n        return [] # Skip on invalid links\n\nprint(ray.get(crawl.remote(\"https://wiki.instar.com/en/Assistants/Review_Wall/\")))\n")),(0,r.kt)("p",null,"The nested call returns an array of all the links that were found on the target URL and on pages found at the end of those links (within the set limitations of max links and depth):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"['https://wiki.instar.com/en/Assistants/Review_Wall/', 'https://forum.instar.de', 'https://youtu.be/l3EF_JgdGQg', 'https://www.youtube.com/about/', 'https://www.youtube.com/howyoutubeworks/', 'https://www.youtube.com/creators/', 'https://www.youtube.com/trends/', 'https://blog.youtube/', 'https://www.youtube.com/about/press/', 'https://www.youtube.com/about/copyright/', 'https://youtu.be/Ac1trrZhu9o', 'https://www.youtube.com/about/', 'https://www.youtube.com/howyoutubeworks/', 'https://www.youtube.com/creators/', 'https://www.youtube.com/trends/', 'https://blog.youtube/', 'https://www.youtube.com/about/press/', 'https://www.youtube.com/about/copyright/', 'https://youtu.be/6N0FATzh1BU', 'https://www.youtube.com/about/', 'https://www.youtube.com/howyoutubeworks/', 'https://www.youtube.com/creators/', 'https://www.youtube.com/trends/', 'https://blog.youtube/', 'https://www.youtube.com/about/press/', 'https://www.youtube.com/about/copyright/', 'https://youtu.be/2t7Y7I6l6A0', 'https://www.youtube.com/about/', 'https://www.youtube.com/howyoutubeworks/', 'https://www.youtube.com/creators/', 'https://www.youtube.com/trends/', 'https://blog.youtube/', 'https://www.youtube.com/about/press/', 'https://www.youtube.com/about/copyright/']\n")),(0,r.kt)("p",null,"I can see that up to 10 worker processes are spawned to work on this task - if I increase the number of links and depth of the search the amount of worker increases as well:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Ray Introduction",src:a(99177).Z,width:"1614",height:"899"})),(0,r.kt)("h3",{id:"ray-datasets---distributed-data-preprocessing"},"Ray Datasets - Distributed Data Preprocessing"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/data/dataset.html"},"Ray Datasets")," are the standard way to load and exchange data in Ray libraries and applications. They provide basic distributed data transformations such as maps (",(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/data/api/dataset.html#ray.data.Dataset.map_batches"},"map_batches"),"), global and grouped aggregations (",(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/data/api/grouped_dataset.html#ray.data.grouped_dataset.GroupedDataset"},"GroupedDataset"),"), and shuffling operations (",(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/data/api/dataset.html#ray.data.Dataset.random_shuffle"},"random_shuffle"),", ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/data/api/dataset.html#ray.data.Dataset.sort"},"sort"),", ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/data/api/dataset.html#ray.data.Dataset.repartition"},"repartition"),"), and are compatible with a variety of file formats, data sources, and distributed frameworks."),(0,r.kt)("p",null,"Let's create a dataset from the URLs we just downloaded:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import ray\nimport requests\n\n# use list of urls created above\ndataset=["https://wiki.instar.com/en/Assistants/Review_Wall/", "https://forum.instar.de", "https://youtu.be/l3EF_JgdGQg", "https://www.youtube.com/about/", "https://www.youtube.com/howyoutubeworks/", "https://www.youtube.com/creators/", "https://www.youtube.com/trends/", "https://blog.youtube/", "https://www.youtube.com/about/press/", "https://www.youtube.com/about/copyright/", "https://youtu.be/Ac1trrZhu9o", "https://www.youtube.com/about/", "https://www.youtube.com/howyoutubeworks/", "https://www.youtube.com/creators/", "https://www.youtube.com/trends/", "https://blog.youtube/", "https://www.youtube.com/about/press/", "https://www.youtube.com/about/copyright/", "https://youtu.be/6N0FATzh1BU", "https://www.youtube.com/about/", "https://www.youtube.com/howyoutubeworks/", "https://www.youtube.com/creators/", "https://www.youtube.com/trends/", "https://blog.youtube/", "https://www.youtube.com/about/press/", "https://www.youtube.com/about/copyright/", "https://youtu.be/2t7Y7I6l6A0", "https://www.youtube.com/about/", "https://www.youtube.com/howyoutubeworks/", "https://www.youtube.com/creators/", "https://www.youtube.com/trends/", "https://blog.youtube/", "https://www.youtube.com/about/press/", "https://www.youtube.com/about/copyright/"]\n\n# and create a dataset from them\nurls = ray.data.from_items(dataset)\n\n# download all pages\ndef get_page(url):\n    f = requests.get(url)\n    return f.text\n\n# map url dataset and get page content\npages = urls.map(get_page)\n\n# verify that pages where downloaded\n# print(pages.take(1))\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"ERROR"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"ModuleNotFoundError: No module named 'pkg_resources._vendor'")," solved by ",(0,r.kt)("inlineCode",{parentName:"p"},"pip install --upgrade setuptools"),".")),(0,r.kt)("p",null,"By calling ",(0,r.kt)("inlineCode",{parentName:"p"},"groupby")," with either a column name or a function that returns a key, you get a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/data/api/grouped_dataset.html#ray.data.grouped_dataset.GroupedDataset"},"GroupedDataset"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"GroupedDataset")," has built-in support for ",(0,r.kt)("inlineCode",{parentName:"p"},"count"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"max"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"min"),", and other common aggregations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# split page content into words\nwords = pages.flat_map(lambda x: x.split(\" \")).map(lambda w: (w, 1))\n# create GroupedDataset\ngrouped_words = words.groupby(lambda wc: wc[0])\n# take a look at it\nprint('Generated Data: ', grouped_words)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 34/34 [00:05<00:00,  5.71it/s]\nFlat_Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 34/34 [00:00<00:00, 92.36it/s]\nMap: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 34/34 [00:00<00:00, 45.92it/s]\n\nGenerated Data:  GroupedDataset(dataset=Dataset(num_blocks=34, num_rows=900977, schema=<class 'tuple'>), key=<function <lambda> at 0x7fbe21277be0>)\n")),(0,r.kt)("h3",{id:"ray-actors"},"Ray Actors"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/ray-core/actors.html#actors"},"Actors")," extend the Ray API from functions (tasks) to classes. An actor is essentially a stateful worker (or a service). Actors send and receive messages, updating their state in response. These messages can come from other actors, programs, or the Ray main execution thread with the Ray client. Just like before in Ray the actor will return a future that you can then collect on later."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ray Actors")," are very similar to ",(0,r.kt)("strong",{parentName:"p"},"Remote Functions")," but use Python classes to handle state. They can be used to retrieve the newest weights from your running ML training or - for example - get the latest sensor read-out from your IoT device:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import ray\n\n@ray.remote\n\nclass ReadSensor(object):\n    def __init__(self):\n        self.value = 0\n    def get_value(self):\n        self.value += 1\n        return f"Current value is: {self.value}"\n\n# create an actor instance\nsensor_reading = ReadSensor.remote()\n\n# call the actor multiple times\nprint(ray.get(sensor_reading.get_value.remote()))\nprint(ray.get(sensor_reading.get_value.remote()))\nprint(ray.get(sensor_reading.get_value.remote()))\nprint(ray.get(sensor_reading.get_value.remote()))\nprint(ray.get(sensor_reading.get_value.remote()))\n')),(0,r.kt)("p",null,"By requesting the value multiple times we increment the value itself. The next returned value we get reflects the change:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python 04_ray_actors_distributed_state.py\n2023-01-22 21:47:50,961 INFO worker.py:1529 -- Started a local Ray instance.\nView the dashboard at 127.0.0.1:8265 \nCurrent value is: 1\nCurrent value is: 2\nCurrent value is: 3\nCurrent value is: 4\nCurrent value is: 5\n")))}c.isMDXComponent=!0},41305:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Python_Ray_Introduction_01-2fe26b039a09a2e6c80b4ae5e9626ef1.png"},34914:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Python_Ray_Introduction_02-2d86f623b55f406e96f7efc927262532.png"},99177:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/Python_Ray_Introduction_03-3a849501d682dc6261125872f32f5df9.png"},75763:(t,e,a)=>{a.d(e,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-296769d73822f07b0ac5dc952f56bfa1.jpg"}}]);