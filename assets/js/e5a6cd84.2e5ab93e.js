"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[61991],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,k=m["".concat(l,".").concat(u)]||m[u]||g[u]||r;return t?a.createElement(k,o(o({ref:n},c),{},{components:t})):a.createElement(k,o({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const r={sidebar_position:9050,slug:"2020-11-23",title:"Ansible Getting Serious",authors:"mpolinowski",tags:["LINUX","NGINX","Ansible"]},o=void 0,s={unversionedId:"DevOps/Ansible/2020-11-23--ansible-getting-serious/index",id:"DevOps/Ansible/2020-11-23--ansible-getting-serious/index",title:"Ansible Getting Serious",description:"Shenzhen, China",source:"@site/docs/DevOps/Ansible/2020-11-23--ansible-getting-serious/index.md",sourceDirName:"DevOps/Ansible/2020-11-23--ansible-getting-serious",slug:"/DevOps/Ansible/2020-11-23--ansible-getting-serious/2020-11-23",permalink:"/docs/DevOps/Ansible/2020-11-23--ansible-getting-serious/2020-11-23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Ansible/2020-11-23--ansible-getting-serious/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Ansible",permalink:"/docs/tags/ansible"}],version:"current",sidebarPosition:9050,frontMatter:{sidebar_position:9050,slug:"2020-11-23",title:"Ansible Getting Serious",authors:"mpolinowski",tags:["LINUX","NGINX","Ansible"]},sidebar:"tutorialSidebar",previous:{title:"Ansible Vault for User Logins",permalink:"/docs/DevOps/Ansible/2020-11-24--ansible-vault-user-login/2020-11-24"},next:{title:"Ansible for Docker Deployment",permalink:"/docs/DevOps/Ansible/2020-11-22--ansible-and-docker/2020-11-22"}},l={},p=[{value:"Adding the Production Host",id:"adding-the-production-host",level:2},{value:"Adding SSH Public Keys",id:"adding-ssh-public-keys",level:3},{value:"Installing Docker on Host",id:"installing-docker-on-host",level:2},{value:"Docker Playbook",id:"docker-playbook",level:3},{value:"Setting Up Zabbix Agent",id:"setting-up-zabbix-agent",level:2},{value:"Runnig the Webservice",id:"runnig-the-webservice",level:2},{value:"Updating the Frontend Container",id:"updating-the-frontend-container",level:3},{value:"Setting up Elasticsearch",id:"setting-up-elasticsearch",level:2},{value:"Managing Certificates with Certbot",id:"managing-certificates-with-certbot",level:2},{value:"Playbook",id:"playbook",level:3}],c={toc:p};function g(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Shenzhen, China",src:t(5809).Z,width:"1500",height:"676"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#adding-the-production-host"},"Adding the Production Host"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#adding-ssh-public-keys"},"Adding SSH Public Keys")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#installing-docker-on-host"},"Installing Docker on Host"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#docker-playbook"},"Docker Playbook")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#setting-up-zabbix-agent"},"Setting Up Zabbix Agent")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#runnig-the-webservice"},"Runnig the Webservice"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#updating-the-frontend-container"},"Updating the Frontend Container")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#setting-up-elasticsearch"},"Setting up Elasticsearch")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#managing-certificates-with-certbot"},"Managing Certificates with Certbot"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#playbook"},"Playbook"))))),(0,i.kt)("h2",{id:"adding-the-production-host"},"Adding the Production Host"),(0,i.kt)("p",null,"Start by adding the ansible hosts by editing ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/ansible/hosts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"[Wiki_Virtual]\n18.19.251.137 ansible_port=12345\n")),(0,i.kt)("h3",{id:"adding-ssh-public-keys"},"Adding SSH Public Keys"),(0,i.kt)("p",null,"You can now use ",(0,i.kt)("a",{parentName:"p",href:"https://docs.ansible.com/ansible/latest/user_guide/vault.html#vault"},"Vault")," to add your password. Or generate a RSA key pair to have Ansible use the public key to login:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-keygen -t rsa -b 2048\n")),(0,i.kt)("p",null,"I can now copy the generated ID to my production server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-copy-id root@18.19.251.137 -p 12345\n")),(0,i.kt)("p",null,"Add you password when asked and afterwards try to login - now without a password - ",(0,i.kt)("inlineCode",{parentName:"p"},"ssh root@18.19.251.137 -p 12345"),". Verify that it works. And try to use the Ansible ping module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'ansible Wiki_Virtual -m ping\n\n18.19.251.137 | SUCCESS => {\n    "ansible_facts": {\n        "discovered_interpreter_python": "/usr/bin/python"\n    },\n    "changed": false,\n    "ping": "pong"\n}\n')),(0,i.kt)("h2",{id:"installing-docker-on-host"},"Installing Docker on Host"),(0,i.kt)("p",null,"We can download ready to use roles for common problems from ",(0,i.kt)("a",{parentName:"p",href:"https://galaxy.ansible.com/geerlingguy/docker"},"Ansible Galaxy"),":"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Ansible requires the Python Docker library in addition to the regular Docker installation. You can use ",(0,i.kt)("a",{parentName:"p",href:"https://galaxy.ansible.com/geerlingguy/pip"},"this role"),". But trying to install it gave me an error message: ",(0,i.kt)("strong",{parentName:"p"},"Failed to import the required Python library (setuptools) on wikivirtual's Python /usr/bin/python."),". I was able to get rid of the error by executing the following on my external host: ",(0,i.kt)("inlineCode",{parentName:"p"},"update-alternatives --install /usr/bin/python python /usr/bin/python3 10"),".")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"I had a different problem with ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose")," - different error message but also related to ",(0,i.kt)("inlineCode",{parentName:"p"},"setuptools"),". I now added both of them to the ",(0,i.kt)("em",{parentName:"p"},"pip install")," loop. Maybe this also solves issue 1. Compose now works as expected.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-galaxy install geerlingguy.docker\nansible-galaxy install geerlingguy.pip\n")),(0,i.kt)("h3",{id:"docker-playbook"},"Docker Playbook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"# nano /opt/ansible/playbooks/install_docker.yml\n- hosts: Wiki_Virtual\n  gather_facts: yes\n\n  vars:\n    pip_install_packages:\n      - name: docker\n      - name: setuptools\n      - name: docker-compose\n\n  roles:\n    - geerlingguy.pip\n    - geerlingguy.docker\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook /opt/ansible/playbooks/install_docker.yml\n")),(0,i.kt)("h2",{id:"setting-up-zabbix-agent"},"Setting Up Zabbix Agent"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'# nano /opt/ansible/playbooks/install_zabbix_agent2.yml\n---\n- hosts: Wiki_Virtual\n  gather_facts: no\n  tasks:\n  \n    - name: Create directory for Zabbix Keyfile\n      file:\n        path: /opt/zabbix\n        state: directory\n        mode: \'0755\'\n\n    - name: Check if Zabbix Keyfile is already present\n      stat:\n        path: /opt/zabbix/agent_tls.psk\n      register: check_key_result\n\n    - name: Create Zabbix Keyfile\n      shell: openssl rand -hex 32 > agent_tls.psk\n      args:\n        chdir: /opt/zabbix/\n      when: not check_key_result.stat.exists\n    \n    - name: Read Zabbix Keyfile\n      shell: cat /opt/zabbix/agent_tls.psk\n      register: zabbix_key\n    \n    - name: Print Zabbix Keyfile\n      debug: var=zabbix_key\n\n    - name: Installing Zabbix Agent 2\n      docker_container:\n        name: zabbix-agent2\n        image: zabbix/zabbix-agent2:latest\n        networks:\n          - name: gateway\n        networks_cli_compatible: yes\n        privileged: yes\n        state: started\n        restart_policy: unless-stopped\n        ports:\n          - "10050:10050"\n        volumes:\n          - /opt/zabbix:/var/lib/zabbix/enc\n        env:\n            ZBX_HOSTNAME: "Wiki_Virtual"\n            ZBX_SERVER_HOST: "12.115.24.1"\n            ZBX_SERVER_PORT: "10051"\n            ZBX_TLSCONNECT: "psk"\n            ZBX_TLSACCEPT: "psk"\n            ZBX_TLSPSKIDENTITY: "Wiki_Virtual"\n            ZBX_TLSPSKFILE: "agent_tls.psk"\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook /opt/ansible/playbooks/install_zabbix_agent2.yml\n")),(0,i.kt)("h2",{id:"runnig-the-webservice"},"Runnig the Webservice"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'# nano /opt/ansible/playbooks/install_wiki.yml\n---\n- hosts: Wiki_Virtual\n  gather_facts: no\n\n  vars_prompt:\n\n    - name: "gitlabuser" \n      prompt: "Enter your INSTAR Gitlab Username" \n      private: no \n    - name: "gitlabpassword" \n      prompt: "Enter your INSTAR Gitlab Username" \n      private: yes\n\n  tasks:\n\n    - name: Log into Docker Registry and force re-authorization\n      docker_login:\n        registry: my.gitlab.com:12345\n        username: "{{ gitlabuser }}"\n        password: "{{ gitlabpassword }}"\n        reauthorize: yes\n\n    - name: Create the Gateway Network\n      docker_network:\n        name: gateway \n  \n    - name: Run the EN Wiki Container\n      docker_container:\n        name: wiki_en\n        image: my.gitlab.com:12345/wiki/wiki_en_container\n        state: started\n        restart_policy: unless-stopped\n        networks:\n          - name: gateway\n        networks_cli_compatible: yes\n  \n    - name: Run the DE Wiki Container\n      docker_container:\n        name: wiki_de\n        image: my.gitlab.com:12345/wiki/wiki_de_container\n        state: started\n        restart_policy: unless-stopped\n        networks:\n          - name: gateway\n        networks_cli_compatible: yes\n  \n    - name: Run the FR Wiki Container\n      docker_container:\n        name: wiki_fr\n        image: my.gitlab.com:12345/wiki/wiki_fr_container\n        state: started\n        restart_policy: unless-stopped\n        networks:\n          - name: gateway\n        networks_cli_compatible: yes\n\n    - name: Get updated files from the NGINX Ingress repository\n      git: \n        repo: https://{{ gitlabuser | urlencode }}:{{ gitlabpassword | urlencode }}@my.gitlab.com/nginx_ingress.git\n        dest: /opt/wiki_ingress\n\n    - name: Get updated files from the NGINX Downloads repository\n      git: \n        repo: https://{{ gitlabuser | urlencode }}:{{ gitlabpassword | urlencode }}@my.gitlab.com/nginx_ingress.git\n        dest: /opt/wiki_downloads\n\n    - name: Setup a Nginx Ingress\n      docker_container:\n        name: ingress\n        image: nginx:stable-alpine\n        state: started\n        restart_policy: unless-stopped\n        networks:\n          - name: gateway\n        networks_cli_compatible: yes\n        ports:\n          - "80:80"\n          - "443:443"\n        volumes:\n          - /opt/wiki_ingress/configuration/conf.d:/etc/nginx/conf.d\n          - /opt/wiki_ingress/configuration/ssl:/etc/nginx/ssl\n          - /opt/wiki_ingress/configuration/nginx.conf:/etc/nginx/nginx.conf\n          - /opt/wiki_downloads:/opt/wiki_downloads\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook /opt/ansible/playbooks/install_wiki.yml\n")),(0,i.kt)("h3",{id:"updating-the-frontend-container"},"Updating the Frontend Container"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'# nano /opt/ansible/playbooks/update_wiki.yml\n---\n- hosts: Wiki_Virtual\n  gather_facts: no\n\n  vars_prompt:\n\n    - name: "gitlabuser" \n      prompt: "Enter your INSTAR Gitlab Username" \n      private: no \n    - name: "gitlabpassword" \n      prompt: "Enter your INSTAR Gitlab Username" \n      private: yes\n\n  tasks:\n\n    - name: Log into Docker Registry and force re-authorization\n      docker_login:\n        registry: my.gitlab.com:12345\n        username: "{{ gitlabuser }}"\n        password: "{{ gitlabpassword }}"\n        reauthorize: yes\n\n    - name: Download the latest Wiki build images\n      shell: docker pull my.gitlab.com:12345/wiki/{{ item }}\n      with_items:\n        - wiki_en_container\n        - wiki_de_container\n        - wiki_fr_container\n  \n    - name: Remove the EN Wiki Container\n      docker_container:\n        name: wiki_en\n        state: absent\n  \n    - name: Rebuild the EN Wiki Container\n      docker_container:\n        name: wiki_en\n        image: my.gitlab.com:12345/wiki/wiki_en_container\n        state: started\n        restart_policy: unless-stopped\n        networks:\n          - name: gateway\n        networks_cli_compatible: yes\n  \n    - name: Remove the DE Wiki Container\n      docker_container:\n        name: wiki_de\n        state: absent\n  \n    - name: Rebuild the DE Wiki Container\n      docker_container:\n        name: wiki_de\n        image: my.gitlab.com:12345/wiki/wiki_de_container\n        state: started\n        restart_policy: unless-stopped\n        networks:\n          - name: gateway\n        networks_cli_compatible: yes\n  \n    - name: Remove the FR Wiki Container\n      docker_container:\n        name: wiki_fr\n        state: absent\n  \n    - name: Run the FR Wiki Container\n      docker_container:\n        name: wiki_fr\n        image: my.gitlab.com:12345/wiki/wiki_fr_container\n        state: started\n        restart_policy: unless-stopped\n        networks:\n          - name: gateway\n        networks_cli_compatible: yes\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook /opt/ansible/playbooks/update_wiki.yml\n")),(0,i.kt)("h2",{id:"setting-up-elasticsearch"},"Setting up Elasticsearch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'# nano /opt/ansible/playbooks/install_elk.yml\n---\n- hosts: Wiki_Virtual\n  gather_facts: no\n\n  vars_prompt:\n\n    - name: "gitlabuser" \n      prompt: "Enter your INSTAR Gitlab Username" \n      private: no \n    - name: "gitlabpassword" \n      prompt: "Enter your INSTAR Gitlab Username" \n      private: yes \n\n  tasks:\n\n    - name: Get updated files from git repository \n      git: \n        repo: https://{{ gitlabuser | urlencode }}:{{ gitlabpassword | urlencode }}@my.gitlab.com/privrepo.git\n        dest: /opt/wiki_elk\n\n    - name: Start the Elasticsearch services\n      docker_compose:\n        project_src: /opt/wiki_elk\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook /opt/ansible/playbooks/install_elk.yml\n")),(0,i.kt)("h2",{id:"managing-certificates-with-certbot"},"Managing Certificates with Certbot"),(0,i.kt)("p",null,"I am going to use the Ansible Galaxy Role ",(0,i.kt)("a",{parentName:"p",href:"https://galaxy.ansible.com/geerlingguy/certbot"},"geerlingguy.certbot"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-galaxy install geerlingguy.certbot \n")),(0,i.kt)("h3",{id:"playbook"},"Playbook"),(0,i.kt)("p",null,"We can use ",(0,i.kt)("em",{parentName:"p"},"vars")," to overwrite the default variables in ",(0,i.kt)("inlineCode",{parentName:"p"},"/root/.ansible/roles/geerlingguy.certbot/defaults/main.yml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"# nano /opt/ansible/playbooks/install_certbot.yml\n---\n- hosts: servers\n\n  vars:\n    certbot_admin_email: me@email.com\n    certbot_create_if_missing: true\n    certbot_create_standalone_stop_services:\n      - docker\n    certbot_certs:\n      - domains:\n          - abc.com\n          - xyz.com\n\n  roles:\n    - geerlingguy.certbot\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The ",(0,i.kt)("strong",{parentName:"p"},"Certbot")," command that is executed here is ",(0,i.kt)("inlineCode",{parentName:"p"},"certbot certonly --cert-name abc.com -d abc.com,xyz.com"),". This means the resulting certificate will be filed under ",(0,i.kt)("inlineCode",{parentName:"p"},"abc.com")," but will contain the keys for all domains that you list above.")),(0,i.kt)("p",null,"You can check the installation by running the following commands on your host:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"certbot -v\ncertbot certificates\n")),(0,i.kt)("p",null,"To remove the certificate run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"certbot delete --cert-name abc.com\n")))}g.isMDXComponent=!0},5809:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-e12a28f9c35f9ae6e3540843545ced7e.jpg"}}]);