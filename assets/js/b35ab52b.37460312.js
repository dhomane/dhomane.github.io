"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[73009],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),h=s,c=d["".concat(o,".").concat(h)]||d[h]||m[h]||r;return n?a.createElement(c,l(l({ref:t},u),{},{components:n})):a.createElement(c,l({ref:t},u))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:s,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9058:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(87462),s=(n(67294),n(3905));const r={sidebar_position:8090,slug:"2020-06-23",title:"Saltstack Refresh Course 2: Highstate",authors:"mpolinowski",tags:["LINUX","Salt"]},l=void 0,i={unversionedId:"DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/index",id:"DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/index",title:"Saltstack Refresh Course 2: Highstate",description:"Shenzhen, China",source:"@site/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/index.md",sourceDirName:"DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate",slug:"/DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/2020-06-23",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/2020-06-23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:8090,frontMatter:{sidebar_position:8090,slug:"2020-06-23",title:"Saltstack Refresh Course 2: Highstate",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Saltstack Refresh Course 2: Salt Mines",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/2020-06-23"},next:{title:"Saltstack Refresh Course 2: Salt State",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-2-salt-state/2020-06-23"}},o={},p=[{value:"Highstate",id:"highstate",level:2},{value:"Top.sls",id:"topsls",level:3},{value:"Multi Environments",id:"multi-environments",level:3},{value:"Creating Users",id:"creating-users",level:3},{value:"Salt States with Grains and Pillars",id:"salt-states-with-grains-and-pillars",level:2},{value:"Encryption with Pillar Data",id:"encryption-with-pillar-data",level:3},{value:"<strong>FOR LOOP</strong>",id:"for-loop",level:2},{value:"Identifying Minions with Custom Grains",id:"identifying-minions-with-custom-grains",level:2},{value:"Creating Grains with States",id:"creating-grains-with-states",level:3},{value:"Custom Grains with Python",id:"custom-grains-with-python",level:3}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Shenzhen, China",src:n(58385).Z,width:"1500",height:"564"})),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#highstate"},"Highstate"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#topsls"},"Top.sls")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#multi-environments"},"Multi Environments")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#creating-users"},"Creating Users")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#salt-states-with-grains-and-pillars"},"Salt States with Grains and Pillars"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#encryption-with-pillar-data"},"Encryption with Pillar Data")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#identifying-minions-with-custom-grains"},"Identifying Minions with Custom Grains"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#creating-grains-with-states"},"Creating Grains with States")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#custom-grains-with-python"},"Custom Grains with Python"))))),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Defining a ",(0,s.kt)("strong",{parentName:"p"},"Highstate")," for your Salt minions - or how to send out a bunch of commands in one go.")),(0,s.kt)("h2",{id:"highstate"},"Highstate"),(0,s.kt)("h3",{id:"topsls"},"Top.sls"),(0,s.kt)("p",null,"In the previous tutorial we created a state file that allowed us to install and configure Apache on an Ubuntu 20.04 server. This was done with an ",(0,s.kt)("inlineCode",{parentName:"p"},"Init.sls")," file inside the ",(0,s.kt)("strong",{parentName:"p"},"Base environment")," (that the is the ",(0,s.kt)("inlineCode",{parentName:"p"},"/srv/salt/states/base/"),")."),(0,s.kt)("p",null,"In case that we have a large number of such states for a lot of minions in different environments we create create a ",(0,s.kt)("inlineCode",{parentName:"p"},"top.sls")," file in each of those, that is used to group-apply all your states to the assigned servers using the ",(0,s.kt)("strong",{parentName:"p"},"Highstate")," command. For example, currently we only have one state that installs Apache to one minion. The ",(0,s.kt)("strong",{parentName:"p"},"Top File")," for it would look like this:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/states/base/top.sls")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"base:\n  '*':\n\n  'salt-minion*':\n    - apache\n")),(0,s.kt)("h3",{id:"multi-environments"},"Multi Environments"),(0,s.kt)("p",null,"Let's add a development and production Salt environment by creating a ",(0,s.kt)("inlineCode",{parentName:"p"},"dev")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"prod")," folder next to our ",(0,s.kt)("inlineCode",{parentName:"p"},"base")," folder and add this directory to the ",(0,s.kt)("inlineCode",{parentName:"p"},"roots.conf")," file:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/etc/salt/master.d/roots.conf")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"file_roots:\n  base:\n    - /srv/salt/states/base\n  dev:\n    - /srv/salt/states/dev \n  prod:\n    - /srv/salt/states/prod\n")),(0,s.kt)("h3",{id:"creating-users"},"Creating Users"),(0,s.kt)("p",null,"I want to create a user state that sets up a user login for me on the minion in the base environment. And also add another user state to the ",(0,s.kt)("inlineCode",{parentName:"p"},"dev")," environment. Let's start by creating a folder ",(0,s.kt)("inlineCode",{parentName:"p"},"users")," in both ",(0,s.kt)("inlineCode",{parentName:"p"},"base")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"dev")," directories and another folder ``keys inside for the public key of each user."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /srv/salt/states/base/users && mkdir /srv/salt/states/base/users/keys\nmkdir /srv/salt/states/dev/users && mkdir /srv/salt/states/dev/users/keys\n")),(0,s.kt)("p",null,"Now we need to have the public keys of each user. You can get them by running the following command in the user ",(0,s.kt)("inlineCode",{parentName:"p"},".ssh")," directory on the machine from which they are going to access the minion servers from:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/.ssh\nssh-keygen -t rsa\n")),(0,s.kt)("p",null,"Adding a key name or a private key passphrase is optional - it does make sense to name the key by it's user. Then copy the file with the ",(0,s.kt)("inlineCode",{parentName:"p"},".pub")," extension to the corresponding ",(0,s.kt)("inlineCode",{parentName:"p"},"keys")," directory on your salt master."),(0,s.kt)("p",null,"We can now continue with creating the two ",(0,s.kt)("inlineCode",{parentName:"p"},"Init.sls")," files for our user states:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/states/base/users/init.sls")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"user_instar_admin:\n  user.present:\n    - name: instar.admin\n    - fullname: Mike Polinowski\n    - shell: /bin/bash\n    - home: /home/instar.admin\n    - uid: 10000\n    - gid_from_name: True\n    - groups:\n      - sudo\n\ninstar_admin_key:\n  ssh_auth.present:\n    - name: instar.admin\n    - user: instar.admin\n    - source: salt://user/keys/instar.admin.pub\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},"Note")," that the user group is ",(0,s.kt)("inlineCode",{parentName:"p"},"sudo")," under Ubuntu but has to be set to ",(0,s.kt)("inlineCode",{parentName:"p"},"wheel")," on CentOS.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/states/dev/users/init.sls")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"user_instar_dev:\n  user.present:\n    - name: instar.dev\n    - fullname: Julia Hu\n    - shell: /bin/bash\n    - home: /home/instar.dev\n    - uid: 10001\n    - gid_from_name: True\n    - groups:\n      - sudo\n\ninstar_dev_key:\n  ssh_auth.present:\n    - name: instar.dev\n    - user: instar.dev\n    - source: salt://user/keys/instar.dev.pub\n")),(0,s.kt)("p",null,"We can now add those two states to the environment ",(0,s.kt)("inlineCode",{parentName:"p"},"top.sls")," files:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/states/base/top.sls")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"base:\n  '*':\n    - users\n\n  'salt-minion*':\n    - apache\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/states/dev/top.sls")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"dev:\n  '*':\n    - users\n")),(0,s.kt)("p",null,"Now restart your master service and check if the two ",(0,s.kt)("inlineCode",{parentName:"p"},"top.sls")," files are being picked up by the ",(0,s.kt)("strong",{parentName:"p"},"Highstate")," command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pkill -9 salt-master\nsalt-master -d\n")),(0,s.kt)("p",null,"You can now run the ",(0,s.kt)("inlineCode",{parentName:"p"},"state.show")," command to check the output for ",(0,s.kt)("strong",{parentName:"p"},"Highstate")," and ",(0,s.kt)("strong",{parentName:"p"},"Lowstate")," which should give you an overview over every state that is going to be applied by the Highstate command based on your ",(0,s.kt)("inlineCode",{parentName:"p"},"top.sls")," files:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' state.show_highstate\nsalt '*' state.show_lowstate\n")),(0,s.kt)("p",null,"e.g."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"salt salt-minion state.show_lowstate\n\n\nsalt-minion:\n    |_\n      ----------\n      __env__:\n          base\n      __id__:\n          user_instar_admin\n      __sls__:\n          users\n      fullname:\n          Mike Polinowski\n      fun:\n          present\n      gid_from_name:\n          True\n      groups:\n          - sudo\n      home:\n          /home/instar.admin\n      name:\n          instar.admin\n      order:\n          10000\n      shell:\n          /bin/bash\n      state:\n          user\n      uid:\n          10000\n    |_\n      ----------\n\n...\n")),(0,s.kt)("h2",{id:"salt-states-with-grains-and-pillars"},"Salt States with Grains and Pillars"),(0,s.kt)("h3",{id:"encryption-with-pillar-data"},"Encryption with Pillar Data"),(0,s.kt)("p",null," Salt Pillars allow for the building of global data that can be made selectively\navailable to different minions based on minion grain filtering. The Salt\nPillar is laid out in the same fashion as the file server, with environments,\na top file and sls files. However, pillar data does not need to be in the\nhighstate format, and is generally just key/value pairs. Let's start by creating:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /srv/salt/pillars/base\nmkdir /srv/salt/pillars/dev\nmkdir /srv/salt/pillars/prod\n")),(0,s.kt)("p",null," ...and defining the directory where we want to collect our pillars:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/etc/salt/master.d/roots.conf")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"pillar_roots:\n  base:\n    - /srv/salt/pillars/base\n  dev:\n    - /srv/salt/pillars/dev\n  prod:\n    - /srv/salt/pillars/prod\n")),(0,s.kt)("p",null,"In each of those directories we need a ",(0,s.kt)("inlineCode",{parentName:"p"},"users/init.sls")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"top.sls")," file:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/pillars/base/users/init.sls")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"admin_users:\n  instar.admin: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChOWhU8u...\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/pillars/base/top.sls")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"base:\n  '*':\n    - users\n")),(0,s.kt)("p",null,"So now we can edit our salt user states to use this pillar data using a JinJa loop. This approach allows for users to be safely defined in a pillar and then the user data is applied in an sls file:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/states/base/users/init.sls")),(0,s.kt)("h2",{id:"for-loop"},(0,s.kt)("strong",{parentName:"h2"},"FOR LOOP")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"{% for user_key in pillar.get('admin_users', {}).items() %}\n\nuser_instar.admin:\n  user.present:\n    - name: instar.admin\n    - fullname: Mike Polinowski\n    - home: /home/admin\n    - shell: /bin/bash\n    - uid: 10000\n    - gid_from_name: true\n    - groups:\n      - sudo\n\ninstar.admin_key:\n  ssh_auth.present:\n    - user: instar.admin\n    - name: {{ user_key }}\n\n{% endfor %}\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"WITHOUT LOOP")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"user_instar.admin:\n  user.present:\n    - name: instar.admin\n    - fullname: Mike Polinowski\n    - home: /home/admin\n    - shell: /bin/bash\n    - uid: 10000\n    - gid_from_name: true\n    - groups:\n      - sudo\n\ninstar.admin_key:\n  ssh_auth.present:\n    - user: instar.admin\n    - name: {{ salt.pillar.get('admin_users', {}) }}\n")),(0,s.kt)("p",null,"Now restart your master service and refresh your minions pillar data:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"service salt-master restart // OR pkill -9 salt-master\nsalt-master -d\nsalt '*' saltutil.pillar_refresh\n")),(0,s.kt)("p",null,"We can check that our pillar data was picked up and send by:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' pillar.items // on MASTER\nsalt-call pillar.get admin_users  // on MINION\nsalt-call state.show_sls users saltenv=base  // on MINION\nsalt '*' state.show_low_sls users\n")),(0,s.kt)("p",null,"You should now have seen that your minion did received the pillar data and that the JinJa script was executed and your user state is ready to be applied."),(0,s.kt)("h2",{id:"identifying-minions-with-custom-grains"},"Identifying Minions with Custom Grains"),(0,s.kt)("h3",{id:"creating-grains-with-states"},"Creating Grains with States"),(0,s.kt)("p",null,"We now want to apply some custom grain data to our minions through a ",(0,s.kt)("inlineCode",{parentName:"p"},"grains")," state file:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/states/base/grains/init.sls")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'default_grains:\n  grains.present:\n    - name: environment\n    - value:\n      - monitoring: zabbix_master\n      - versions:\n        - "Zabbix 5.0.3."\n        - "Debian Buster"\n')),(0,s.kt)("p",null,"We can test the state with:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt-call state.show_sls grains saltenv=base\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"local:\n    ----------\n    default_grains:\n        ----------\n        grains:\n            |_\n              ----------\n              name:\n                  environment\n            |_\n              ----------\n              value:\n                  |_\n                    ----------\n                    monitoring:\n                        zabbix_master\n                  |_\n                    ----------\n                    versions:\n                        - Zabbix 5.0.3.\n                        - Debian Buster\n            - present\n            |_\n              ----------\n              order:\n                  10000\n        __sls__:\n            grains\n        __env__:\n            base\n")),(0,s.kt)("p",null,'To apply this state onto a minion - e.g. on "salt-minion" - run the following command:'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt salt-minion state.apply grains saltenv=base\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"salt-minion:\n----------\n          ID: default_grains\n    Function: grains.present\n        Name: environment\n      Result: True\n     Comment: Set grain environment to [OrderedDict([('monitoring', 'zabbix_master')]), OrderedDict([('versions', ['Zabbix 5.0.3.', 'Debian Buster'])])]\n     Started: 17:10:21.850928\n    Duration: 9.521 ms\n     Changes:   \n              ----------\n              environment:\n                  |_\n                    ----------\n                    monitoring:\n                        zabbix_master\n                  |_\n                    ----------\n                    versions:\n                        - Zabbix 5.0.3.\n                        - Debian Buster\n\nSummary for salt-minion\n------------\nSucceeded: 1 (changed=1)\nFailed:    0\n------------\nTotal states run:     1\nTotal run time:   9.521 ms\n")),(0,s.kt)("p",null,"Now verify that the state has been applied to the ",(0,s.kt)("inlineCode",{parentName:"p"},"salt-minion")," server:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt salt-minion grains.item\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"environment:\n        |_\n          ----------\n          monitoring:\n              zabbix_master\n        |_\n          ----------\n          versions:\n              - Zabbix 5.0.3.\n              - Debian Buster\n")),(0,s.kt)("h3",{id:"custom-grains-with-python"},"Custom Grains with Python"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"I cannot get Salt to pick up my Python file following different tutorials (",(0,s.kt)("a",{parentName:"p",href:"http://dev.mlsdigital.net/posts/SaltStackBeyondJinjaStates/"},"1"),", ",(0,s.kt)("a",{parentName:"p",href:"https://fabianlee.org/2016/10/05/saltstack-creating-a-custom-grain-using-python/"},"2"),", etc.). I have to look into this deeper later when I actually start to need it.")),(0,s.kt)("p",null,"Checking a Discourse Forum health:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"python2.7\nPython 2.7.18rc1 (default, Apr  7 2020, 12:05:55)\n\n>>> import urllib2\n>>> base_url = 'https://forum.instar.de/'\n>>> discourse_health = urllib2.urlopen(base_url + 'srv/status')\n>>> discourse_health.read()\n'ok'\n")),(0,s.kt)("p",null,"The Discourse Forum software runs a couple of internal health checks. Once all of them succeed you will get an ",(0,s.kt)("inlineCode",{parentName:"p"},"ok")," when querying the ",(0,s.kt)("inlineCode",{parentName:"p"},"/srv/status")," URL. Let's write this proof of health into a Salt grain using a python script."),(0,s.kt)("p",null,"Custom grains modules should be placed in a subdirectory named ",(0,s.kt)("inlineCode",{parentName:"p"},"_grains")," located under the file_roots specified by the master config file. The default path would be ",(0,s.kt)("inlineCode",{parentName:"p"},"/srv/salt/_grains"),":"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/etc/salt/master.d/roots.conf")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"grain_root:\n  base:\n    -/srv/salt/_grains\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"/srv/salt/_grains/forum_health.py")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"#!/usr/bin/python2.7\nimport urllib2\n\ndef gitlab_healthcheck():\n\n    # instantiate grains dictionary\n    grains = {}\n\n    # instantiate grains key\n    grains['discourse'] = []\n\n    # base url\n    base_url = 'https://forum.instar.de/'\n\n    discourse_health = urllib2.urlopen(base_url + 'srv/status')\n    discourse_health = discourse_health.read()\n\n    grains['discourse'].append({'service': 'forum_backend'})\n    grains['discourse'][0]['health'] = discourse_health\n    return grains\n\nif __name__ == '__main__':\n  gitlab_healthcheck()\n")),(0,s.kt)("p",null,"You can verify that your script is working:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"python2.7\n\nPython 2.7.18rc1 (default, Apr  7 2020, 12:05:55) \n\n>>> import urllib2\n>>> def gitlab_healthcheck():\n...   grains = {}\n...   grains['discourse'] = []\n...   base_url = 'https://forum.instar.de/'\n...   discourse_health = urllib2.urlopen(base_url + 'srv/status')\n...   discourse_health = discourse_health.read()\n...   grains['discourse'].append({'service': 'discourse'})\n...   grains['discourse'][0]['health'] = discourse_health\n...   print grains\n... \n>>> gitlab_healthcheck()\n{'discourse': [{'health': 'ok', 'service': 'forum_backend'}]}\n")),(0,s.kt)("p",null,"Custom grains modules will be distributed to the minions when state.",(0,s.kt)("strong",{parentName:"p"},"highstate")," is run, or by executing the ",(0,s.kt)("inlineCode",{parentName:"p"},"saltutil.sync_grains")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"saltutil.sync_all")," functions."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt-call saltutil.sync_grains\nsalt-call grains.item discourse\nsalt '*' grains.get discourse\n")))}m.isMDXComponent=!0},58385:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-b85ef375780aae5f2bc637ee69b89448.jpg"}}]);