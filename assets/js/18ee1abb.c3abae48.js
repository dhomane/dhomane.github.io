"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[2986],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),h=a,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||r;return t?o.createElement(m,i(i({ref:n},d),{},{components:t})):o.createElement(m,i({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},54863:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(87462),a=(t(67294),t(3905));const r={sidebar_position:5090,slug:"2022-05-20",title:"Hashicorp Nomad with Consul Service Discovery",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"]},i=void 0,s={unversionedId:"DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul/index",id:"DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul/index",title:"Hashicorp Nomad with Consul Service Discovery",description:"Shen Zhen, China",source:"@site/docs/DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul/index.md",sourceDirName:"DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul",slug:"/DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul/2022-05-20",permalink:"/docs/DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul/2022-05-20",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5090,frontMatter:{sidebar_position:5090,slug:"2022-05-20",title:"Hashicorp Nomad with Consul Service Discovery",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Dojo Consul Refresher",permalink:"/docs/DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/2022-05-21"},next:{title:"Hashicorp Nomad Access Control",permalink:"/docs/DevOps/Hashicorp/2022-05-19-hashicorp-dojo-nomad-access-control/2022-05-19"}},l={},c=[{value:"Consul Service Discovery",id:"consul-service-discovery",level:2},{value:"Use Nomad to Deploy Consul",id:"use-nomad-to-deploy-consul",level:3},{value:"Register your Service with Consul",id:"register-your-service-with-consul",level:3},{value:"Adding the Fabio Load Balancer",id:"adding-the-fabio-load-balancer",level:2}],d={toc:c};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Shen Zhen, China",src:t(95741).Z,width:"2230",height:"839"})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Following this Dojo task I ended up with a Nomad-deployed Consul server running in dev mode on my Nomad minion. In the final step I wanted to use this service to tell FabioLB what ports the frontend container came up to. Fabio would generate routes for them and start load balancing the incoming traffic to the random ports of those containers... which did not happen.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"I ",(0,a.kt)("a",{parentName:"p",href:"/docs/DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/2022-05-21"},"went ahead")," and installed the Consul Master/Minion cluster the regular way and ",(0,a.kt)("a",{parentName:"p",href:"/docs/DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/2022-05-22"},"tried it again"),". This time everything worked as expected.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#consul-service-discovery"},"Consul Service Discovery"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#use-nomad-to-deploy-consul"},"Use Nomad to Deploy Consul")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#register-your-service-with-consul"},"Register your Service with Consul")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#adding-the-fabio-load-balancer"},"Adding the Fabio Load Balancer"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Continuation of ",(0,a.kt)("a",{parentName:"p",href:"/docs/DevOps/Hashicorp/2022-05-18-hashicorp-dojo-nomad-adding-encryption/2022-05-18"},"Hashicorp Nomad Dojo"))),(0,a.kt)("h2",{id:"consul-service-discovery"},"Consul Service Discovery"),(0,a.kt)("p",null,"When two services need to communicate in a Nomad cluster, they need to know where to find each other and that's called Service Discovery. Because Nomad is purely a cluster manager and scheduler, you will need another piece of software to help you with service discovery: ",(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/"},"Consul"),"."),(0,a.kt)("h3",{id:"use-nomad-to-deploy-consul"},"Use Nomad to Deploy Consul"),(0,a.kt)("p",null,"To deploy Consul we can execute the service directly through Nomad using the ",(0,a.kt)("strong",{parentName:"p"},"Execute Driver"),". To run a binary you have two options: ",(0,a.kt)("inlineCode",{parentName:"p"},"exec")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"raw_exec"),". The difference between these two options is that raw_exec runs the task as the same user as the Nomad process. If we start Nomad as root, then it'd run tasks as root as well, which is not what you'd want. That's why ",(0,a.kt)("inlineCode",{parentName:"p"},"raw_exec")," should be used with extreme caution and is disabled by default."),(0,a.kt)("p",null,"Nomad supports downloading ",(0,a.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"https"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"git"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"hg")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"S3 artifacts"),". If these artifacts are archived (",(0,a.kt)("inlineCode",{parentName:"p"},"zip"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"tgz"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"bz2"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"xz"),"), they are automatically unarchived before the starting the task."),(0,a.kt)("p",null,"Create a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"consul.nomad")," on the Nomad master server. In this file you will need to define a job, a group and task - the task will ",(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/downloads"},"Download the Consul Binary"),", ",(0,a.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/job-specification/artifact"},"unzip and move it to the bin directory")," (you can get the SHA256 sum from the ",(0,a.kt)("a",{parentName:"p",href:"https://releases.hashicorp.com/consul/1.12.2/"},"Downloads Listing"),") and execute ",(0,a.kt)("strong",{parentName:"p"},"Consul")," in dev mode:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'job "consul" {\n  datacenters = ["instaryun"]\n  type = "service"\n\n  group "consul" {\n    count = 1\n\n    task "consul" {\n      driver = "exec"\n\n      config {\n        command = "artifacts/consul"\n        args = ["agent", "-dev"]\n      }\n\n      artifact {\n        source      = "https://releases.hashicorp.com/consul/1.12.2/consul_1.12.2_linux_amd64.zip"\n        destination = "local/artifacts/consul"\n        mode = "file"\n        options {\n          checksum = "sha256:35f85098f5956ef3aca66ec2d2d2a803d1f3359b4dec13382c6ac895344a1f4c"\n        }\n      }\n    }\n  }\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note")," that the destination is relative to the work directory of your Nomad process as defined in your Nomad configuration file, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/nomad/data")," + an allocation ID and the job name that created it. The full path to the Consul binary that was created running the job above was in my case: ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/nomad/data/alloc/346a1839-1e7e-c85f-0f81-7f6b71d64254/consul/artifacts/consul"),". ")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Also Note")," because the binary ends up in a sub directory you will have to give the relative path to it in the command variable ",(0,a.kt)("inlineCode",{parentName:"p"},"artifacts/consul"),".")),(0,a.kt)("p",null,"After execution you will see that the service has been successfully deployed:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Hashicorp Consul",src:t(29472).Z,width:"1020",height:"169"})),(0,a.kt)("p",null,"Additionally, all Consul service ports are bound to ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"netstat -tlnp | grep consul\ntcp    0   0 127.0.0.1:8300   LISTEN   10134/consul        \ntcp    0   0 127.0.0.1:8301   LISTEN   10134/consul        \ntcp    0   0 127.0.0.1:8302   LISTEN   10134/consul        \ntcp    0   0 127.0.0.1:8500   LISTEN   10134/consul        \ntcp    0   0 127.0.0.1:8502   LISTEN   10134/consul        \ntcp    0   0 127.0.0.1:8600   LISTEN   10134/consul\n")),(0,a.kt)("h3",{id:"register-your-service-with-consul"},"Register your Service with Consul"),(0,a.kt)("p",null,"We can now add a service block to our frontend configuration file that tells Consul how to verify that the service is operational. This can be done by using the randomly assigned HTTP port and send an HTTP request on ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'job "frontend" {\n    datacenters = ["instaryun"]\n  type = "service"\n\n    group "frontend" {\n    count = 2\n\n    scaling {\n      enabled = true\n      min     = 2\n      max     = 3\n    }\n        \n        network {\n            mode = "host"\n            port "http" {\n                to = "8080"\n            }\n        }\n\n    service {\n      name = "frontend"\n      tags = [\n        "frontend",\n        "urlprefix-/"\n      ]\n      port = "http"\n\n      check {\n        name     = "Frontend HTTP Healthcheck"\n        path     = "/"\n        type     = "http"\n        protocol = "http"\n        interval = "10s"\n        timeout  = "2s"\n      }\n    }\n\n        task "frontend" {\n            driver = "docker"\n\n            config {\n                image = "thedojoseries/frontend:latest"\n                ports = ["http"]\n            }\n        }\n    }\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note")," I am also adding a tag ",(0,a.kt)("inlineCode",{parentName:"p"},"urlprefix-/")," that will be used by the load balancer later on for routing. In the example above there is no prefix. The web frontend will be available on the domain root.")),(0,a.kt)("p",null,"After running the app we can use Consul's REST API to check if our frontend service has been registered by running the following queries on the Nomad minion server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl localhost:8500/v1/catalog/services\n\n{\n    "consul": [],\n    "frontend": [\n        "frontend",\n        "urlprefix-/"\n    ]\n}\n')),(0,a.kt)("p",null,"Here we can see the service as well as the tags we provided. If this command returns nothing for you make sure that Consul is already up-and-running before you start your app!"),(0,a.kt)("p",null,"To get the two service ports we can check:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl \'http://localhost:8500/v1/health/service/frontend?passing\'\n\n[\n    {\n        ...\n\n        "Service": {\n            "ID": "_nomad-task-6b0d87da-cfc7-b281-2d2c-b69c551ec10c-group-frontend-frontend-http",\n            "Service": "frontend",\n            "Tags": [\n                "frontend",\n                "urlprefix-/"\n            ],\n            "Address": "my.minion.com",\n            "TaggedAddresses": {\n                "lan_ipv4": {\n                    "Address": "my.minion.com",\n                    "Port": 27906\n                },\n                "wan_ipv4": {\n                    "Address": "my.minion.com",\n                    "Port": 27906\n                }\n            },\n            "Meta": {\n                "external-source": "nomad"\n            },\n            "Port": 27906,\n            "Weights": {\n                "Passing": 1,\n                "Warning": 1\n            },\n            "EnableTagOverride": false,\n            "Proxy": {\n                "Mode": "",\n                "MeshGateway": {},\n                "Expose": {}\n            },\n            "Connect": {},\n            "CreateIndex": 154,\n            "ModifyIndex": 154\n        },\n        ...\n\n        "Service": {\n            "ID": "_nomad-task-c269d3dc-4fa3-a05f-1234-3515d694f61c-group-frontend-frontend-http",\n            "Service": "frontend",\n            "Tags": [\n                "frontend",\n                "urlprefix-/"\n            ],\n            "Address": "my.minion.com",\n            "TaggedAddresses": {\n                "lan_ipv4": {\n                    "Address": "my.minion.com",\n                    "Port": 24123\n                },\n                "wan_ipv4": {\n                    "Address": "my.minion.com",\n                    "Port": 24123\n                }\n            },\n            "Meta": {\n                "external-source": "nomad"\n            },\n            "Port": 24123,\n            "Weights": {\n                "Passing": 1,\n                "Warning": 1\n            },\n            "EnableTagOverride": false,\n            "Proxy": {\n                "Mode": "",\n                "MeshGateway": {},\n                "Expose": {}\n            },\n            "Connect": {},\n            "CreateIndex": 139,\n            "ModifyIndex": 139\n        }\n\n        ...\n    }\n]\n')),(0,a.kt)("p",null,"And here we see that the two service instances run on port ",(0,a.kt)("inlineCode",{parentName:"p"},"24123")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"27906")," - which can be confirmed by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker ps\nCONTAINER ID  IMAGE                           PORTS\neec03c397329  thedojoseries/frontend:latest   my.minion.com:24123->8080/tcp\nbf06acaf078e  thedojoseries/frontend:latest   my.minion.com:27906->8080/tcp\n")),(0,a.kt)("h2",{id:"adding-the-fabio-load-balancer"},"Adding the Fabio Load Balancer"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Disclaimer: So far I was unable to register routes with Fabio")),(0,a.kt)("p",null,"We now have two instances of our web service that need to be fed by web traffic using a load balancer. The preferred solution by Hashicorp is ",(0,a.kt)("a",{parentName:"p",href:"https://fabiolb.net/"},"Fabio"),". Fabio is an HTTP and TCP reverse proxy that configures itself with data from Consul. Nomad has 3 types of schedulers: ",(0,a.kt)("inlineCode",{parentName:"p"},"Service"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Batch")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"System"),". You should configure the job fabio to be of ",(0,a.kt)("strong",{parentName:"p"},"Type System"),". ",(0,a.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/schedulers"},"Read more about Nomad Schedulers"),"."),(0,a.kt)("p",null,"Define a job called ",(0,a.kt)("inlineCode",{parentName:"p"},"fabio")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"fabio.nomad"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Define a group called fabio.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Define a task called fabio.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Fabio should be using the ",(0,a.kt)("a",{parentName:"li",href:"https://www.nomadproject.io/docs/drivers/docker"},"Docker driver"),"."),(0,a.kt)("li",{parentName:"ul"},"The image for this container should be ",(0,a.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/fabiolb/fabio/tags"},"fabiolb/fabio"),"."),(0,a.kt)("li",{parentName:"ul"},"Usually, Docker containers run in a network mode called Bridge. In a bridge mode, containers run on a different network stack than the host. Because Fabio needs to be able to communicate easily with Consul, which is running as a process on the host and not as a Docker container, you should configure fabio to run in a network mode called host instead (which will run the container in the same network stack as the host)."),(0,a.kt)("li",{parentName:"ul"},"Nomad should ",(0,a.kt)("a",{parentName:"li",href:"https://www.nomadproject.io/docs/job-specification/resources"},"allocate 200 MHz of cpu and 128 MB of memory")," to this task."),(0,a.kt)("li",{parentName:"ul"},"You should allocate two static ports for Fabio: ",(0,a.kt)("inlineCode",{parentName:"li"},"9999 - Load Balancer")," & ",(0,a.kt)("inlineCode",{parentName:"li"},"9998 - UI"),".")))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'job "fabio" {\n  datacenters = ["instaryun"]\n  type = "system"\n\n  group "fabio" {\n\n    network {\n      port "http" {\n        static = 9998\n      }\n      port "lb" {\n        static = 9999\n      }\n    }\n\n        task "fabio" {\n            driver = "docker"\n\n            config {\n                image = "fabiolb/fabio:latest"\n        network_mode = "host"\n                ports = ["http", "lb"]\n            }\n\n      resources {\n        cpu    = 200\n        memory = 128\n          }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Now check the Fabio log to see if there are any error messages:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nomad status fabio\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created   Modified\nf1510fb9  005f708b  fabio       0        run      running  6m3s ago  5m59s ago\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nomad alloc logs -stderr 5606f503\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"2022/06/07 06:22:55 [WARN] No route for my.mimion.com:9999/"))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Fabio Load Balancer",src:t(74279).Z,width:"1053",height:"298"})),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"No routes \xaf\\_(\u30c4)_/\xaf")))}p.isMDXComponent=!0},29472:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Hashicorp_Consul_01-813c42274f0cc0c368228f85d431f052.png"},74279:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Hashicorp_Consul_02-41b6568200db0a7163b8ac80d28e9e1d.png"},95741:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);