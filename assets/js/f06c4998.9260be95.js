"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[59830],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=r,g=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return t?a.createElement(g,s(s({ref:n},m),{},{components:t})):a.createElement(g,s({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},20802:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:5090,slug:"2021-10-25",title:"Matrix Secure Messaging",authors:"mpolinowski",tags:["Linux"]},s=void 0,i={unversionedId:"DevOps/Provisioning/2021-10-25--matrix-secure-messaging/index",id:"DevOps/Provisioning/2021-10-25--matrix-secure-messaging/index",title:"Matrix Secure Messaging",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2021-10-25--matrix-secure-messaging/index.md",sourceDirName:"DevOps/Provisioning/2021-10-25--matrix-secure-messaging",slug:"/DevOps/Provisioning/2021-10-25--matrix-secure-messaging/2021-10-25",permalink:"/docs/DevOps/Provisioning/2021-10-25--matrix-secure-messaging/2021-10-25",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2021-10-25--matrix-secure-messaging/index.md",tags:[{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5090,frontMatter:{sidebar_position:5090,slug:"2021-10-25",title:"Matrix Secure Messaging",authors:"mpolinowski",tags:["Linux"]},sidebar:"tutorialSidebar",previous:{title:"Installing a Discourse Forum on Debian Bullseye with Docker",permalink:"/docs/DevOps/Provisioning/2022-01-23--installing-discourse-docker/2022-01-23"},next:{title:"Setting up Wordpress with Traefik v2",permalink:"/docs/DevOps/Provisioning/2021-10-12--traefik-third-attempt/2021-10-12"}},l={},p=[{value:"Setup",id:"setup",level:2},{value:"Set up the Reverse Proxy",id:"set-up-the-reverse-proxy",level:2},{value:"NGINX Proxy Service",id:"nginx-proxy-service",level:3},{value:"Letsencrypt Proxy Companion Service",id:"letsencrypt-proxy-companion-service",level:3},{value:"Set up Synapse",id:"set-up-synapse",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Adding PostgreSQL",id:"adding-postgresql",level:2},{value:"Configure Synapse",id:"configure-synapse",level:3},{value:"Test the Synapse Matrix Homeserver",id:"test-the-synapse-matrix-homeserver",level:2},{value:"Setting up Federation in Synapse",id:"setting-up-federation-in-synapse",level:2},{value:"Configuration File for NGINX",id:"configuration-file-for-nginx",level:3},{value:"Edit the Docker Compose File",id:"edit-the-docker-compose-file",level:3},{value:"Testing",id:"testing",level:3},{value:"Deactivate Registrations",id:"deactivate-registrations",level:2}],m={toc:p};function c(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shenzhen, China",src:t(42761).Z,width:"1500",height:"559"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setup"},"Setup")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#set-up-the-reverse-proxy"},"Set up the Reverse Proxy"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#nginx-proxy-service"},"NGINX Proxy Service")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#letsencrypt-proxy-companion-service"},"Letsencrypt Proxy Companion Service")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#set-up-synapse"},"Set up Synapse"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuration"},"Configuration")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#adding-postgresql"},"Adding PostgreSQL"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configure-synapse"},"Configure Synapse")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#test-the-synapse-matrix-homeserver"},"Test the Synapse Matrix Homeserver")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setting-up-federation-in-synapse"},"Setting up Federation in Synapse"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuration-file-for-nginx"},"Configuration File for NGINX")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#edit-the-docker-compose-file"},"Edit the Docker Compose File")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#testing"},"Testing")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#deactivate-registrations"},"Deactivate Registrations"))),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Create a work directory and set the necessary permissions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /opt/matrix/synapse/data\nsudo chown -R 1000:1000 /opt/matrix\n")),(0,r.kt)("p",null,"Then we need an internal docker network for the services to communicate on:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker network create matrix\n")),(0,r.kt)("h2",{id:"set-up-the-reverse-proxy"},"Set up the Reverse Proxy"),(0,r.kt)("h3",{id:"nginx-proxy-service"},"NGINX Proxy Service"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/jwilder/nginx-proxy"},"jwilder/nginx-proxy")," nginx-proxy sets up a container running nginx and ",(0,r.kt)("a",{parentName:"p",href:"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/"},"docker-gen"),". ",(0,r.kt)("a",{parentName:"p",href:"http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/"},"docker-gen")," generates reverse proxy configs for nginx and reloads nginx when containers are started and stopped."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/docker-compose.yml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n    proxy:\n        image: "jwilder/nginx-proxy"\n        container_name: "proxy"\n        volumes:\n            - "certs:/etc/nginx/certs"\n            - "vhost:/etc/nginx/vhost.d"\n            - "html:/usr/share/nginx/html"\n            - "/run/docker.sock:/tmp/docker.sock:ro"\n        networks: ["matrix"]\n        restart: "always"\n        ports:\n            - "80:80"\n            - "443:443"\n\nnetworks:\n    matrix:\n        external: true\n\nvolumes:\n    certs:\n    vhost:\n    html:\n')),(0,r.kt)("h3",{id:"letsencrypt-proxy-companion-service"},"Letsencrypt Proxy Companion Service"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion"},"letsencrypt-nginx-proxy-companion"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/docker-compose.yml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n    proxy:\n\n        ...\n\n    letsencrypt:\n        image: "jrcs/letsencrypt-nginx-proxy-companion"\n        container_name: "letsencrypt"\n        volumes:\n            - "certs:/etc/nginx/certs"\n            - "vhost:/etc/nginx/vhost.d"\n            - "html:/usr/share/nginx/html"\n            - "/run/docker.sock:/var/run/docker.sock:ro"\n        environment:\n            NGINX_PROXY_CONTAINER: "proxy"\n        networks: ["matrix"]\n        restart: "always"\n        depends_on: ["proxy"]\n\n        ...\n')),(0,r.kt)("p",null,"Run the compose file with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<html>\n<head><title>503 Service Temporarily Unavailable</title></head>\n<body>\n<center><h1>503 Service Temporarily Unavailable</h1></center>\n<hr><center>nginx</center>\n</body>\n</html>\n")),(0,r.kt)("h2",{id:"set-up-synapse"},"Set up Synapse"),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/synapse/docker-compose.yml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n    synapse:\n        image: "matrixdotorg/synapse:latest"\n        container_name: "synapse"\n        volumes:\n            - "./data:/data"\n        environment:\n            # Replace this with your domain\n            VIRTUAL_HOST: "sub.domain.com"\n            VIRTUAL_PORT: 8008\n            # Replace this with your domain\n            LETSENCRYPT_HOST: "sub.domain.com"\n            # Replace this with your domain\n            SYNAPSE_SERVER_NAME: "sub.domain.com"\n            SYNAPSE_REPORT_STATS: "yes"\n        networks: ["matrix"]\n\n\nnetworks:\n    matrix:\n        external: true\n')),(0,r.kt)("p",null,"Generate the configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose run --rm synapse generate\n")),(0,r.kt)("p",null,"This will generate the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/matrix-org/synapse/tree/master/docker"},"config file")," inside ",(0,r.kt)("inlineCode",{parentName:"p"},"./data"),", named ",(0,r.kt)("inlineCode",{parentName:"p"},"homeserver.yaml"),". We need to make the following changes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"server_name")," variable is set to the subdomain of your choice, as set in the environment variable ",(0,r.kt)("inlineCode",{parentName:"li"},"SYNAPSE_SERVER_NAME"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TLS")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),". You are using a reverse proxy, so TLS is handled through your web server. Leave the port be."),(0,r.kt)("li",{parentName:"ul"},"Make sure ",(0,r.kt)("inlineCode",{parentName:"li"},"enable_registration")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", so that you can sign up and use your homeserver.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/synapse/data/homeserver.yaml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'## Server ##\nserver_name: "sub.domain.com"\n## TLS-enabled listener: for when matrix traffic is sent directly to synapse. ##\nlisteners:\n  - port: 8008\n    tls: false\n    type: http\n    x_forwarded: true\n\n    resources:\n      - names: [client, federation]\n        compress: false\n## Registration ##\nenable_registration: true \n')),(0,r.kt)("p",null,"Now that everything is in place, you can start synapse using a command as simple as"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Matrix Messenger Synapse",src:t(21843).Z,width:"987",height:"523"})),(0,r.kt)("h2",{id:"adding-postgresql"},"Adding PostgreSQL"),(0,r.kt)("p",null,"By default, synapse uses ",(0,r.kt)("strong",{parentName:"p"},"SQLite")," for its database. For a more important usecase, I recommend using PostgreSQL instead - if you need it, simply add it to your compose file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/synapse/docker-compose.yml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nservices:\n    synapse:\n\n        ...\n\n    postgresql:\n        image: postgres:latest\n        restart: always\n        environment:\n            POSTGRES_PASSWORD: somepassword\n            POSTGRES_USER: synapse\n            POSTGRES_DB: synapse\n            POSTGRES_INITDB_ARGS: "--encoding=\'UTF8\' --lc-collate=\'C\' --lc-ctype=\'C\'"\n        volumes:\n            - "postgresdata:/var/lib/postgresql/"\n        networks: ["matrix"]\n\n        ...\n\nnetworks:\n    matrix:\n        external: true\n\nvolumes:\n    postgresdata:\n')),(0,r.kt)("h3",{id:"configure-synapse"},"Configure Synapse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/synapse/data/homeserver.yaml\n")),(0,r.kt)("p",null,"Comment out the SQLite block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"## Database ##\ndatabase:\n  name: sqlite3\n  args:\n    database: /data/homeserver.db\n")),(0,r.kt)("p",null,"And replace it with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"## Database ##\ndatabase:\n    name: psycopg2\n    args:\n        user: synapse\n        password: somepassword\n        host: postgresql\n        database: synapse\n        cp_min: 5\n        cp_max: 10\n")),(0,r.kt)("p",null,"The name of the database is psycopg2, which is a PostgreSQL adapter for python. Now reload the compose file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose down\ndocker-compose up -d\n")),(0,r.kt)("h2",{id:"test-the-synapse-matrix-homeserver"},"Test the Synapse Matrix Homeserver"),(0,r.kt)("p",null,"Our Synapse Server now allows us to use the Matrix protocol to exchange messages. But we still need to install a client to interact with our server. A list of ",(0,r.kt)("a",{parentName:"p",href:"https://matrix.org/clients-matrix/"},"optional clients can be found here"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Matrix Messenger Synapse",src:t(99073).Z,width:"1024",height:"662"})),(0,r.kt)("p",null,"Add your server address instead of the official server network and create an account - done!"),(0,r.kt)("h2",{id:"setting-up-federation-in-synapse"},"Setting up Federation in Synapse"),(0,r.kt)("p",null,"Federation is basically the ability to communicate with users on a different homeserver."),(0,r.kt)("p",null,"By default, each matrix server tries to reach another matrix server via port ",(0,r.kt)("inlineCode",{parentName:"p"},"8443"),". The following process basically tells the other servers to use a different port. Because https is already working in port ",(0,r.kt)("inlineCode",{parentName:"p"},"443"),", you're simply going to delegate the default matrix communication port to ",(0,r.kt)("inlineCode",{parentName:"p"},"443"),"."),(0,r.kt)("h3",{id:"configuration-file-for-nginx"},"Configuration File for NGINX"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/synapse-federation\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'location /.well-known/matrix/server {\n    return 200 \'{"m.server": "sub.domain.com:443"}\';\n}\n')),(0,r.kt)("p",null,"Change ",(0,r.kt)("inlineCode",{parentName:"p"},"sub.domain.com")," to your domain."),(0,r.kt)("h3",{id:"edit-the-docker-compose-file"},"Edit the Docker Compose File"),(0,r.kt)("p",null,"Open your ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file and add another entry to the volumes array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/docker-compose.yml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"- ./synapse-federation:/etc/nginx/vhost.d/sub.domain.com\n")),(0,r.kt)("p",null,"Change ",(0,r.kt)("inlineCode",{parentName:"p"},"sub.domain.com")," to your domain. Now reload the compose file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose down\ndocker-compose up -d\n")),(0,r.kt)("h3",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Run the curl command and you should receive a ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," as response (make sure you have ",(0,r.kt)("inlineCode",{parentName:"p"},"jq")," installed):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://federationtester.matrix.org/api/report?server_name=sub.domain.com --silent | jq -r '.FederationOK'\ntrue\n")),(0,r.kt)("p",null,"Change ",(0,r.kt)("inlineCode",{parentName:"p"},"sub.domain.com")," to your domain."),(0,r.kt)("h2",{id:"deactivate-registrations"},"Deactivate Registrations"),(0,r.kt)("p",null,"Once everyone joined shut of the registration option to your server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/matrix/synapse/data/homeserver.yaml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"## Registration ##\nenable_registration: false\n")),(0,r.kt)("p",null,"And cycle the synapse service to take effect!"))}c.isMDXComponent=!0},21843:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Matrix_Messenger_Synapse_01-08e30027bb4903c6f74d7ed7dfece9e7.png"},99073:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Matrix_Messenger_Synapse_02-a718c22e7824f4ec82a75f597b79adc0.png"},42761:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4479c37579bf34e182e3ae543ec4de22.jpg"}}]);