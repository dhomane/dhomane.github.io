"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[56791],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),h=p(n),m=a,u=h["".concat(c,".").concat(m)]||h[m]||d[m]||o;return n?r.createElement(u,s(s({ref:t},l),{},{components:n})):r.createElement(u,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},98652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:4050,slug:"2022-10-22",title:"Hashicorp Nomad Sidecar Pattern",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Combine two applications in a single Nomad Job."},s=void 0,i={unversionedId:"DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/index",id:"DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/index",title:"Hashicorp Nomad Sidecar Pattern",description:"Combine two applications in a single Nomad Job.",source:"@site/docs/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/index.md",sourceDirName:"DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern",slug:"/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/2022-10-22",permalink:"/docs/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/2022-10-22",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:4050,frontMatter:{sidebar_position:4050,slug:"2022-10-22",title:"Hashicorp Nomad Sidecar Pattern",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"],description:"Combine two applications in a single Nomad Job."},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad - Working with Consul Connect",permalink:"/docs/DevOps/Hashicorp/2022-10-23-hashicorp-consul-connect/2022-10-23"},next:{title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",permalink:"/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/2022-10-21"}},c={},p=[{value:"SSL Proxy as a Sidecar",id:"ssl-proxy-as-a-sidecar",level:2},{value:"Run the Job",id:"run-the-job",level:2},{value:"Complete Jobfile",id:"complete-jobfile",level:2}],l={toc:p};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Shen Zhen, China",src:n(1740).Z,width:"2230",height:"839"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#ssl-proxy-as-a-sidecar"},"SSL Proxy as a Sidecar")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#run-the-job"},"Run the Job")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#complete-jobfile"},"Complete Jobfile"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Based on the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lastlegion/Container-Patterns-With-Nomad/blob/master/sidecar/app.nomad"},"Github Repository")," from ",(0,a.kt)("a",{parentName:"p",href:"https://iyer.ai/"},"@lastlegion"),". But I found a couple of deprecation issues that needed to be ironed out.")),(0,a.kt)("h2",{id:"ssl-proxy-as-a-sidecar"},"SSL Proxy as a Sidecar"),(0,a.kt)("p",null,"The sidecar pattern is made up of 2 containers:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"application container"),(0,a.kt)("li",{parentName:"ul"},"sidecar container")),(0,a.kt)("p",null,"Sidecar services augment other application and are scheduled on the ",(0,a.kt)("strong",{parentName:"p"},"Same Host")," using Nomad\u2019s ",(0,a.kt)("strong",{parentName:"p"},"Group Stanza"),". The application build consists of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/hashicorp/http-echo"},"Hashicorp HTTP Echo Server")," - standing in as a template Webfrontend - and an ",(0,a.kt)("a",{parentName:"p",href:"https://www.nginx.com/"},"NGINX")," Sidecar Proxy. The HTTP server is configured to return a simple ",(0,a.kt)("em",{parentName:"p"},"Hello World")," string and listening on port ",(0,a.kt)("inlineCode",{parentName:"p"},"8080")," - a port that is not accessible outside from localhost:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'config {\n        image = "hashicorp/http-echo:latest"\n        ports = [\n          "http",\n        ]\n        args  = [\n          "-listen", ":${NOMAD_PORT_http}",\n          "-text", "Hello World!",\n        ]\n      }\n')),(0,a.kt)("p",null,"The NGINX reverse-proxy can be configured using Nomad's ",(0,a.kt)("strong",{parentName:"p"},"Template Stanza")," to listen on a different port that is accessible from the internet and forward all incoming traffic to our HTTP server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'template {\n        data = <<EOF\n          worker_processes  1;\n          events {\n              worker_connections  1024;\n          }\n          http {\n              include       mime.types;\n              default_type  application/octet-stream;\n              sendfile        on;\n              keepalive_timeout  65;\n              upstream backend {\n                {{ range service "app-server" }}\n                server {{ .Address }}:{{ .Port }};\n                {{ else }}server 127.0.0.1:65535; # force a 502\n                {{ end }}\n              }\n              server {\n                listen       8015 ssl;\n                server_name  localhost;\n                ssl_certificate      /secrets/certificate.crt;\n                ssl_certificate_key  /secrets/certificate.key;\n                location / {\n                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                  proxy_set_header Host $http_host;\n                  proxy_pass http://backend;\n                }\n              }\n          }\n        EOF\n        destination = "config/nginx.conf"\n      }\n      template {\n        # Warning: Fetch certificate from a secret store like vault in a production setting\n        data = <<EOF\n-----BEGIN CERTIFICATE-----\nMIIDajCCAlKgAwIBAgITPAgZrdQO2jRhM/KkR8Czc1iC+jANBgkqhkiG9w0BAQsF\n...\njlw8JveeVvRFTvdwW23+JHnTvqpremm5PhmvPPnRNOhR1WhKxvJWWdeYDBjBoaPo\nvAIDwNat6MpbCNH6pSs=\n-----END CERTIFICATE-----\n        EOF\n        destination = "secrets/certificate.crt"\n      }\n      template {\n        # Warning: Fetch certificate from a secret store like vault in a production setting\n        data = <<EOF\n-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDtReLnMCGfM6jI\n...\nEFG7bYgACbS289cpWA2nmcfhhGn7tV26xLuMFma0GQhr6jpQbuqONbrnlyRJGvMr\n7iyk7nrNu9Ez3yM9zVMuvIJH\n-----END PRIVATE KEY-----\n        EOF\n        destination = "secrets/certificate.key"\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Here we are using a set of self-signed TLS certificates to accept HTTPS traffic on port ",(0,a.kt)("inlineCode",{parentName:"p"},"8015")," (I am using a none default port to de-conflict with another service running on this host), takes care of the TLS termination and forwards the request to our application container using a Nomad variables ",(0,a.kt)("inlineCode",{parentName:"p"},'{{ range service "app-server" }}'),"."),(0,a.kt)("h2",{id:"run-the-job"},"Run the Job"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'nomad plan tls_sidecar.tf\n+ Job: "ssl-proxy-example"\n+ Task Group: "ssl-proxy" (1 create)\n  + Task: "app-server" (forces create)\n  + Task: "ssl-proxy-sidecar" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 tls_sidecar.tf\n')),(0,a.kt)("p",null,"After running the job with the command above I can see the successful service registration in ",(0,a.kt)("strong",{parentName:"p"},"Consul"),". Here I can already see that the HTTP request results in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello World")," response - so this is the Consul client directly interacting with the app container through the port that is only accessible on ",(0,a.kt)("em",{parentName:"p"},"localhost"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Hashicorp Nomad Sidecar Pattern",src:n(10324).Z,width:"888",height:"775"})),(0,a.kt)("p",null,"Switching to ",(0,a.kt)("strong",{parentName:"p"},"Nomad")," I can see that both services - the app and my proxy sidecar - was successfully deployed:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Hashicorp Nomad Sidecar Pattern",src:n(34158).Z,width:"1051",height:"673"})),(0,a.kt)("p",null,"And finally testing the HTTPS connection - everything works as expected! My request is received by the NGINX proxy, TLS is terminated and the request then forwarded to the app. Sweet!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"curl --insecure https://myserverip:8015\nHello World!\n")),(0,a.kt)("h2",{id:"complete-jobfile"},"Complete Jobfile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'job "ssl-proxy" {\n  datacenters=["mydc"]\n  group "ssl-proxy" {\n        \n    network {\n        port "http" {\n            static = 8080\n        }\n        port "https" {\n            static = 8015\n        }\n    }\n\n    service {\n      name = "app-server"\n      port = "http"\n\n      check {\n        type     = "http"\n        port     = "http"\n        path     = "/"\n        interval = "2s"\n        timeout  = "2s"\n      }\n    }\n\n    task "app-server" {\n      driver = "docker"\n\n      config {\n        image = "hashicorp/http-echo:latest"\n        ports = [\n          "http",\n        ]\n        args  = [\n          "-listen", ":${NOMAD_PORT_http}",\n          "-text", "Hello World!",\n        ]\n      }\n    }\n\n    task "ssl-proxy-sidecar" {\n      driver = "docker"\n      config {\n        image = "nginx"\n        ports = [\n          "https",\n        ]\n        volumes = [\n          "config/nginx.conf:/etc/nginx/nginx.conf",\n          "secrets/certificate.crt:/secrets/certificate.crt",\n          "secrets/certificate.key:/secrets/certificate.key",\n        ]\n      }\n      \n      template {\n        data = <<EOF\n          worker_processes  1;\n          events {\n              worker_connections  1024;\n          }\n          http {\n              include       mime.types;\n              default_type  application/octet-stream;\n              sendfile        on;\n              keepalive_timeout  65;\n              upstream backend {\n                {{ range service "app-server" }}\n                server {{ .Address }}:{{ .Port }};\n                {{ else }}server 127.0.0.1:65535; # force a 502\n                {{ end }}\n              }\n              server {\n                listen       8015 ssl;\n                server_name  localhost;\n                ssl_certificate      /secrets/certificate.crt;\n                ssl_certificate_key  /secrets/certificate.key;\n                location / {\n                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                  proxy_set_header Host $http_host;\n                  proxy_pass http://backend;\n                }\n              }\n          }\n        EOF\n        destination = "config/nginx.conf"\n      }\n      template {\n        # Warning: Fetch certificate from a secret store like vault in a production setting\n        data = <<EOF\n-----BEGIN CERTIFICATE-----\nMIIDajCCAlKgAwIBAgITPAgZrdQO2jRhM/KkR8Czc1iC+jANBgkqhkiG9w0BAQsF\n...\njlw8JveeVvRFTvdwW23+JHnTvqpremm5PhmvPPnRNOhR1WhKxvJWWdeYDBjBoaPo\nvAIDwNat6MpbCNH6pSs=\n-----END CERTIFICATE-----\n        EOF\n        destination = "secrets/certificate.crt"\n      }\n      template {\n        # Warning: Fetch certificate from a secret store like vault in a production setting\n        data = <<EOF\n-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDtReLnMCGfM6jI\n...\nEFG7bYgACbS289cpWA2nmcfhhGn7tV26xLuMFma0GQhr6jpQbuqONbrnlyRJGvMr\n7iyk7nrNu9Ez3yM9zVMuvIJH\n-----END PRIVATE KEY-----\n        EOF\n        destination = "secrets/certificate.key"\n      }\n    }\n  }\n}\n')))}d.isMDXComponent=!0},34158:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Hashicorp-Nomad-Sidecar-Pattern_01-96e441bdeaf40e8af47a0f496d531871.png"},10324:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Hashicorp-Nomad-Sidecar-Pattern_02-0cc5de70097025427e3c5b4fe633a5d7.png"},1740:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);