"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[77210],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),h=s,b=d["".concat(l,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},29206:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var a=n(87462),s=(n(67294),n(3905));const r={sidebar_position:9020,slug:"2020-10-25",title:"HashiCorp Packer with Virtualbox (Autoinstall)",authors:"mpolinowski",tags:["LINUX","Packer"]},o=void 0,i={unversionedId:"DevOps/Hashicorp/2020-10-25--hashicorp-packer-and-virtualbox-autoinstall/index",id:"DevOps/Hashicorp/2020-10-25--hashicorp-packer-and-virtualbox-autoinstall/index",title:"HashiCorp Packer with Virtualbox (Autoinstall)",description:"TST, Hong Kong",source:"@site/docs/DevOps/Hashicorp/2020-10-25--hashicorp-packer-and-virtualbox-autoinstall/index.md",sourceDirName:"DevOps/Hashicorp/2020-10-25--hashicorp-packer-and-virtualbox-autoinstall",slug:"/DevOps/Hashicorp/2020-10-25--hashicorp-packer-and-virtualbox-autoinstall/2020-10-25",permalink:"/docs/DevOps/Hashicorp/2020-10-25--hashicorp-packer-and-virtualbox-autoinstall/2020-10-25",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2020-10-25--hashicorp-packer-and-virtualbox-autoinstall/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Packer",permalink:"/docs/tags/packer"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2020-10-25",title:"HashiCorp Packer with Virtualbox (Autoinstall)",authors:"mpolinowski",tags:["LINUX","Packer"]},sidebar:"tutorialSidebar",previous:{title:"HashiCorp Packer Provisioning",permalink:"/docs/DevOps/Hashicorp/2020-10-26--hashicorp-packer-provisioner/2020-10-26"},next:{title:"HashiCorp Packer with Virtualbox (Preseed)",permalink:"/docs/DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed/2020-10-24"}},l={},u=[{value:"Preparation",id:"preparation",level:2},{value:"apt.sh",id:"aptsh",level:3},{value:"cleanup.sh",id:"cleanupsh",level:3},{value:"Template File",id:"template-file",level:2}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"TST, Hong Kong",src:n(19374).Z,width:"1500",height:"622"})),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#preparation"},"Preparation"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#aptsh"},"apt.sh")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#cleanupsh"},"cleanup.sh")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#template-file"},"Template File"))),(0,s.kt)("h2",{id:"preparation"},"Preparation"),(0,s.kt)("p",null,"We\u2019re using the new AutoInstall method for Ubuntu 20.04. Previous versions use debian-installer preseeding, but that method didn\u2019t immediately work with the new ISO. You must also set the ",(0,s.kt)("inlineCode",{parentName:"p"},"http_directory")," configuration option to specify which directory on your filesystem hosts the files you want the HTTP server to serve. We have a directory called ubuntu-20.04 within that directory, and that in turn contains a user-data file which contains our AutoInstall config. I also found that AutoInstall expects a file called meta-data to be present, although it doesn\u2019t require any content so I simply have an empty file called meta-data alongside user-data."),(0,s.kt)("p",null,"Our user-data file looks like this"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#cloud-config\nautoinstall:\n  version: 1\n  apt:\n    geoip: true\n    preserve_sources_list: false\n    primary:\n    - arches: [amd64, i386]\n      uri: http://gb.archive.ubuntu.com/ubuntu\n    - arches: [default]\n      uri: http://ports.ubuntu.com/ubuntu-ports\n  identity:\n    hostname: ubuntu2004\n    username: vagrant\n    password: <encrypted password>\n  ssh:\n    allow-pw: true\n    install-server: true\n  locale: en_US\n  keyboard: \n    layout: gb\n  storage:\n    layout:\n      name: direct\n    config:\n      - type: disk\n        id: disk0\n        match:\n          size: largest\n      - type: partition\n        id: boot-partition\n        device: disk0\n        size: 500M\n      - type: partition\n        id: root-partition\n        device: disk0\n        size: -1\n  late-commands:\n    - "echo \'Defaults:vagrant !requiretty\' > /target/etc/sudoers.d/vagrant"\n    - "echo \'vagrant ALL=(ALL) NOPASSWD: ALL\' >> /target/etc/sudoers.d/vagrant"\n    - "chmod 440 /target/etc/sudoers.d/vagrant"\n')),(0,s.kt)("p",null,"Note that the vagrant bits are somewhat unique to us. We create a user called vagrant as part of the install. That\u2019s so we can use this image as a vagrant box later on. Note also at the end that we add vagrant to the sudo config and ensure that it doesn\u2019t require a password to run sudo commands. This ensures that when the image is used in vagrant, it doesn\u2019t prompt for a password before running a command with root privileges."),(0,s.kt)("p",null,"Then we come to the provisioners. For this base image, we run two scripts, one to update all the packages, and the other cleans up a few things:"),(0,s.kt)("h3",{id:"aptsh"},"apt.sh"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get update\nsudo apt upgrade -y\nsudo apt install apt-transport-https -y\n")),(0,s.kt)("h3",{id:"cleanupsh"},"cleanup.sh"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt-get clean\nFILE=/etc/cloud/cloud.cfg.d/50-curtin-networking.cfg\nif test -f "$FILE"; then\n  sudo rm $FILE\nfi\n\nFILE=/etc/cloud/cloud.cfg.d/curtin-preserve-sources.cfg\nif test -f "$FILE"; then\n  sudo rm $FILE\nfi\n\nFILE=/etc/cloud/cloud.cfg.d/subiquity-disable-cloudinit-networking.cfg\nif test -f "$FILE"; then\n  sudo rm $FILE\nfi\n')),(0,s.kt)("h2",{id:"template-file"},"Template File"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "builders": [\n    {\n      "type": "virtualbox-iso",\n      "vboxmanage": [\n        [ "modifyvm", "{{.Name}}", "--memory", "{{ user `ram` }}" ],\n        [ "modifyvm", "{{.Name}}", "--vram", "36" ],\n        [ "modifyvm", "{{.Name}}", "--cpus", "{{ user `cpus` }}" ]\n      ],\n      "guest_os_type": "Ubuntu_64",\n      "disk_size": "{{ user `virtualbox_disk_size` }}",\n      "headless": "{{ user `headless` }}",\n      "iso_url": "{{ user `iso_url` }}",\n      "iso_checksum": "{{ user `iso_checksum` }}",\n      "iso_checksum_type": "sha256",\n      "vm_name": "ubuntu-2004",\n      "boot_command": [\n        " <wait><enter><wait>",\n        "<f6><esc>",\n        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",\n        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",\n        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",\n        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",\n        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",\n        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",\n        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",\n        "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>",\n        "<bs><bs><bs>",\n        "/casper/vmlinuz ",\n        "initrd=/casper/initrd ",\n        "autoinstall ",\n        "ds=nocloud-net;s=http://{{.HTTPIP}}:{{.HTTPPort}}/ubuntu-20.04/ ",\n        "<enter>"\n      ],\n      "boot_wait": "5s",\n      "http_directory": "../scripts/ubuntu/http",\n      "shutdown_command": "sudo systemctl poweroff",\n      "ssh_password": "vagrant",\n      "ssh_port": 22,\n      "ssh_username": "vagrant",\n      "ssh_timeout": "10000s",\n      "ssh_handshake_attempts": "30",\n      "guest_additions_mode": "disable",\n      "format": "ova"\n    }\n  ],\n  "provisioners": [\n      {\n        "type": "shell",\n        "execute_command": "echo \'vagrant\' | {{.Vars}} sudo -S -E sh -eux \'{{.Path}}\'",\n        "scripts": [\n            "../scripts/ubuntu/apt.sh",\n            "../scripts/ubuntu/cleanup.sh"\n        ]\n      }\n  ],\n  "variables": {\n    "headless": "true",\n    "iso_checksum": "<Checksum of ISO using the algorithm specified in iso_checksum_type above>",\n    "iso_url": "<URL to ISO>",\n    "version": "0",\n    "ram": "2048",\n    "cpus": "2",\n    "virtualbox_disk_size": "8192",\n    "vmware_disk_size": "8291"\n  }\n}\n')))}c.isMDXComponent=!0},19374:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-d8b333d1f9ddf34ac7392aef86b14c83.jpg"}}]);