"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[33861],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},24734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:6010,slug:"2022-05-18",title:"Hashicorp Nomad Adding Encryption to your Cluster",authors:"mpolinowski",tags:["Nomad","LINUX"]},i=void 0,s={unversionedId:"DevOps/Hashicorp/2022-05-18-hashicorp-dojo-nomad-adding-encryption/index",id:"DevOps/Hashicorp/2022-05-18-hashicorp-dojo-nomad-adding-encryption/index",title:"Hashicorp Nomad Adding Encryption to your Cluster",description:"Shen Zhen, China",source:"@site/docs/DevOps/Hashicorp/2022-05-18-hashicorp-dojo-nomad-adding-encryption/index.md",sourceDirName:"DevOps/Hashicorp/2022-05-18-hashicorp-dojo-nomad-adding-encryption",slug:"/DevOps/Hashicorp/2022-05-18-hashicorp-dojo-nomad-adding-encryption/2022-05-18",permalink:"/docs/DevOps/Hashicorp/2022-05-18-hashicorp-dojo-nomad-adding-encryption/2022-05-18",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-05-18-hashicorp-dojo-nomad-adding-encryption/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:6010,frontMatter:{sidebar_position:6010,slug:"2022-05-18",title:"Hashicorp Nomad Adding Encryption to your Cluster",authors:"mpolinowski",tags:["Nomad","LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad Access Control",permalink:"/docs/DevOps/Hashicorp/2022-05-19-hashicorp-dojo-nomad-access-control/2022-05-19"},next:{title:"Hashicorp Nomad Deployment",permalink:"/docs/DevOps/Hashicorp/2022-05-17-hashicorp-dojo-nomad-deployment/2022-05-17"}},l={},c=[{value:"Enable Transport Encryption for Nomad",id:"enable-transport-encryption-for-nomad",level:2},{value:"Enable Gossip Encryption",id:"enable-gossip-encryption",level:3},{value:"Enable mTLS Encryption for Nomad",id:"enable-mtls-encryption-for-nomad",level:2},{value:"Creating Certificates",id:"creating-certificates",level:3},{value:"Nomad mTLS CA Certificates",id:"nomad-mtls-ca-certificates",level:4},{value:"Nomad Node Certificates",id:"nomad-node-certificates",level:4},{value:"Configuring the Nomad Master",id:"configuring-the-nomad-master",level:3},{value:"Configuring your Nomad Minions",id:"configuring-your-nomad-minions",level:3},{value:"Running with TLS",id:"running-with-tls",level:3}],p={toc:c};function d(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shen Zhen, China",src:t(32885).Z,width:"2230",height:"839"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#enable-transport-encryption-for-nomad"},"Enable Transport Encryption for Nomad"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#enable-gossip-encryption"},"Enable Gossip Encryption")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#enable-mtls-encryption-for-nomad"},"Enable mTLS Encryption for Nomad"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-certificates"},"Creating Certificates"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#nomad-mtls-ca-certificates"},"Nomad mTLS CA Certificates")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#nomad-node-certificates"},"Nomad Node Certificates")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuring-the-nomad-master"},"Configuring the Nomad Master")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuring-your-nomad-minions"},"Configuring your Nomad Minions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#running-with-tls"},"Running with TLS"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Continuation of ",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Hashicorp/2022-05-17-hashicorp-dojo-nomad-deployment/2022-05-17"},"Hashicorp Nomad Dojo"))),(0,r.kt)("h2",{id:"enable-transport-encryption-for-nomad"},"Enable Transport Encryption for Nomad"),(0,r.kt)("p",null,"The Nomad agent supports encrypting all of its network traffic. There are two separate encryption systems, one for gossip traffic, and one for HTTP and RPC:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Serf"),": Used to communicate between Nomad servers. Frequently referred to as ",(0,r.kt)("inlineCode",{parentName:"li"},"gossip"),". Secured by a shared key."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HTTP"),": Used to communicate between CLI and Nomad agents. Secured by mTLS."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RPC"),": Used to communicate between Nomad agents. Secured by mTLS.")),(0,r.kt)("h3",{id:"enable-gossip-encryption"},"Enable Gossip Encryption"),(0,r.kt)("p",null,"Nomad server's gossip protocol that is used to communicate membership and liveness information can be encrypted with symmetric keys. Enabling gossip encryption requires you to set an encryption key when starting the Nomad server. The key must be a base64-encoded string of 32 random bytes. The Nomad CLI includes a operator keygen command for generating a new secure gossip encryption key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nomad operator keygen\n4kRkFQfcc3LU0BazP1ca+z==\n")),(0,r.kt)("p",null,"Current and older versions of nomad operator keygen return 16 bytes; however, Nomad supports gossip encryption keys of 32 bytes as well. Supplying a 32 byte key enables AES-256 mode, where supplying a 16 byte key enables AES-128 mode. You can use OpenSSL to generate this key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rand -base64 32\nIisA4F7Mu/RwGfBZelcsFzMlJ4+twnO5Z7eoTzD0T6c=\n")),(0,r.kt)("p",null,"And put the same generated key into every server's configuration file ",(0,r.kt)("inlineCode",{parentName:"p"},"nano /etc/nomad.d/server.hcl "),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'server {\n  enabled = true\n\n  ...\n\n  # Encrypt gossip communication\n  encrypt = "IisA4F7Mu/RwGfBZelcsFzMlJ4+twnO5Z7eoTzD0T6c="\n}\n')),(0,r.kt)("p",null,"Once all of the nodes have been restarted all gossip traffic will be encrypted between all of your server nodes."),(0,r.kt)("h2",{id:"enable-mtls-encryption-for-nomad"},"Enable mTLS Encryption for Nomad"),(0,r.kt)("h3",{id:"creating-certificates"},"Creating Certificates"),(0,r.kt)("p",null,"You can generate a private CA certificate and key with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cloudflare/cfssl"},"cfssl"),". Building cfssl requires a working ",(0,r.kt)("a",{parentName:"p",href:"http://golang.org/doc/install"},"Go 1.12+ installation"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://go.dev/dl/go1.18.3.linux-amd64.tar.gz\nrm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.3.linux-amd64.tar.gz && rm go1.18.3.linux-amd64.tar.gz\n")),(0,r.kt)("p",null,"Add go to path ",(0,r.kt)("inlineCode",{parentName:"p"},"nano ~/.profile")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"nano ~/.zshrc")," (don't forget to ",(0,r.kt)("inlineCode",{parentName:"p"},"source .zshrc"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export PATH=$PATH:/usr/local/go/bin\n")),(0,r.kt)("p",null,"Check it it worked:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go version\ngo version go1.18.3 linux/amd64\n")),(0,r.kt)("p",null,"Now we can build ",(0,r.kt)("inlineCode",{parentName:"p"},"cfssl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/cloudflare/cfssl.git\ncd cfssl\nmake\n")),(0,r.kt)("h4",{id:"nomad-mtls-ca-certificates"},"Nomad mTLS CA Certificates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /etc/nomad.d/tls\ncd /etc/nomad.d/tls\ncfssl print-defaults csr | cfssl gencert -initca - | cfssljson -bare nomad-ca\n")),(0,r.kt)("p",null,"The output will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -la /etc/nomad.d/tls\n\n-rw-r--r-- 1 nomad-ca.csr\n-rw------- 1 nomad-ca-key.pem\n-rw-r--r-- 1 nomad-ca.pem\n")),(0,r.kt)("p",null,"The CA key (",(0,r.kt)("inlineCode",{parentName:"p"},"nomad-ca-key.pem"),") will be used to sign certificates for Nomad nodes and must be kept private. The CA certificate (",(0,r.kt)("inlineCode",{parentName:"p"},"nomad-ca.pem"),") contains the public key necessary to validate Nomad certificates and therefore must be distributed to every node that requires access."),(0,r.kt)("h4",{id:"nomad-node-certificates"},"Nomad Node Certificates"),(0,r.kt)("p",null,"Once you have a CA certificate and key you can generate and sign the certificates Nomad will use directly. Nomad certificates are signed with their region and role such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"client.global.nomad"),": for a client node in the global region"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"server.us-west.nomad"),": for a server node in the us-west region ")),(0,r.kt)("p",null,"To create certificates for the client and server in the cluster create the following configuration file as ",(0,r.kt)("inlineCode",{parentName:"p"},"nano /etc/nomad.d/tls/cfssl.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "signing": {\n    "default": {\n      "expiry": "87600h",\n      "usages": ["signing", "key encipherment", "server auth", "client auth"]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Generate a certificate for the ",(0,r.kt)("strong",{parentName:"p"},"Nomad Master")," running the following command inside ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/nomad.d/tls"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo '{}' | cfssl gencert -ca=nomad-ca.pem -ca-key=nomad-ca-key.pem -config=cfssl.json \\\n-hostname=\"server.global.nomad,localhost,127.0.0.1\" - | cfssljson -bare server\n")),(0,r.kt)("p",null,"Generate a certificate for the Nomad client:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo '{}' | cfssl gencert -ca=nomad-ca.pem -ca-key=nomad-ca-key.pem -config=cfssl.json \\\n-hostname=\"client.global.nomad,localhost,127.0.0.1\" - | cfssljson -bare client\n")),(0,r.kt)("p",null,"Generate a certificate for the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo '{}' | cfssl gencert -ca=nomad-ca.pem -ca-key=nomad-ca-key.pem -profile=client \\\n- | cfssljson -bare cli\n")),(0,r.kt)("p",null,"Your ",(0,r.kt)("inlineCode",{parentName:"p"},"tls")," dir should now contain the following files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -la /etc/nomad.d/tls\n\n-rw-r--r-- cfssl.json\n-rw-r--r-- cli.csr\n-rw-r--r-- client.csr\n-rw------- client-key.pem\n-rw-r--r-- client.pem\n-rw------- cli-key.pem\n-rw-r--r-- cli.pem\n-rw-r--r-- nomad-ca.csr\n-rw------- nomad-ca-key.pem\n-rw-r--r-- nomad-ca.pem\n-rw-r--r-- server.csr\n-rw------- server-key.pem\n-rw-r--r-- server.pem\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Since we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"nomad")," user on our Master node all those files need to be ",(0,r.kt)("inlineCode",{parentName:"p"},"chown nomad:nomad /etc/nomad.d/tls/*")," ! The Minion nodes use the ",(0,r.kt)("inlineCode",{parentName:"p"},"root")," user - so permissions there don't need to be changed.")),(0,r.kt)("p",null,"Each Nomad node should have the appropriate key (",(0,r.kt)("inlineCode",{parentName:"p"},"-key.pem"),") and certificate (",(0,r.kt)("inlineCode",{parentName:"p"},".pem"),") file for its region and role. In addition each node needs the CA's public certificate (",(0,r.kt)("inlineCode",{parentName:"p"},"nomad-ca.pem"),")."),(0,r.kt)("h3",{id:"configuring-the-nomad-master"},"Configuring the Nomad Master"),(0,r.kt)("p",null,"Next Nomad must be configured to use the newly-created key and certificates for mTLS by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"tls")," block ",(0,r.kt)("inlineCode",{parentName:"p"},"nano /etc/nomad.d/server.hcl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# Require TLS\ntls {\n  http = true\n  rpc  = true\n\n  ca_file   = "/etc/nomad.d/tls/nomad-ca.pem"\n  cert_file = "/etc/nomad.d/tls/server.pem"\n  key_file  = "/etc/nomad.d/tls/server-key.pem"\n\n  verify_server_hostname = true\n  verify_https_client    = false\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If ",(0,r.kt)("inlineCode",{parentName:"p"},"verify_server_hostname")," is set to false the node's certificate will be checked to ensure it is signed by the same CA, but its role and region will not be verified. This means any service with a certificate signed by same CA as Nomad can act as a client or server of any region.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"verify_https_client")," requires HTTP API clients to present a certificate signed by the same CA as Nomad's certificate. It may be disabled to allow HTTP API clients (e.g. Nomad CLI, Consul, or curl) to communicate with the HTTPS API without presenting a client-side certificate. If ",(0,r.kt)("inlineCode",{parentName:"p"},"verify_https_client")," is enabled only HTTP API clients presenting a certificate signed by the same CA as Nomad's certificate are allowed to access Nomad.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Enabling ",(0,r.kt)("inlineCode",{parentName:"strong"},"verify_https_client")," effectively protects Nomad from unauthorized network access at the cost of losing Consul HTTPS health checks for agents.")),(0,r.kt)("h3",{id:"configuring-your-nomad-minions"},"Configuring your Nomad Minions"),(0,r.kt)("p",null,"The Nomad client configuration is similar to the server configuration. The biggest difference is in the certificate and key used for configuration ",(0,r.kt)("inlineCode",{parentName:"p"},"nano /etc/nomad.d/client.hcl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# Require TLS\ntls {\n  http = true\n  rpc  = true\n\n  ca_file   = "/etc/nomad.d/tls/nomad-ca.pem"\n  cert_file = "/etc/nomad.d/tls/client.pem"\n  key_file  = "/etc/nomad.d/tls/client-key.pem"\n\n  verify_server_hostname = true\n  verify_https_client    = false\n}\n')),(0,r.kt)("p",null,"Make sure that those three files are added to each minion ",(0,r.kt)("inlineCode",{parentName:"p"},"nomad-ca.pem"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"client.pem"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"client-key.pem"),"."),(0,r.kt)("h3",{id:"running-with-tls"},"Running with TLS"),(0,r.kt)("p",null,"Restart the Nomad service on all your nodes inside the cluster and check the status:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"service nomad restart\nservice nomad status\n")),(0,r.kt)("p",null,"Accessing the Nomad UI now requires you to use ",(0,r.kt)("strong",{parentName:"p"},"HTTPS")," and accept your self-signed certificate:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Hashicorp Nomad Encryption",src:t(84580).Z,width:"1019",height:"692"})),(0,r.kt)("p",null,"But now we are no longer able to just use the HTTP API with the Nomad CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nomad node status\nError querying node status: Unexpected response code: 400\n(Client sent an HTTP request to an HTTPS server.)\n")),(0,r.kt)("p",null,"For this we now also have to provide the certificates as in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nomad node status \\\n    -ca-cert=/etc/nomad.d/tls/nomad-ca.pem \\\n    -client-cert=/etc/nomad.d/tls/cli.pem \\\n    -client-key=/etc/nomad.d/tls/cli-key.pem \\\n    -address=https://127.0.0.1:4646\n")),(0,r.kt)("p",null,"To make this process a little bit less painful we can simply add those parameter to our shell config - e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.bashrc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.zshrc")," (don't forget to ",(0,r.kt)("inlineCode",{parentName:"p"},"source ~/.zshrc")," afterwards):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export NOMAD_ADDR=https://127.0.0.1:4646\nexport NOMAD_CACERT=/etc/nomad.d/tls/nomad-ca.pem\nexport NOMAD_CLIENT_CERT=/etc/nomad.d/tls/cli.pem\nexport NOMAD_CLIENT_KEY=/etc/nomad.d/tls/cli-key.pem\n")))}d.isMDXComponent=!0},84580:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Nomad_Encryption_01-3c6f41182d363cad7dbfeeed901ef0b9.png"},32885:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);