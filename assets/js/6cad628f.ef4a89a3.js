"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[24992],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=u(n),h=r,d=g["".concat(i,".").concat(h)]||g[h]||c[h]||l;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=g;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},74984:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:8090,slug:"2021-03-23",title:"Logstash 7 Working with Unstructured Data",authors:"mpolinowski",tags:["LINUX","Elasticsearch"]},o=void 0,s={unversionedId:"DevOps/Elasticsearch/2021-03-23-logstash-working-with-unstructured-data/index",id:"DevOps/Elasticsearch/2021-03-23-logstash-working-with-unstructured-data/index",title:"Logstash 7 Working with Unstructured Data",description:"Guangzhou, China",source:"@site/docs/DevOps/Elasticsearch/2021-03-23-logstash-working-with-unstructured-data/index.md",sourceDirName:"DevOps/Elasticsearch/2021-03-23-logstash-working-with-unstructured-data",slug:"/DevOps/Elasticsearch/2021-03-23-logstash-working-with-unstructured-data/2021-03-23",permalink:"/docs/DevOps/Elasticsearch/2021-03-23-logstash-working-with-unstructured-data/2021-03-23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Elasticsearch/2021-03-23-logstash-working-with-unstructured-data/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Elasticsearch",permalink:"/docs/tags/elasticsearch"}],version:"current",sidebarPosition:8090,frontMatter:{sidebar_position:8090,slug:"2021-03-23",title:"Logstash 7 Working with Unstructured Data",authors:"mpolinowski",tags:["LINUX","Elasticsearch"]},sidebar:"tutorialSidebar",previous:{title:"Logstash 7 and Common Log Pattern",permalink:"/docs/DevOps/Elasticsearch/2021-03-24-logstash-common-grok-pattern/2021-03-24"},next:{title:"Logstash 7 Working with Structured Data",permalink:"/docs/DevOps/Elasticsearch/2021-03-22-logstash-working-with-structured-data/2021-03-22"}},i={},u=[{value:"Grok Pattern Filter",id:"grok-pattern-filter",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Debugging Grok Pattern",id:"debugging-grok-pattern",level:3},{value:"Analyzing a Logfile",id:"analyzing-a-logfile",level:3},{value:"Using Multiple Pattern",id:"using-multiple-pattern",level:3}],p={toc:u};function c(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guangzhou, China",src:n(80794).Z,width:"1500",height:"595"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#grok-pattern-filter"},"Grok Pattern Filter"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#debugging-grok-pattern"},"Debugging Grok Pattern")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#analyzing-a-logfile"},"Analyzing a Logfile")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#using-multiple-pattern"},"Using Multiple Pattern"))))),(0,r.kt)("h2",{id:"grok-pattern-filter"},"Grok Pattern Filter"),(0,r.kt)("h3",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html"},"Grok is a great way to parse unstructured log data into something structured and queryable"),". This tool is perfect for syslog logs, apache and other webserver logs, mysql logs, and in general, any log format that is generally written for humans and not computer consumption. Logstash ships with about 120 patterns by default. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns"},"You can find them here"),"."),(0,r.kt)("p",null,"As an example we already used the Grok filter to help us ingest an ",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Elasticsearch/2021-03-21-logstash-digesting-data/2021-03-21#preparing-the-configuration-files"},"Apache access log")," earlier:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'filter {\n  grok {\n    match => {"body" => "%{COMBINEDAPACHELOG}"}\n  }\n  date {\n    match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]\n  }\n}\n')),(0,r.kt)("p",null,"If you have an unstructured log that contains client email addresses you can use the following Grok pattern to extract them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"%{EMAILADDRESS:client_email}\n")),(0,r.kt)("p",null,"We can also combine pattern to match our logfile - for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"2021-08-02T04:54:17.043+02:00 DEBUG An event happened\n")),(0,r.kt)("p",null,"Can be analyzed with the following pattern:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:level} %{GREEDYDATA:body}\n")),(0,r.kt)("h3",{id:"debugging-grok-pattern"},"Debugging Grok Pattern"),(0,r.kt)("p",null,"You can generate those patterns using the ",(0,r.kt)("a",{parentName:"p",href:"http://grokdebug.herokuapp.com"},"Grok Debugger")," which comes with a very helpful auto-completion function:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Logstash Grok Filter",src:n(4058).Z,width:"966",height:"740"})),(0,r.kt)("p",null,"The Grok filter fulfils it's duty and brings structure to our log date:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "time": [\n    [\n      "2021-08-02T04:54:17.043+02:00"\n    ]\n  ],\n  "level": [\n    [\n      "DEBUG"\n    ]\n  ],\n  "body": [\n    [\n      "An event happened"\n    ]\n  ]\n}\n')),(0,r.kt)("h3",{id:"analyzing-a-logfile"},"Analyzing a Logfile"),(0,r.kt)("p",null,"We now have a pattern that fits our log. Let's apply it to:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"/opt/logstash/grok_test")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"2021-08-01T09:39:44Z INFO variable server value is connector\n2021-06-21T22:23:12Z ERROR cannot find the requested resource\n2021-05-14T14:52:36Z INFO variable server value is connector\n2021-03-26T01:22:56Z DEBUG initializing checksum\n2021-02-13T13:17:11Z INFO initializing the bootup\n")),(0,r.kt)("p",null,"The Logstash configuration to use our Grok filter pattern looks like:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"/opt/logstash/pipeline/logstash.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'input {\n  file {\n    path => "/usr/share/logstash/grok_test"\n    start_position => "beginning"\n    sincedb_path => "/dev/null"\n  }\n}\nfilter {\n  grok {\n    match => { "message" => [\'%{TIMESTAMP_ISO8601:time} %{level:level} %{GREEDYDATA:body}\'] }\n  }\n  mutate {\n    remove_field => ["message", "@timestamp", "path", "host", "@version"]\n  }\n}\noutput {\n   elasticsearch {\n     hosts => "http://localhost:9200"\n     index => "grok_test"\n  }\n\nstdout {}\n\n}\n')),(0,r.kt)("p",null,"And run Logstash with the new configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'docker run \\\n   --name logstash \\\n   --net=host \\\n   --rm -it \\\n   -v /opt/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf \\\n   -v /opt/logstash/grok_test:/usr/share/logstash/grok_test \\\n   -e "ELASTIC_HOST=localhost:9200" \\\n   -e "XPACK_SECURITY_ENABLED=false" \\\n   -e "XPACK_REPORTING_ENABLED=false" \\\n   -e "XPACK_MONITORING_ENABLED=false" \\\n   -e "XPACK_MONITORING_ELASTICSEARCH_USERNAME=elastic" \\\n   -e "XPACK_MONITORING_ELASTICSEARCH_PASSWORD=changeme" \\\n   logstash:7.13.4\n')),(0,r.kt)("p",null,"And we can see that the ingestion ran nicely:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'[2021-08-02T08:22:19,478][INFO ][logstash.agent] Pipelines running {:count=>1, :running_pipelines=>[:main], :non_running_pipelines=>[]}\n{\n      "level" => "INFO",\n    "body" => "variable server value is connector",\n       "time" => "2021-05-14T14:52:36Z"\n}\n{\n      "level" => "INFO",\n    "body" => "variable server value is connector",\n       "time" => "2021-08-01T09:39:44Z"\n}\n{\n      "level" => "INFO",\n    "body" => "initializing the bootup",\n       "time" => "2021-02-13T13:17:11Z"\n}\n{\n      "level" => "ERROR",\n    "body" => "cannot find the requested resource",\n       "time" => "2021-06-21T22:23:12Z"\n}\n{\n      "level" => "DEBUG",\n    "body" => "initializing checksum",\n       "time" => "2021-03-26T01:22:56Z"\n}\n')),(0,r.kt)("h3",{id:"using-multiple-pattern"},"Using Multiple Pattern"),(0,r.kt)("p",null,"To see how Grok handles issues with our filter pattern we can add some data to our log that does not fit the format:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"/opt/logstash/grok_test")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"2021-08-01T09:39:44Z INFO variable server value is connector\n2021-06-21T22:23:12Z ERROR cannot find the requested resource\n2021-05-14T14:52:36Z INFO variable server value is connector\n2021-03-26T01:22:56Z DEBUG initializing checksum\n2021-02-13T13:17:11Z INFO initializing the bootup\n116.112.4.48 GET /wp-admin/index.php\n")),(0,r.kt)("p",null,"First delete the old indexed data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XDELETE -u elastic:changeme http://localhost:9200/grok_test\n")),(0,r.kt)("p",null,"And re-run Logtstash with the dame configuration as before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n          "time" => "2021-05-14T14:52:36Z",\n      "level" => "INFO",\n    "body" => "variable server value is connector"\n}\n{\n          "time" => "2021-06-21T22:23:12Z",\n      "level" => "ERROR",\n    "body" => "cannot find the requested resource"\n}\n{\n    "tags" => [\n        [0] "_grokparsefailure"\n    ]\n}\n{\n          "time" => "2021-08-01T09:39:44Z",\n      "level" => "INFO",\n    "body" => "variable server value is connector"\n}\n{\n          "time" => "2021-02-13T13:17:11Z",\n      "level" => "INFO",\n    "body" => "initializing the bootup"\n}\n{\n          "time" => "2021-03-26T01:22:56Z",\n      "level" => "DEBUG",\n    "body" => "initializing checksum"\n}\n')),(0,r.kt)("p",null,"We now have a 6th entry that only contains a parse error, as expected. To fix this issue we can add a secondary pattern to our Grok filter. This filter will be used if the first one fails to parse a line in our data:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"/opt/logstash/pipeline/logstash.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'input {\n  file {\n    path => "/usr/share/logstash/grok_test"\n    start_position => "beginning"\n    sincedb_path => "/dev/null"\n  }\n}\nfilter {\n  grok {\n    match => { "message" => [\n          \'%{TIMESTAMP_ISO8601:time} %{LOGLEVEL:level} %{GREEDYDATA:body}\',\n          \'%{IP:clientIP} %{WORD:httpMethod} %{URIPATH:url}\'\n        ] }\n    }\n    mutate {\n      remove_field => ["message", "@timestamp", "path", "host", "@version"]\n    }\n  }\noutput {\n   elasticsearch {\n     hosts => "http://localhost:9200"\n     index => "grok_test"\n  }\n\nstdout {}\n\n}\n')),(0,r.kt)("p",null,"First delete the old indexed data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"curl -XDELETE -u elastic:changeme http://localhost:9200/grok_test\n")),(0,r.kt)("p",null,"And re-run Logtstash with the same configuration as before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "level" => "INFO",\n     "time" => "2021-05-14T14:52:36Z",\n     "body" => "variable server value is connector"\n}\n{\n    "level" => "ERROR",\n     "time" => "2021-06-21T22:23:12Z",\n     "body" => "cannot find the requested resource"\n}\n{\n           "url" => "/wp-admin/index.php",\n      "clientIP" => "116.112.4.48",\n    "httpMethod" => "GET"\n}\n{\n    "level" => "INFO",\n     "time" => "2021-08-01T09:39:44Z",\n     "body" => "variable server value is connector"\n}\n{\n    "level" => "INFO",\n     "time" => "2021-02-13T13:17:11Z",\n     "body" => "initializing the bootup"\n}\n{\n    "level" => "DEBUG",\n     "time" => "2021-03-26T01:22:56Z",\n     "body" => "initializing checksum"\n}\n')),(0,r.kt)("p",null,"The last line failed the first pattern and was then ingested using the second option we gave Logstash. It works!"))}c.isMDXComponent=!0},4058:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Logstash_Grok_Filter_01-e43da1ce8448e9925369a0016d259110.png"},80794:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-2a2fa147cd26f24fb2448fd8aa06f41c.jpg"}}]);