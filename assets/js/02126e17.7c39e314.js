"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[47015],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r=a.createContext({}),p=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(r.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,g=m["".concat(r,".").concat(u)]||m[u]||d[u]||i;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=m;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},13309:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(87462),o=(t(67294),t(3905));const i={sidebar_position:9090,slug:"2020-11-19",title:"Ansible Playbooks",authors:"mpolinowski",tags:["LINUX","NGINX","Ansible"]},s=void 0,l={unversionedId:"DevOps/Ansible/2020-11-19--ansible-playbooks/index",id:"DevOps/Ansible/2020-11-19--ansible-playbooks/index",title:"Ansible Playbooks",description:"Shenzhen, China",source:"@site/docs/DevOps/Ansible/2020-11-19--ansible-playbooks/index.md",sourceDirName:"DevOps/Ansible/2020-11-19--ansible-playbooks",slug:"/DevOps/Ansible/2020-11-19--ansible-playbooks/2020-11-19",permalink:"/docs/DevOps/Ansible/2020-11-19--ansible-playbooks/2020-11-19",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Ansible/2020-11-19--ansible-playbooks/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Ansible",permalink:"/docs/tags/ansible"}],version:"current",sidebarPosition:9090,frontMatter:{sidebar_position:9090,slug:"2020-11-19",title:"Ansible Playbooks",authors:"mpolinowski",tags:["LINUX","NGINX","Ansible"]},sidebar:"tutorialSidebar",previous:{title:"Ansible Copy Cheat Sheet",permalink:"/docs/DevOps/Ansible/2020-11-20--ansible-copy-cheat-sheet/2020-11-20"},next:{title:"Setting up a Ansible on Debian Buster",permalink:"/docs/DevOps/Ansible/2020-11-18--ansible-on-debian-buster/2020-11-18"}},r={},p=[{value:"Sections",id:"sections",level:2},{value:"Loops",id:"loops",level:3},{value:"Handler",id:"handler",level:2},{value:"Copy Loop",id:"copy-loop",level:3}],c={toc:p};function d(e){let{components:n,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Shenzhen, China",src:t(5372).Z,width:"1500",height:"520"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#sections"},"Sections"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#loops"},"Loops")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#handler"},"Handler"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#copy-loop"},"Copy Loop"))))),(0,o.kt)("h2",{id:"sections"},"Sections"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Mandatory Sections")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Target Section => Specify host group"),(0,o.kt)("li",{parentName:"ul"},"Variable Section => List all variables used by the playbook"),(0,o.kt)("li",{parentName:"ul"},"Task Section => List all tasks that need to be performed on hosts")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Optional Sections")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Handler Section"),(0,o.kt)("li",{parentName:"ul"},"Loops"),(0,o.kt)("li",{parentName:"ul"},"Conditionals"),(0,o.kt)("li",{parentName:"ul"},"Until"),(0,o.kt)("li",{parentName:"ul"},"Notify")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nano test.yml\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'---\n- hosts: test\n\n  vars:\n    package1 : "nginx"\n    package2 : "wget"\n\n  tasks:\n  \n    - name: Installing NGINX\n      apt: pkg=nginx state=installed update_cache=true\n      become: true\n\n    - name: Installing WGET\n      apt: pkg={{ package2 }} state=installed update_cache=true\n      become: true\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Check ",(0,o.kt)("inlineCode",{parentName:"p"},"ansible-doc apt")," for details on what arguments can be used.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The value of ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," can be one of: ",(0,o.kt)("inlineCode",{parentName:"p"},"absent"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"build-dep"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"fixed"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"latest"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"present"))),(0,o.kt)("p",null,"In the example above I am installing ",(0,o.kt)("inlineCode",{parentName:"p"},"wget")," from the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"package2")," as defined above. THis does not make a difference here, but will become important when you start writing playbooks for different host systems where the same package is listed under a different name. We can than use a JinJa script to determine the host system from the Ansible facts and set the variable ",(0,o.kt)("inlineCode",{parentName:"p"},"package2")," for example to ",(0,o.kt)("inlineCode",{parentName:"p"},"httpd")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"apache2")," to install Apache on a CentOS and Debian system with the same playbook."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"become: true")," directive means that the package is installed with ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo")," - since I am locked in with my root account this is not necessary. But I will leave it in here. Going to need this in the future."),(0,o.kt)("p",null,"I can run this playbook with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook test.yml\n")),(0,o.kt)("p",null,"Before I used the copy command to copy a file from my host to the remote system. We can now re-write this ad hoc command as a task inside the playbook:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'---\n- hosts: test\n\n  vars:\n    package1 : "nginx"\n    package2 : "wget"\n\n  tasks:\n    - name: Installing NGINX\n      apt: pkg={{ package1 }} state=present update_cache=true\n      become: true\n\n    - name: Installing WGET\n      apt: pkg={{ package2 }} state=present update_cache=true\n      become: true\n\n    - name: Copying test config file\n      copy: src=/opt/ansible/playbooks dest=/opt/test2\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook test.yml\n\n\nPLAY [test] *********************************************************\n\nTASK [Gathering Facts] **********************************************\nok: [192.168.2.111]\n\nTASK [Installing NGINX] *********************************************\nchanged: [192.168.2.111]\n\nTASK [Installing WGET] **********************************************\nok: [192.168.2.111]\n\nTASK [Copying test config file] *************************************\nchanged: [192.168.2.111]\n\nPLAY RECAP **********************************************************\n2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n")),(0,o.kt)("h3",{id:"loops"},"Loops"),(0,o.kt)("p",null,"We can also combine the two install steps using a loop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"---\n- hosts: test\n  tasks:\n\n    - name: Installing NGINX, wget\n      apt: name={{ item }} state=present update_cache=true\n      with_items:\n        - nginx\n        - wget\n\n    - name: Copying test config file\n      copy: src=/opt/ansible/playbooks dest=/opt/test2\n")),(0,o.kt)("h2",{id:"handler"},"Handler"),(0,o.kt)("p",null,"I now want to stop the NGINX service after the installation, copy over configuration files and than instruct a handler to restart the service - for this I created a new file ",(0,o.kt)("inlineCode",{parentName:"p"},"nginx-ingress.yml")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"/opt/ansible/playbooks"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The NGINX configuration files can be found here: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/gatsby-multilang-template"},"gatsby-multilang-template"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"---\n- hosts: test\n  tasks:\n    - name: Aptitude Update\n      apt: update_cache=yes\n\n    - name: Installing NGINX\n      apt: pkg=nginx state=present update_cache=no\n\n    - name: Stop NGINX Service\n      service: name=nginx state=stopped \n      \n    - name: Copying nginx.conf\n      copy:\n        src=/opt/test-static/nginx/nginx.conf\n        dest=/etc/nginx/nginx.conf\n      notify:\n        - Start NGINX\n\n    - name: Copy the entire content of the conf.d directory\n      copy:\n        src=/opt/test-static/nginx/conf.d/\n        dest=/etc/nginx/conf.d\n      notify:\n        - Start NGINX\n\n    - name: Copy only the applicable certificates from the ssl directory\n      copy:\n        src=/opt/test-static/nginx/ssl/{{item}}\n        dest=/etc/nginx/ssl/\n      with_items:\n        ['dhparam.pem','nginx-selfsigned.crt','nginx-selfsigned.key']\n      notify:\n        - Start NGINX\n\n  handlers:\n    - name: Start NGINX\n      service: name=nginx state=started\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook nginx-ingress.yml\n\n\nPLAY [test] ************************************************************\nTASK [Gathering Facts] *************************************************\nok: [192.168.2.111]\n\nTASK [Installing NGINX] ************************************************\nchanged: [192.168.2.111]\n\nTASK [Stop NGINX Service] **********************************************\nchanged: [192.168.2.111]\n\nTASK [Copying nginx.conf] **********************************************\nchanged: [192.168.2.111]\n\nTASK [Copy the entire content of the conf.d directory] *****************\nchanged: [192.168.2.111]\n\nTASK [Copy only the applicable certificates from the ssl directory] ************************************************************************\nchanged: [192.168.2.111] => (item=dhparam.pem)\nchanged: [192.168.2.111] => (item=nginx-selfsigned.crt)\nchanged: [192.168.2.111] => (item=nginx-selfsigned.key)\n\nRUNNING HANDLER [Start NGINX] ******************************************\nchanged: [192.168.2.111]\n\nPLAY RECAP ***************************************************************\n192.168.2.111: ok=1    changed=8    unreachable=0    failed=0    skipped=0\n")),(0,o.kt)("h3",{id:"copy-loop"},"Copy Loop"),(0,o.kt)("p",null,"Combining the Copy commands using an Ansible loop."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"I also had to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"nginx")," user required by the NGINX configuration file that I am using.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"---\n- hosts: test\n  tasks:\n    - name: Aptitude Update\n      apt: update_cache=yes\n\n    - name: Add NGINX user\n      user:\n        name: nginx\n        comment: NGINX User\n        group: nginx\n        shell: /bin/sh\n        home: /home/nginx\n\n    - name: Installing NGINX\n      apt: pkg=nginx state=present update_cache=no\n\n    - name: Stop NGINX Service\n      service: name=nginx state=stopped \n        \n    - name: Copy the NGINX Configuration\n      copy:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dest }}\"\n        mode: \"{{item.mode}}\"\n      with_items:\n        - { src: '/opt/test-static/nginx/nginx.conf',dest: '/etc/nginx/nginx.conf', mode: '0664'}\n        - { src: '/opt/test-static/nginx/conf.d/',dest: '/etc/nginx/conf.d', mode: '0664'}\n        - { src: '/opt/test-static/nginx/ssl/',dest: '/etc/nginx/ssl', mode: '0664'}\n      notify:\n        - Start NGINX    \n\n  handlers:\n    - name: Start NGINX\n      service: name=nginx state=restarted\n      # notify:\n      #   - Verify that NGINX did not crash\n\n    # - name: Verify that NGINX did not crash\n    #   shell: service nginx status\n    #   register: result\n    #   until: result.stdout.find(\"active (running)\") != -1\n    #   retries: 5\n    #   delay: 5\n")))}d.isMDXComponent=!0},5372:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-2215e4912b7f3d1beed1d8b83bac94aa.jpg"}}]);