"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[75945],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||l;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67753:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={sidebar_position:8080,slug:"2021-07-29",title:"Setting up Certbot Auto-renewal for NGINX (Maintenance Mode)",authors:"mpolinowski",tags:["NGINX","Linux"]},i=void 0,o={unversionedId:"DevOps/NGINX/2021-07-29--certbot-nginx-autorenewal/index",id:"DevOps/NGINX/2021-07-29--certbot-nginx-autorenewal/index",title:"Setting up Certbot Auto-renewal for NGINX (Maintenance Mode)",description:"Shenzhen, China",source:"@site/docs/DevOps/NGINX/2021-07-29--certbot-nginx-autorenewal/index.md",sourceDirName:"DevOps/NGINX/2021-07-29--certbot-nginx-autorenewal",slug:"/DevOps/NGINX/2021-07-29--certbot-nginx-autorenewal/2021-07-29",permalink:"/docs/DevOps/NGINX/2021-07-29--certbot-nginx-autorenewal/2021-07-29",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/NGINX/2021-07-29--certbot-nginx-autorenewal/index.md",tags:[{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8080,frontMatter:{sidebar_position:8080,slug:"2021-07-29",title:"Setting up Certbot Auto-renewal for NGINX (Maintenance Mode)",authors:"mpolinowski",tags:["NGINX","Linux"]},sidebar:"tutorialSidebar",previous:{title:"NGINX Redirect based on User Agent",permalink:"/docs/DevOps/NGINX/2021-02-23-nginx-agent-redirect/2021-02-23"},next:{title:"NGINX Docker Ingress for your Gatsby Build",permalink:"/docs/DevOps/NGINX/2021-02-22-nginx-docker-ingress/2021-02-22"}},c={},s=[{value:"Download the Let\u2019s Encrypt Client",id:"download-the-lets-encrypt-client",level:2},{value:"Set Up NGINX",id:"set-up-nginx",level:2},{value:"Obtain the SSL/TLS Certificate",id:"obtain-the-ssltls-certificate",level:2},{value:"Check Certificate",id:"check-certificate",level:3},{value:"Manual Update Certificate",id:"manual-update-certificate",level:3},{value:"Automatically Renew Let\u2019s Encrypt Certificates",id:"automatically-renew-lets-encrypt-certificates",level:2},{value:"Remove a Certificate",id:"remove-a-certificate",level:2},{value:"Maintenance Mode",id:"maintenance-mode",level:2},{value:"Combine all Domains in a Single Certificate",id:"combine-all-domains-in-a-single-certificate",level:2},{value:"Error Messages",id:"error-messages",level:2},{value:"Failed to parse PID from file",id:"failed-to-parse-pid-from-file",level:3}],p={toc:s};function m(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shenzhen, China",src:n(76712).Z,width:"1500",height:"424"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#download-the-lets-encrypt-client"},"Download the Let\u2019s Encrypt Client")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#set-up-nginx"},"Set Up NGINX")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#obtain-the-ssltls-certificate"},"Obtain the SSL/TLS Certificate"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#check-certificate"},"Check Certificate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#manual-update-certificate"},"Manual Update Certificate")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#automatically-renew-lets-encrypt-certificates"},"Automatically Renew Let\u2019s Encrypt Certificates")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#remove-a-certificate"},"Remove a Certificate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#maintenance-mode"},"Maintenance Mode")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#combine-all-domains-in-a-single-certificate"},"Combine all Domains in a Single Certificate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#error-messages"},"Error Messages"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#failed-to-parse-pid-from-file"},"Failed to parse PID from file"))))),(0,r.kt)("h2",{id:"download-the-lets-encrypt-client"},"Download the Let\u2019s Encrypt Client"),(0,r.kt)("p",null,"First, download the Let\u2019s Encrypt client, certbot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt update\napt install certbot\napt install python3-certbot-nginx\n")),(0,r.kt)("h2",{id:"set-up-nginx"},"Set Up NGINX"),(0,r.kt)("p",null,"Specify your domain name with the ",(0,r.kt)("inlineCode",{parentName:"p"},"server_name")," directive:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    root /var/www/html;\n    server_name example.com www.example.com;\n}\n")),(0,r.kt)("p",null,"Save the file, then run this command to verify the syntax of your configuration and restart NGINX:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nginx -t && nginx -s reload\n")),(0,r.kt)("h2",{id:"obtain-the-ssltls-certificate"},"Obtain the SSL/TLS Certificate"),(0,r.kt)("p",null,"Run the following command to generate certificates with the ",(0,r.kt)("strong",{parentName:"p"},"NGINX plug\u2011in"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"certbot --nginx -d example.com -d www.example.com\n")),(0,r.kt)("h3",{id:"check-certificate"},"Check Certificate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"certbot certificates\n")),(0,r.kt)("h3",{id:"manual-update-certificate"},"Manual Update Certificate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"certbot --nginx\n")),(0,r.kt)("p",null,"Respond to prompts from certbot to configure your HTTPS settings, which involves entering your email address and agreeing to the Let\u2019s Encrypt terms of service."),(0,r.kt)("h2",{id:"automatically-renew-lets-encrypt-certificates"},"Automatically Renew Let\u2019s Encrypt Certificates"),(0,r.kt)("p",null,"Here we add a ",(0,r.kt)("inlineCode",{parentName:"p"},"cron job")," to an existing ",(0,r.kt)("strong",{parentName:"p"},"Crontab")," file to do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"crontab -e\n")),(0,r.kt)("p",null,"Add the certbot command to run daily. In this example, we run the command every day at noon. The command checks to see if the certificate on the server will expire within the next 30 days, and renews it if so. The ",(0,r.kt)("inlineCode",{parentName:"p"},"--quiet")," directive tells certbot not to generate output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"0 12 * * * /usr/bin/certbot renew --quiet\n")),(0,r.kt)("p",null,"Save and close the file. All installed certificates will be automatically renewed and reloaded."),(0,r.kt)("h2",{id:"remove-a-certificate"},"Remove a Certificate"),(0,r.kt)("p",null,"Check the certificate name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"certbot certificates\n")),(0,r.kt)("p",null,"and run the delete command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"certbot delete --cert-name example.com\n")),(0,r.kt)("h2",{id:"maintenance-mode"},"Maintenance Mode"),(0,r.kt)("p",null,"Adding a maintenance mode to your web site:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"location / {\n      error_page 403 = @deny;\n       # allow 204.79.197.200;\n       allow 204.79.197.200;\n       deny all;\n       proxy_pass http://127.0.0.1:6081;\n}\n")),(0,r.kt)("p",null,"Send all IP's to ",(0,r.kt)("inlineCode",{parentName:"p"},"@deny")," that aren't whitelisted. Whitelisted IP's are forwarded regularly to your service frontend."),(0,r.kt)("p",null,"Options for the ",(0,r.kt)("inlineCode",{parentName:"p"},"@deny")," block:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Redirect")),(0,r.kt)("p",null,"All denied Traffic is redirected to a different domain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"location @deny {\n    return 301 http://example.com/comingsoon;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Send String")),(0,r.kt)("p",null,"All denied Traffic is send a string containing the WAN IP address of the accessing client - very convenient to copy the address and add to your whitelist:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"location @deny {\n        default_type text/html;\n        return 503 '$REMOTE_ADDR :: Webshop Maintenance';\n    }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return HTML Page")),(0,r.kt)("p",null,"Return a styled Maintenance HTML page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"location @deny {\n        # Return /usr/share/nginx/html/maintenance.html\n        rewrite ^(.*)$ /maintenance.html break;\n    }\n")),(0,r.kt)("h2",{id:"combine-all-domains-in-a-single-certificate"},"Combine all Domains in a Single Certificate"),(0,r.kt)("p",null,"Delete existing certs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"certbot delete --cert-name one.example.com --cert-name one.example.de --cert-name two.example.com --cert-name two.example.de\n")),(0,r.kt)("p",null,"E.g. for adding redirects (Apache this time):"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"nano /etc/apache2/sites-available/two.example.de.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"<VirtualHost \\*>\nServerName two.example.de\nRedirect 301 / https://two.example.com/\n</VirtualHost>\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"nano /etc/apache2/sites-available/one.example.de.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"<VirtualHost \\*>\nServerName one.example.de\nRedirect 301 / https://one.example.com/\n</VirtualHost>\n")),(0,r.kt)("p",null,"Enable new sites:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"a2ensite one.example.de.conf\na2ensite two.example.de.conf\nsystemctl reload apache2\n")),(0,r.kt)("p",null,"And run Certbot to add the certificate:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"certbot --installer apache -d one.example.com -d one.example.de -d two.example.com -d two.example.de\n")),(0,r.kt)("h2",{id:"error-messages"},"Error Messages"),(0,r.kt)("h3",{id:"failed-to-parse-pid-from-file"},"Failed to parse PID from file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Active: active (running) since Thu 2022-03-24 07:35:10 CET; 26min ago\nsystemd[1]: Starting A high performance web server and a reverse proxy server...\nsystemd[1]: nginx.service: Failed to parse PID from file /run/nginx.pid: Invalid argument\nsystemd[1]: Started A high performance web server and a reverse proxy server.\n")),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecStartPost=/bin/sleep 1")," to NGINX service file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /lib/systemd/system/nginx.service\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"[Unit]\nDescription=A high performance web server and a reverse proxy server\nDocumentation=man:nginx(8)\nAfter=network.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/run/nginx.pid\nExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'\nExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'\nExecStartPost=/bin/sleep 1\nExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload\nExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid\nTimeoutStopSec=5\nKillMode=mixed\n\n[Install]\nWantedBy=multi-user.target\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl daemon-reload\nservice nginx restart\n")))}m.isMDXComponent=!0},76712:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-e97ca676c327a4300748b65720aff010.jpg"}}]);