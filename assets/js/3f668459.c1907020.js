"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[37880],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=a.createContext({}),u=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(r.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,i=e.originalType,r=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(t),d=l,h=m["".concat(r,".").concat(d)]||m[d]||p[d]||i;return t?a.createElement(h,s(s({ref:n},c),{},{components:t})):a.createElement(h,s({ref:n},c))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=t.length,s=new Array(i);s[0]=m;var o={};for(var r in n)hasOwnProperty.call(n,r)&&(o[r]=n[r]);o.originalType=e,o.mdxType="string"==typeof e?e:l,s[1]=o;for(var u=2;u<i;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3728:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=t(87462),l=(t(67294),t(3905));const i={sidebar_position:9030,slug:"2020-06-21",title:"Salt Beacons Module",authors:"mpolinowski",tags:["LINUX","Salt"]},s=void 0,o={unversionedId:"DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/index",id:"DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/index",title:"Salt Beacons Module",description:"Mon Kok, Hong Kong",source:"@site/docs/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/index.md",sourceDirName:"DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps",slug:"/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/2020-06-21",permalink:"/docs/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/2020-06-21",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9030,frontMatter:{sidebar_position:9030,slug:"2020-06-21",title:"Salt Beacons Module",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"NGINX Salt State",permalink:"/docs/DevOps/Salt/2020-06-22--salt-nginx-state/2020-06-22"},next:{title:"Salt Reactor and System Events",permalink:"/docs/DevOps/Salt/2020-06-20--salt-reactor-events/2020-06-20"}},r={},u=[{value:"inotify",id:"inotify",level:2},{value:"Create Watched File",id:"create-watched-file",level:3},{value:"Add Beacon Configs to Minions",id:"add-beacon-configs-to-minions",level:3},{value:"Add Beacon Configs to Pillars",id:"add-beacon-configs-to-pillars",level:3},{value:"Notify Reactor",id:"notify-reactor",level:3},{value:"Debugging Pyinotify",id:"debugging-pyinotify",level:2},{value:"Debugging the Reactor",id:"debugging-the-reactor",level:2}],c={toc:u};function p(e){let{components:n,...i}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Mon Kok, Hong Kong",src:t(81447).Z,width:"1500",height:"736"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#inotify"},"inotify"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#create-watched-file"},"Create Watched File")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#add-beacon-configs-to-minions"},"Add Beacon Configs to Minions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#add-beacon-configs-to-pillars"},"Add Beacon Configs to Pillars")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#notify-reactor"},"Notify Reactor")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#debugging-pyinotify"},"Debugging Pyinotify")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#debugging-the-reactor"},"Debugging the Reactor"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Salt beacons are an event generation mechanism. Beacons leverage the Salt reactor system to make changes when beacon events occur.")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/topics/beacons/index.html"},"Beacons")," let you use the Salt event system to monitor non-Salt processes. The beacon system allows the minion to hook into a variety of system processes and continually monitor these processes. When monitored activity occurs in a system process, an event is sent on the Salt event bus that can be used to trigger a reactor."),(0,l.kt)("p",null,"Salt beacons can currently monitor and send Salt events for many system activities, including:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"file system changes")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"system load")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"service status")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"shell activity, such as user login")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"network and disk usage"))),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/beacons/all/index.html#all-salt-beacons"},"beacon modules")," for a current list."),(0,l.kt)("p",null,"Beacons are typically enabled by placing a beacons: top level block in ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/minion")," or any file in ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/minion.d/")," such as ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/minion.d/beacons.conf")," or add it to pillars for that minion: They can be used with:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"beacons.list")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"beacons.enable")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"beacons.disable"))),(0,l.kt)("h2",{id:"inotify"},"inotify"),(0,l.kt)("h3",{id:"create-watched-file"},"Create Watched File"),(0,l.kt)("p",null,"We have created an SLS file that creates an Apache welcome page for us. We can now use a Beacon to keep an eye on that file and trigger our Reactor in case the file was changed:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"/srv/salt/apache/welcome.sls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"# Adding a blank front page\n{% set name = salt.pillar.get('name') %}\n\ncheck_pillar_values:\n  test.check_pillar:\n    - present:\n      - name\n    - failhard: True\n\nwelcome_page:\n  file.managed:\n    - name: /var/www/html/index.html\n    - contents: |\n        <!doctype html>\n        <body>\n            <h1>{{ name }}.</h1>\n        </body>\n")),(0,l.kt)("h3",{id:"add-beacon-configs-to-minions"},"Add Beacon Configs to Minions"),(0,l.kt)("p",null,"On the Salt minion, add the following configuration to ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/minion.d/beacons.conf"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"beacons:\n  inotify:\n    - files:\n        /var/www/html/index.html:\n          mask:\n            - modify     \n    - disable_during_state_run: True\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Make sure that iNotify is installed on your minions: ",(0,l.kt)("inlineCode",{parentName:"p"},"salt debianMinions pkg.install python-pyinotify")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"salt redhatMinions pkg.install python-inotify"),"! You can debug Pillars on your Minion with ",(0,l.kt)("inlineCode",{parentName:"p"},"salt-call -l debug saltutil.pillar_refresh")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"salt-call -l debug pillar.items"))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"This did not work for me - see how to install ",(0,l.kt)("inlineCode",{parentName:"strong"},"pyinotify")," on Ubuntu 20.04 and debug ",(0,l.kt)("a",{parentName:"strong",href:"#debugging-pyinotify"},"it below"))),(0,l.kt)("p",null,"Save the configuration file and restart the minion service. The beacon is now set up to notify salt upon modifications made to the file."),(0,l.kt)("p",null,"The Beacon can now be enabled by:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"salt ubuntuAsus beacons.enable\n\nubuntuAsus:\n    ----------\n    comment:\n        Enabled beacons on minion.\n    result:\n        True\n\n\nsalt ubuntuAsus beacons.list\n\nubuntuAsus:\n    beacons:\n      enabled: true\n      inotify:\n      - files:\n          /var/www/html/index.html:\n            mask:\n            - modify\n      - disable_during_state_run: true\n")),(0,l.kt)("p",null,"You can test the beacon by running ",(0,l.kt)("inlineCode",{parentName:"p"},"nano /var/www/html/index.html")," on your Minion and changing the file while having ",(0,l.kt)("inlineCode",{parentName:"p"},"salt-run state.event pretty=true")," open on your master:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'salt/beacon/ubuntuAsus/inotify//var/www/html/index.html {\n    "_stamp": "2020-08-08T18:00:42.793635",\n    "change": "IN_MODIFY",\n    "id": "ubuntuAsus",\n    "path": "/var/www/html/index.html"\n}\n')),(0,l.kt)("h3",{id:"add-beacon-configs-to-pillars"},"Add Beacon Configs to Pillars"),(0,l.kt)("p",null,"Alternatively, you can add the monitor task to ",(0,l.kt)("inlineCode",{parentName:"p"},"nano /srv/pillar/monitor_welcome.sls"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"beacons:\n  inotify:\n    - files:\n        /var/www/html/index.html:\n          mask:\n            - modify     \n    - disable_during_state_run: True\n")),(0,l.kt)("p",null,"Now share the Pillar function with affected Minions with the Top file ",(0,l.kt)("inlineCode",{parentName:"p"},"nano /srv/pillar/top.sls"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"base:\n  '*':\n    - name\n    - mine\n  ubuntuAsus:\n    - monitor_welcome\n")),(0,l.kt)("p",null,"And push the update to your Minions with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"salt ubuntuAsus saltutil.refresh_pillar\n\nsalt ubuntuAsus pillar.get beacons\n\nubuntuAsus:\n    ----------\n    inotify:\n        ----------\n        /var/www/html/index.html:\n            ----------\n            mask:\n                - close_write\n        disable_during_state_run:\n            True\n")),(0,l.kt)("p",null,"The Beacon can now be enabled by:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"salt ubuntuAsus beacons.enable\n\nsalt ubuntuAsus beacons.list\n")),(0,l.kt)("p",null,"You can test the beacon by running ",(0,l.kt)("inlineCode",{parentName:"p"},"nano /var/www/html/index.html")," on your Minion and changing the file while having ",(0,l.kt)("inlineCode",{parentName:"p"},"salt-run state.event pretty=true")," open on your master:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'salt/beacon/ubuntuAsus/inotify//var/www/html/index.html {\n    "_stamp": "2020-08-08T18:00:42.793635",\n    "change": "IN_MODIFY",\n    "id": "ubuntuAsus",\n    "path": "/var/www/html/index.html"\n}\n')),(0,l.kt)("h3",{id:"notify-reactor"},"Notify Reactor"),(0,l.kt)("p",null,"Now we need to react to the change notification by changing the file back to the default state:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/salt/master.d/local.conf\n")),(0,l.kt)("p",null,"Add the ",(0,l.kt)("inlineCode",{parentName:"p"},"salt/beacon/*/inotify//var/www/html/index.html")," event to Reactor and have it start a script that fixes the issue:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"reactor:\n  - 'instar/custom/*':\n    - /srv/reactor/highstate.sls\n  - 'instar/deploy/testapp':\n    - /srv/reactor/deploy_testapp.sls\n  - 'salt/beacon/*/inotify//var/www/html/index.html':\n    - /srv/reactor/fix_welcome.sls\n")),(0,l.kt)("p",null,"Restart the master ",(0,l.kt)("inlineCode",{parentName:"p"},"systemctl restart salt-master")," and create the ",(0,l.kt)("inlineCode",{parentName:"p"},"nano /srv/reactor/fix_welcome.sls")," script:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"fix_welcome:\n  cmd.state.sls:\n    - tgt: {{ data.id }}\n    - arg:\n      - apache.welcome\n")),(0,l.kt)("p",null,"Now go and change the ",(0,l.kt)("inlineCode",{parentName:"p"},"/var/www/html/index.html")," file again. Reactor should automatically fire and change it back to the default state:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'salt-run state.event pretty=true                                                                                \nsalt/auth       {\n    "_stamp": "2020-08-08T18:23:40.820210",\n    "act": "accept",\n    "id": "ubuntuAsus",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nsalt/beacon/ubuntuAsus/inotify//var/www/html/index.html {\n    "_stamp": "2020-08-08T18:23:40.832944",\n    "change": "IN_MODIFY",\n    "id": "ubuntuAsus",\n    "path": "/var/www/html/index.html"\n}\n20200808182343071200    {\n    "_stamp": "2020-08-08T18:23:43.072071",\n    "minions": [\n        "ubuntuAsus"\n    ]\n}\nsalt/job/20200808182343071200/new       {\n    "_stamp": "2020-08-08T18:23:43.072389",\n    "arg": [\n        "apache.welcome"\n    ],\n    "fun": "state.sls",\n    "jid": "20200808182343071200",\n    "minions": [\n        "ubuntuAsus"\n    ],\n    "missing": [],\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob",\n    "user": "root"\n}\nsalt/auth       {\n    "_stamp": "2020-08-08T18:23:43.090909",\n    "act": "accept",\n    "id": "ubuntuMaster",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nsalt/auth       {\n    "_stamp": "2020-08-08T18:23:43.095612",\n    "act": "accept",\n    "id": "ubuntuAsus",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-08T18:23:43.217756"\n}\nsalt/job/20200808182343071200/ret/ubuntuAsus    {\n    "_stamp": "2020-08-08T18:23:43.466837",\n    "cmd": "_return",\n    "fun": "state.sls",\n    "fun_args": [\n        "apache.welcome"\n    ],\n    "id": "ubuntuAsus",\n    "jid": "20200808182343071200",\n    "out": "highstate",\n    "retcode": 0,\n    "return": {\n        "file_|-welcome_page_|-/var/www/html/index.html_|-managed": {\n            "__id__": "welcome_page",\n            "__run_num__": 1,\n            "__sls__": "apache.welcome",\n            "changes": {\n                "diff": "--- \\n+++ \\n@@ -1,4 +1,4 @@\\n <!doctype html>\\n <body>\\n-    <h1>Centos Rocks!</h1>\\n+    <h1>Ubuntu Rocks.</h1>\\n </body>\\n"\n            },\n            "comment": "File /var/www/html/index.html updated",\n            "duration": 15.031,\n            "name": "/var/www/html/index.html",\n            "result": true,\n            "start_time": "18:23:43.433832"\n        },\n        "test_|-check_pillar_values_|-check_pillar_values_|-check_pillar": {\n            "__id__": "check_pillar_values",\n            "__run_num__": 0,\n            "__sls__": "apache.welcome",\n            "changes": {},\n            "comment": "",\n            "duration": 1.504,\n            "name": "check_pillar_values",\n            "result": true,\n            "start_time": "18:23:43.429323"\n        }\n    },\n    "success": true\n}\nsalt/beacon/ubuntuAsus/inotify//var/www/html/index.html {\n    "_stamp": "2020-08-08T18:23:43.797938",\n    "change": "IN_IGNORED",\n    "id": "ubuntuAsus",\n    "path": "/var/www/html/index.html"\n}\n20200808182343808522    {\n    "_stamp": "2020-08-08T18:23:43.808797",\n    "minions": [\n        "ubuntuAsus"\n    ]\n}\nsalt/job/20200808182343808522/new       {\n    "_stamp": "2020-08-08T18:23:43.809341",\n    "arg": [\n        "apache.welcome"\n    ],\n    "fun": "state.sls",\n    "jid": "20200808182343808522",\n    "minions": [\n        "ubuntuAsus"\n    ],\n    "missing": [],\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob",\n    "user": "root"\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-08T18:23:43.933767"\n}\nsalt/job/20200808182343808522/ret/ubuntuAsus    {\n    "_stamp": "2020-08-08T18:23:44.107148",\n    "cmd": "_return",\n    "fun": "state.sls",\n    "fun_args": [\n        "apache.welcome"\n    ],\n    "id": "ubuntuAsus",\n    "jid": "20200808182343808522",\n    "out": "highstate",\n    "retcode": 0,\n    "return": {\n        "file_|-welcome_page_|-/var/www/html/index.html_|-managed": {\n            "__id__": "welcome_page",\n            "__run_num__": 1,\n            "__sls__": "apache.welcome",\n            "changes": {},\n            "comment": "File /var/www/html/index.html is in the correct state",\n            "duration": 12.866,\n            "name": "/var/www/html/index.html",\n            "result": true,\n            "start_time": "18:23:44.081579"\n        },\n        "test_|-check_pillar_values_|-check_pillar_values_|-check_pillar": {\n            "__id__": "check_pillar_values",\n            "__run_num__": 0,\n            "__sls__": "apache.welcome",\n            "changes": {},\n            "comment": "",\n            "duration": 1.119,\n            "name": "check_pillar_values",\n            "result": true,\n            "start_time": "18:23:44.078418"\n        }\n    },\n    "success": true\n}\n')),(0,l.kt)("h2",{id:"debugging-pyinotify"},"Debugging Pyinotify"),(0,l.kt)("p",null,"File system monitoring through inotify can be interfaced through Python using pyinotify. This guide will demonstrate how to use a Python script to monitor a directory then explore practical uses by incorporating async modules or running additional threads."),(0,l.kt)("p",null,"Start by installing ",(0,l.kt)("inlineCode",{parentName:"p"},"pip3")," and use it to install ",(0,l.kt)("inlineCode",{parentName:"p"},"pyinotify"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install python3-pip\n\npip3 install pyinotify\n")),(0,l.kt)("p",null,"Take ",(0,l.kt)("a",{parentName:"p",href:"https://www.linode.com/docs/development/monitor-filesystem-events-with-pyinotify/"},"this script")," and copy it to your home directory:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"notify_me.py")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import os\nimport pyinotify\n\n\nclass EventProcessor(pyinotify.ProcessEvent):\n    _methods = ["IN_CREATE",\n                "IN_OPEN",\n                "IN_ACCESS",\n                "IN_ATTRIB",\n                "IN_CLOSE_NOWRITE",\n                "IN_CLOSE_WRITE",\n                "IN_DELETE",\n                "IN_DELETE_SELF",\n                "IN_IGNORED",\n                "IN_MODIFY",\n                "IN_MOVE_SELF",\n                "IN_MOVED_FROM",\n                "IN_MOVED_TO",\n                "IN_Q_OVERFLOW",\n                "IN_UNMOUNT",\n                "default"]\n\ndef process_generator(cls, method):\n    def _method_name(self, event):\n        print("Method name: process_{}()\\n"\n               "Path name: {}\\n"\n               "Event Name: {}\\n".format(method, event.pathname, event.maskname))\n    _method_name.__name__ = "process_{}".format(method)\n    setattr(cls, _method_name.__name__, _method_name)\n\nfor method in EventProcessor._methods:\n    process_generator(EventProcessor, method)\n\nwatch_manager = pyinotify.WatchManager()\nevent_notifier = pyinotify.Notifier(watch_manager, EventProcessor())\n\nwatch_this = os.path.abspath("notification_dir")\nwatch_manager.add_watch(watch_this, pyinotify.ALL_EVENTS)\nevent_notifier.loop()\n')),(0,l.kt)("p",null,"Now Create a folder ",(0,l.kt)("inlineCode",{parentName:"p"},"notification_dir")," inside your home directory and run the Python script:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"python3 notify_me.py\n")),(0,l.kt)("p",null,"Open another Terminal and create a file inside the folder:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"touch ~/notification_dir/test\n")),(0,l.kt)("p",null,"Switch back to your watch task and see if it recognized the change:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"Method name: process_IN_CREATE()\nPath name: /root/notification_dir/test\nEvent Name: IN_CREATE\n\nMethod name: process_IN_OPEN()\nPath name: /root/notification_dir/test\nEvent Name: IN_OPEN\n\nMethod name: process_IN_ATTRIB()\nPath name: /root/notification_dir/test\nEvent Name: IN_ATTRIB\n\nMethod name: process_IN_CLOSE_WRITE()\nPath name: /root/notification_dir/test\nEvent Name: IN_CLOSE_WRITE\n")),(0,l.kt)("p",null,"This worked! Pyinotify is now ready to go!"),(0,l.kt)("h2",{id:"debugging-the-reactor"},"Debugging the Reactor"),(0,l.kt)("p",null,"Run the Master in Debug mode and re-run everything to see what is happening:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl stop salt-master\nsalt-master -l debug\n")))}p.isMDXComponent=!0},81447:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-b4cf9c34388c6602b955c33cae6b6b66.jpg"}}]);