"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[97909],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>m});var t=a(67294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=t.createContext({}),c=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=c(a),m=o,h=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return a?t.createElement(h,l(l({ref:n},u),{},{components:a})):t.createElement(h,l({ref:n},u))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=a.length,l=new Array(s);l[0]=d;var r={};for(var i in n)hasOwnProperty.call(n,i)&&(r[i]=n[i]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var c=2;c<s;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},22218:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var t=a(87462),o=(a(67294),a(3905));const s={sidebar_position:9060,slug:"2020-06-18",title:"Salt Execution Order",authors:"mpolinowski",tags:["LINUX","Salt"]},l=void 0,r={unversionedId:"DevOps/Salt/2020-06-18--salt-execution-order/index",id:"DevOps/Salt/2020-06-18--salt-execution-order/index",title:"Salt Execution Order",description:"Guangzhou, China",source:"@site/docs/DevOps/Salt/2020-06-18--salt-execution-order/index.md",sourceDirName:"DevOps/Salt/2020-06-18--salt-execution-order",slug:"/DevOps/Salt/2020-06-18--salt-execution-order/2020-06-18",permalink:"/docs/DevOps/Salt/2020-06-18--salt-execution-order/2020-06-18",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-18--salt-execution-order/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9060,frontMatter:{sidebar_position:9060,slug:"2020-06-18",title:"Salt Execution Order",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salt Mine & Orchestrate",permalink:"/docs/DevOps/Salt/2020-06-19--salt-mine-orchestrate/2020-06-19"},next:{title:"Salt Pillars & Formulas",permalink:"/docs/DevOps/Salt/2020-06-17--salt-pillars-formulas/2020-06-17"}},i={},c=[{value:"Complex State Trees",id:"complex-state-trees",level:2},{value:"Execution Order",id:"execution-order",level:3},{value:"Requisites",id:"requisites",level:3},{value:"Watch",id:"watch",level:3},{value:"Conditionals and Branching",id:"conditionals-and-branching",level:2},{value:"onChanges",id:"onchanges",level:3},{value:"onFail",id:"onfail",level:3},{value:"prereq",id:"prereq",level:3}],u={toc:c};function p(e){let{components:n,...s}=e;return(0,o.kt)("wrapper",(0,t.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Guangzhou, China",src:a(12136).Z,width:"1500",height:"669"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#complex-state-trees"},"Complex State Trees"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#execution-order"},"Execution Order")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#requisites"},"Requisites")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#watch"},"Watch")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#conditionals-and-branching"},"Conditionals and Branching"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#onchanges"},"onChanges")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#onfail"},"onFail")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#prereq"},"prereq"))))),(0,o.kt)("h2",{id:"complex-state-trees"},"Complex State Trees"),(0,o.kt)("p",null,"You can combine ",(0,o.kt)("inlineCode",{parentName:"p"},"*.sls")," files by using import statements or by the use of ",(0,o.kt)("strong",{parentName:"p"},"Top Files"),". We can use this data for example in our Apache landing page (see previous tutorial):"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"welcome.sls")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# Adding a blank front page\n\ninclude:\n  - apache\n\n{% set name = salt.pillar.get('name') %}\n\ncheck_pillar_values:\n  test.check_pillar:\n    - present:\n      - name\n    - failhard: True\n\nwelcome_page:\n  file.managed:\n    - name: /var/www/html/index.html\n    - contents: |\n        <!doctype html>\n        <body>\n            <h1>{{ name }}.</h1>\n        </body>\n")),(0,o.kt)("p",null,"The include statement on top will add the Apache installation - we can now execute the ",(0,o.kt)("inlineCode",{parentName:"p"},"welcome.sls")," directly and get the complete Apache setup:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt ubuntuAsus state.sls apache.welcome\n")),(0,o.kt)("p",null,"You can accomplish the same by creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"/srv/salt/top.sls")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"base:\n  '*':\n    - apache\n    - apache.welcome\n")),(0,o.kt)("p",null,"The Apache setup can now be executed by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt '*' state.highstate\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"state.highstate")," command will setup the whole infrastructure as defined inside your top file. If you create multiple top files for different setup use the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.state.html"},"state.top")," command and specify the file you want to execute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt '*' state.top prod_top.sls\n")),(0,o.kt)("h3",{id:"execution-order"},"Execution Order"),(0,o.kt)("p",null,"Salt's YAML render picks up every instruction inside an ",(0,o.kt)("inlineCode",{parentName:"p"},"*.sls")," file and assigns an order key to them. This makes sure that they are executed in the same order they are written down inside your file. If you need to make sure that one of the instruction is ",(0,o.kt)("strong",{parentName:"p"},"ALWAYS")," either executed ",(0,o.kt)("strong",{parentName:"p"},"FIRST")," or ",(0,o.kt)("strong",{parentName:"p"},"LAST"),", you can specify this inside your file:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"init.sls")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# Install vanilla Apache on Debian/RedHat\n\n{% from 'apache/map.sls' import apache with context %}\n\ninstall_apache:\n  pkg.installed:\n   - name: {{ apache.pkg }}\n   - order: last\n\nenable_apache:\n  service.running:\n    - name: {{ apache.srv }}\n\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\n    - enable: True\n    - order: first\n")),(0,o.kt)("p",null,"This order stops working reliably once you have include or require statements inside your file."),(0,o.kt)("h3",{id:"requisites"},"Requisites"),(0,o.kt)("p",null,"Requisites bring explicit ordering to your file execution:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"init.sls")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# Install vanilla Apache on Debian/RedHat\n\n{% from 'apache/map.sls' import apache with context %}\n\ninstall_apache:\n  pkg.installed:\n   - name: {{ apache.pkg }}\n\nenable_apache:\n  service.running:\n    - name: {{ apache.srv }}\n\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\n    - enable: True\n    - require:\n      - pkg: install_apache\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"require")," statement makes sure that Apache is installed before it will attempt to enable the Apache service."),(0,o.kt)("h3",{id:"watch"},"Watch"),(0,o.kt)("p",null,"The watch module reacts to a specified instruction being executed and then triggers another function. A practical use case is to restart the Apache service once the Apache configuration was modified:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"init.sls")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# Install vanilla Apache on Debian/RedHat\n\n{% from 'apache/map.sls' import apache with context %}\n\ninstall_apache:\n  pkg.installed:\n   - name: {{ apache.pkg }}\n\nenable_apache:\n  service.running:\n    - name: {{ apache.srv }}\n\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\n    - enable: True\n    - watch:\n      - file: danger_config\n    \ndanger_config:\n  file.managed:\n    - name /bar/foo\n    - contents: foo\n    \n")),(0,o.kt)("p",null,"We can also extend the watch service to another SLS file:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"mods.sls")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"include:\n  - apache\n\nextend:\n  start_apache:\n    service:\n      - watch:\n        - file: danger_config\n\n{% for conf in ['status', 'info'] %}\n\nmod_{{ conf }}:\n  file.managed:\n    - name: /etc/apache2/conf-available/mod_{{ conf }}.conf\n    - contents: |\n        <Location '/{{ conf }}'>\n            SetHandler server-{{ conf }}\n        </Location>\n\n  {% if salt.grains.get('os_family') == 'Debian' %}\n  cmd.run:\n    - name: a2enmod {{ conf }} && a2enconf mod_{{ conf }}\n    - creates: /etc/apache2/conf-enabled/mod_{{ conf }}.conf\n  {% endif %}\n\n{% endfor %}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mods.sls")," configures Apache - by including the ",(0,o.kt)("inlineCode",{parentName:"p"},"init.sls")," file we can now execute mods and be certain that Apache will be installed first before the configuration is attempted. We can now define the watch task here instead of the init file."),(0,o.kt)("p",null,"We can also use the  ",(0,o.kt)("inlineCode",{parentName:"p"},"watch_in")," statement:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"mods.sls")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"include:\n  - apache\n\n{% for conf in ['status', 'info'] %}\n\nmod_{{ conf }}:\n  file.managed:\n    - name: /etc/apache2/conf-available/mod_{{ conf }}.conf\n    - contents: |\n        <Location '/{{ conf }}'>\n            SetHandler server-{{ conf }}\n        </Location>\n    - watch_in:\n      - service: enable_apache\n\n  {% if salt.grains.get('os_family') == 'Debian' %}\n  cmd.run:\n    - name: a2enmod {{ conf }} && a2enconf mod_{{ conf }}\n    - creates: /etc/apache2/conf-enabled/mod_{{ conf }}.conf\n    - watch_in:\n      - service: enable_apache\n  {% endif %}\n\n{% endfor %}\n")),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"mod_status")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"mod_info")," should always be changed ",(0,o.kt)("strong",{parentName:"p"},"BEFORE")," Apache is restarted with ",(0,o.kt)("inlineCode",{parentName:"p"},"enable_apache"),"."),(0,o.kt)("p",null,"You can test the execution order by doing a dry-run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' state.sls apache.mods test=true\n\nubuntuAsus:\n----------\n          ID: install_apache\n    Function: pkg.installed\n        Name: apache2\n      Result: True\n     Comment: All specified packages are already installed\n     Started: 18:26:02.852277\n    Duration: 38.55 ms\n     Changes:   \n----------\n          ID: mod_status\n    Function: file.managed\n        Name: /etc/apache2/conf-available/mod_status.conf\n      Result: None\n     Comment: The file /etc/apache2/conf-available/mod_status.conf is set to be changed\n              Note: No changes made, actual changes may\n              be different due to other states.\n     Started: 18:26:02.899635\n    Duration: 1.456 ms\n     Changes:   \n              ----------\n              newfile:\n                  /etc/apache2/conf-available/mod_status.conf\n----------\n          ID: mod_info\n    Function: file.managed\n        Name: /etc/apache2/conf-available/mod_info.conf\n      Result: None\n     Comment: The file /etc/apache2/conf-available/mod_info.conf is set to be changed\n              Note: No changes made, actual changes may\n              be different due to other states.\n     Started: 18:26:02.901184\n    Duration: 1.077 ms\n     Changes:   \n              ----------\n              newfile:\n                  /etc/apache2/conf-available/mod_info.conf\n----------\n          ID: enable_apache\n    Function: service.running\n        Name: apache2\n      Result: None\n     Comment: Service is set to be restarted\n     Started: 18:26:02.940131\n    Duration: 19.022 ms\n     Changes:   \n----------\n          ID: mod_status\n    Function: cmd.run\n        Name: a2enmod status && a2enconf mod_status\n      Result: None\n     Comment: Command 'a2enmod status && a2enconf mod_status' would have been executed\n     Started: 18:26:02.961747\n    Duration: 378.228 ms\n     Changes:   \n----------\n          ID: mod_info\n    Function: cmd.run\n        Name: a2enmod info && a2enconf mod_info\n      Result: None\n     Comment: Command 'a2enmod info && a2enconf mod_info' would have been executed\n     Started: 18:26:03.340098\n    Duration: 4.92 ms\n     Changes:   \n\nSummary for ubuntuAsus\n------------\nSucceeded: 6 (unchanged=5, changed=2)\nFailed:    0\n------------\nTotal states run:     6\nTotal run time: 443.253 ms\n")),(0,o.kt)("h2",{id:"conditionals-and-branching"},"Conditionals and Branching"),(0,o.kt)("h3",{id:"onchanges"},"onChanges"),(0,o.kt)("p",null,"We can use ",(0,o.kt)("inlineCode",{parentName:"p"},"onChanges")," to watch a state and trigger actions when required. For example the Apache modules only need to be (re) enabled if their content changed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"include:\n  - apache\n\n{% for conf in ['status', 'info'] %}\n\nmod_{{ conf }}:\n  file.managed:\n    - name: /etc/apache2/conf-available/mod_{{ conf }}.conf\n    - contents: |\n        <Location \"/{{ conf }}\">\n            SetHandler server-{{ conf }}\n        </Location>\n    - watch_in:\n      - service: enable_apache\n\n  {% if salt.grains.get('os_family') == 'Debian' %}\n  cmd.run:\n    - name: a2enmod {{ conf }} && a2enconf mod_{{ conf }}\n    - onchanges:\n      - file: mod_{{ conf }}\n    - watch_in:\n      - service: enable_apache\n  {% endif %}\n\n{% endfor %}\n")),(0,o.kt)("p",null,"You can now re-run the command and the see that the execution was suppressed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"salt ubuntuAsus state.sls apache.mods\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"----------\n          ID: mod_status\n    Function: cmd.run\n        Name: a2enmod status && a2enconf mod_status\n      Result: True\n     Comment: State was not run because none of the onchanges reqs changed\n     Started: 10:54:17.354494\n    Duration: 0.004 ms\n     Changes:   \n----------\n          ID: mod_info\n    Function: cmd.run\n        Name: a2enmod info && a2enconf mod_info\n      Result: True\n     Comment: State was not run because none of the onchanges reqs changed\n     Started: 10:54:17.354603\n    Duration: 0.002 ms\n     Changes:\n")),(0,o.kt)("p",null,"You can now change the configuration file (by adding some meaningless white space) and re-run the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'...\n\n<Location "/{{ conf }}">\n    SetHandler server-{{ conf }}\n\n</Location>\n\n...\n')),(0,o.kt)("p",null,"The change will be picked up and the modules will be executed once again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'salt ubuntuAsus state.sls apache.mods\n\n                                                                    \nubuntuAsus:\n----------\n          ID: mod_status\n    Function: file.managed\n        Name: /etc/apache2/conf-available/mod_status.conf\n      Result: True\n     Comment: File /etc/apache2/conf-available/mod_status.conf updated\n     Started: 11:00:09.916316\n    Duration: 31.164 ms\n     Changes:   \n              ----------\n              diff:\n                  --- \n                  +++ \n                  @@ -1,3 +1,4 @@\n                   <Location "/status">\n                       SetHandler server-status\n                  +\n                   </Location>\n----------\n          ID: enable_apache\n    Function: service.running\n        Name: apache2\n      Result: True\n     Comment: Service restarted\n     Started: 11:00:10.005666\n    Duration: 133.762 ms\n     Changes:   \n              ----------\n              apache2:\n                  True\n----------\n          ID: mod_info\n    Function: file.managed\n        Name: /etc/apache2/conf-available/mod_info.conf\n      Result: True\n     Comment: File /etc/apache2/conf-available/mod_info.conf updated\n     Started: 11:00:09.947841\n    Duration: 11.464 ms\n     Changes:   \n              ----------\n              diff:\n                  --- \n                  +++ \n                  @@ -1,3 +1,4 @@\n                   <Location "/info">\n                       SetHandler server-info\n                  +\n                   </Location>\n----------\n          ID: mod_status\n    Function: cmd.run\n        Name: a2enmod status && a2enconf mod_status\n      Result: True\n     Comment: Command "a2enmod status && a2enconf mod_status" run\n     Started: 11:00:10.142729\n    Duration: 59.029 ms\n     Changes:   \n              ----------\n              pid:\n                  83853\n              retcode:\n                  0\n              stderr:\n              stdout:\n                  Module status already enabled\n                  Conf mod_status already enabled\n----------\n          ID: mod_info\n    Function: cmd.run\n        Name: a2enmod info && a2enconf mod_info\n      Result: True\n     Comment: Command "a2enmod info && a2enconf mod_info" run\n     Started: 11:00:10.202081\n    Duration: 52.738 ms\n     Changes:   \n              ----------\n              pid:\n                  83864\n              retcode:\n                  0\n              stderr:\n              stdout:\n                  Module info already enabled\n                  Conf mod_info already enabled\n')),(0,o.kt)("h3",{id:"onfail"},"onFail"),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"onFail")," we can run a state if another state does not complete successfully. Create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"nano /srv/salt/apptest.sls")," and let it ",(0,o.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/states/all/salt.states.git.html#salt.states.git.latest"},"download a git repository")," for us:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apptest:\n  git.latest:\n    - name: https://github.com/mpolinowski/docker-elk.git\n    - rev: master\n    - target: /opt/apptest\n\nnotify_of_fail:\n  event.send:\n    - name: apptest/failed\n    - onfail:\n      - git: apptest\n")),(0,o.kt)("p",null,"Then run the state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"salt ubuntuAsus state.sls apptest\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ubuntuAsus:\n----------\n          ID: apptest\n    Function: git.latest\n        Name: https://github.com/mpolinowski/docker-elk.git\n      Result: True\n     Comment: https://github.com/mpolinowski/docker-elk.git cloned to /opt/apptest\n     Started: 11:24:51.598681\n    Duration: 13472.643 ms\n     Changes:   \n              ----------\n              new:\n                  https://github.com/mpolinowski/docker-elk.git => /opt/apptest\n              revision:\n                  ----------\n                  new:\n                      2358839589c36223984b6a0528289d9efefd5189\n                  old:\n                      None\n----------\n          ID: notify_of_fail\n    Function: event.send\n        Name: apptest/failed\n      Result: True\n     Comment: State was not run because onfail req did not change\n     Started: 11:25:05.080430\n    Duration: 0.013 ms\n     Changes:   \n\nSummary for ubuntuAsus\n------------\nSucceeded: 2 (changed=1)\nFailed:    0\n------------\nTotal states run:     2\nTotal run time:  13.473 s\n")),(0,o.kt)("p",null,"The repository cloning was successful and the notification was ",(0,o.kt)("strong",{parentName:"p"},"NOT")," triggered."),(0,o.kt)("h3",{id:"prereq"},"prereq"),(0,o.kt)("p",null,"Only run a state when another state will change the system. E.g. reload your webserver only if a new app version was downloaded by git:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'{% from "apache/map.sls" import apache with context %}\n\ninclude:\n  - apache\n\napptest:\n  git.latest:\n    - name: https://github.com/mpolinowski/docker-elk.git\n    - rev: master\n    - target: /opt/apptest\n    - watch_in:\n      - service: enable_apache\n\nreload_apache:\n  module.run:\n    - name: service.stop\n    - m_name: {{ apache.srv }}\n    - prereq:\n      - git: apptest\n\nnotify_of_fail:\n  event.send:\n    - name: apptest/failed\n    - onfail:\n      - git: apptest\n')),(0,o.kt)("p",null,"The prerequisite will run ",(0,o.kt)("inlineCode",{parentName:"p"},"apptest")," in ",(0,o.kt)("em",{parentName:"p"},"Dry-Run"),". If the code changed, ",(0,o.kt)("inlineCode",{parentName:"p"},"reload_apache")," will be triggered once the new source code was cloned by git."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"salt ubuntuAsus state.sls apptest                                                                             \nubuntuAsus:\n----------\n          ID: install_apache\n    Function: pkg.installed\n        Name: apache2\n      Result: True\n     Comment: All specified packages are already installed\n     Started: 11:44:57.106219\n    Duration: 40.43 ms\n     Changes:   \n----------\n          ID: reload_apache\n    Function: module.run\n        Name: service.stop\n      Result: True\n     Comment: Module function service.stop executed\n     Started: 11:44:58.331330\n    Duration: 97.635 ms\n     Changes:   \n              ----------\n              ret:\n                  True\n----------\n          ID: apptest\n    Function: git.latest\n        Name: https://github.com/mpolinowski/docker-elk.git\n      Result: True\n     Comment: https://github.com/mpolinowski/docker-elk.git cloned to /opt/apptest\n     Started: 11:44:58.429290\n    Duration: 4591.687 ms\n     Changes:   \n              ----------\n              new:\n                  https://github.com/mpolinowski/docker-elk.git => /opt/apptest\n              revision:\n                  ----------\n                  new:\n                      2358839589c36223984b6a0528289d9efefd5189\n                  old:\n                      None\n----------\n          ID: enable_apache\n    Function: service.running\n        Name: apache2\n      Result: True\n     Comment: Service apache2 is already enabled, and is running\n     Started: 11:45:03.021324\n    Duration: 118.316 ms\n     Changes:   \n              ----------\n              apache2:\n                  True\n----------\n          ID: notify_of_fail\n    Function: event.send\n        Name: apptest/failed\n      Result: True\n     Comment: State was not run because onfail req did not change\n     Started: 11:45:03.141194\n    Duration: 0.004 ms\n     Changes:   \n\nSummary for ubuntuAsus\n------------\nSucceeded: 5 (changed=3)\nFailed:    0\n------------\nTotal states run:     5\nTotal run time:   4.848 s\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"reload_apache")," detected that ",(0,o.kt)("inlineCode",{parentName:"p"},"apptest")," will add new source code and stopped the webserver. Once the code was cloned the watch task reloaded the webserver."))}p.isMDXComponent=!0},12136:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-bf63cad7c3e1864ad8175e21a1e31033.jpg"}}]);