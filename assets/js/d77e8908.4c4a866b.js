"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[54938],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),g=o,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||r;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51987:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:9010,slug:"2021-04-28",title:"Installing Ansible Tower (AWX in Docker) on RHEL8",authors:"mpolinowski",tags:["LINUX"]},s=void 0,i={unversionedId:"DevOps/Ansible/2021-04-28-ansible-tower-rhel/index",id:"DevOps/Ansible/2021-04-28-ansible-tower-rhel/index",title:"Installing Ansible Tower (AWX in Docker) on RHEL8",description:"Guangzhou, China",source:"@site/docs/DevOps/Ansible/2021-04-28-ansible-tower-rhel/index.md",sourceDirName:"DevOps/Ansible/2021-04-28-ansible-tower-rhel",slug:"/DevOps/Ansible/2021-04-28-ansible-tower-rhel/2021-04-28",permalink:"/docs/DevOps/Ansible/2021-04-28-ansible-tower-rhel/2021-04-28",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Ansible/2021-04-28-ansible-tower-rhel/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:9010,frontMatter:{sidebar_position:9010,slug:"2021-04-28",title:"Installing Ansible Tower (AWX in Docker) on RHEL8",authors:"mpolinowski",tags:["LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Setting up Ansible Tower (AWX)",permalink:"/docs/DevOps/Ansible/2021-04-29-ansible-tower-setup/2021-04-29"},next:{title:"Ansible Docker-in-Docker",permalink:"/docs/DevOps/Ansible/2020-11-26--ansible-dind/2020-11-26"}},l={},p=[{value:"Installing Ansible Tower (AWX)",id:"installing-ansible-tower-awx",level:2},{value:"Prepare your RHEL 8 Server",id:"prepare-your-rhel-8-server",level:3},{value:"Install Ansible AWX 17.1.0",id:"install-ansible-awx-1710",level:2},{value:"Accessing the Web Interface",id:"accessing-the-web-interface",level:3},{value:"Changing the Logo",id:"changing-the-logo",level:2},{value:"Install Ansible AWX 19.2.2 (DOES NOT WORK)",id:"install-ansible-awx-1922-does-not-work",level:2},{value:"Build the image",id:"build-the-image",level:3},{value:"Start the Containers",id:"start-the-containers",level:3}],c={toc:p};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Guangzhou, China",src:n(95916).Z,width:"1500",height:"537"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#installing-ansible-tower-awx"},"Installing Ansible Tower (AWX)"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#prepare-your-rhel-8-server"},"Prepare your RHEL 8 Server")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#install-ansible-awx-1710"},"Install Ansible AWX 17.1.0"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#accessing-the-web-interface"},"Accessing the Web Interface")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#changing-the-logo"},"Changing the Logo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#install-ansible-awx-1922-does-not-work"},"Install Ansible AWX 19.2.2 (DOES NOT WORK)"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#build-the-image"},"Build the image")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#start-the-containers"},"Start the Containers"))))),(0,o.kt)("h2",{id:"installing-ansible-tower-awx"},"Installing Ansible Tower (AWX)"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ansible/awx"},"AWX Project (AWX)")," is an open source community project. In addition, it\u2019s the OpenSource version of the Ansible Tower software sponsored by Red Hat, that enables users to better control their Ansible project use in IT environments."),(0,o.kt)("h3",{id:"prepare-your-rhel-8-server"},"Prepare your RHEL 8 Server"),(0,o.kt)("p",null,"Make sure that both the EPEL Repository and Docker is already installed on your Red Hat Server - see ",(0,o.kt)("a",{parentName:"p",href:"/docs/DevOps/Linux/2021-04-11-installing-free-red-hat-enterprise-linux/2021-04-11"},"setup guide"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"dnf install git gcc gcc-c++ nodejs gettext device-mapper-persistent-data lvm2 bzip2 python3-pip ansible\n")),(0,o.kt)("p",null,"First, set ",(0,o.kt)("inlineCode",{parentName:"p"},"python3")," as the default one by running the below command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo alternatives --set python /usr/bin/python3\n")),(0,o.kt)("p",null,"Next, use ",(0,o.kt)("inlineCode",{parentName:"p"},"pip3")," command to install the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," tool:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\ndocker-compose --version\n\nsudo pip3 install docker-compose\n')),(0,o.kt)("h2",{id:"install-ansible-awx-1710"},"Install Ansible AWX 17.1.0"),(0,o.kt)("p",null,"Clone the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ansible/awx/releases/tag/17.1.0"},"latest v17 release")," with the command (",(0,o.kt)("strong",{parentName:"p"},"Note")," that AWX underwent changes in version 18! I first tried to ",(0,o.kt)("a",{parentName:"p",href:"#install-ansible-awx-1922-does-not-work"},"install Ansible AWX v19.2.2 following this instructions and it DID NOT WORK"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'git clone -b "17.1.0" https://github.com/ansible/awx.git\n')),(0,o.kt)("p",null,"Generate a secret encryption key with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rand -base64 30\niR0MXri042xWjgqztRXFK1eLERtU+9g2OhYRVWld\n")),(0,o.kt)("p",null,"Navigate to the ",(0,o.kt)("inlineCode",{parentName:"p"},"awx/installer")," directory and locate the ",(0,o.kt)("strong",{parentName:"p"},"inventory")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd awx/installer/\nnano inventory\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'localhost ansible_connection=local ansible_python_interpreter="/usr/bin/env python3"\n\n[all:vars]\n\n# Remove these lines if you want to run a local image build\n# Otherwise the setup playbook will install the official Ansible images. Versions may\n# be selected based on: latest, 1, 1.0, 1.0.0, 1.0.0.123\n# by default the base will be used to search for ansible/awx\ndockerhub_base=ansible\n\n# Openshift Install\n# Will need to set -e openshift_password=developer -e docker_registry_password=$(oc whoami -t)\n#           or set -e openshift_token=TOKEN\n# openshift_host=127.0.0.1:8443\n# openshift_project=awx\n# openshift_user=developer\n# openshift_skip_tls_verify=False\n# openshift_pg_emptydir=True\n\n# Kubernetes Install\n# kubernetes_context=test-cluster\n# kubernetes_namespace=awx\n# kubernetes_web_svc_type=NodePort\n# Optional Kubernetes Variables\n# pg_image_registry=docker.io\n# pg_serviceaccount=awx\n# pg_volume_capacity=5\n# pg_persistence_storageClass=StorageClassName\n# pg_persistence_existingclaim=postgres_pvc\n# pg_cpu_limit=1000\n# pg_mem_limit=2\n\n# Kubernetes Ingress Configuration\n# You can use the variables below to configure Kubernetes Ingress\n# Set hostname\n# kubernetes_ingress_hostname=awx.example.org\n# Add annotations. The example below shows an annotation to be used with Traefik but other Ingress controllers are also supported\n# kubernetes_ingress_annotations={\'kubernetes.io/ingress.class\': \'traefik\', \'traefik.ingress.kubernetes.io/redirect-entry-point\': \'https\'}\n# Specify a secret for TLS termination\n# kubernetes_ingress_tls_secret=awx-cert\n\n# Kubernetes and Openshift Install Resource Requests\n# These are the request and limit values for a pod\'s container for task/web/redis/management.\n# The total amount of requested resources for a pod is the sum of all\n# resources requested by all containers in the pod\n# A cpu_request of 1500 is 1.5 cores for the container to start out with.\n# A cpu_limit defines the maximum cores that that container can reserve.\n# A mem_request of 2 is for 2 gigabytes of memory for the container\n# A mem_limit defines the maximum memory that that container can reserve.\n# Default values for these entries can be found in ./roles/kubernetes/defaults/main.yml\n# task_cpu_request=1500\n# task_mem_request=2\n# task_cpu_limit=2000\n# task_mem_limit=4\n# web_cpu_limit=1000\n# web_mem_limit=2\n# redis_cpu_limit=1000\n# redis_mem_limit=3\n# management_cpu_limit=2000\n# management_mem_limit=2\n\n# Common Docker parameters\nawx_task_hostname=awx\nawx_web_hostname=awxweb\n# Local directory that is mounted in the awx_postgres docker container to place the db in\npostgres_data_dir="/opt/awx/pgdocker"\nhost_port=80\nhost_port_ssl=443\n#ssl_certificate=\n# Optional key file\n#ssl_certificate_key=\ndocker_compose_dir="/opt/awx/awxcompose"\n\n# Required for Openshift when building the image on your own\n# Optional for Openshift if using Dockerhub or another prebuilt registry\n# Required for Docker Compose Install if building the image on your own\n# Optional for Docker Compose Install if using Dockerhub or another prebuilt registry\n# Define if you want the image pushed to a registry. The container definition will also use these images\n# docker_registry=172.30.1.1:5000\n# docker_registry_repository=awx\n# docker_registry_username=developer\n\n\n# Set pg_hostname if you have an external postgres server, otherwise\n# a new postgres service will be created\n# pg_hostname=postgresql\npg_username=awx\n# pg_password should be random 10 character alphanumeric string, when postgresql is running on kubernetes\n# NB: it\'s a limitation of the "official" postgres helm chart\npg_password=awxpassword\npg_database=awx\npg_port=5432\n#pg_sslmode=require\n\n# If requiring SSL communication (e.g. pg_sslmode=\'verify-full\') with Postgres\n# and using a self-signed certificate or a certificate signed by a custom CA\n# set pg_root_ca_file to a file containing the self-signed certificate or the\n# root CA certificate chain.\n# pg_root_ca_file=\'example_root_ca.crt\'\n\n# The following variable is only required when using the provided\n# containerized postgres deployment on OpenShift\n# pg_admin_password=postgrespass\n\n# This will create or update a default admin (superuser) account in AWX, if not provided\n# then these default values are used\nadmin_user=admin\nadmin_password=password\n\n# Whether or not to create preload data for demonstration purposes\ncreate_preload_data=True\n\n# AWX Secret key\n# It\'s *very* important that this stay the same between upgrades or you will lose the ability to decrypt\n# your credentials >> Use the key you created with `openssl rand -base64 30`\nsecret_key=iR0MXri042xWjgqztRXFK1eLERtU+9g2OhYRVWld\n\n# By default a broadcast websocket secret will be generated.\n# If you would like to *rerun the playbook*, you need to set a unique password.\n# Otherwise it would generate a new one every playbook run.\n# broadcast_websocket_secret=\n\n# Build AWX with official logos\n# Requires cloning awx-logos repo as a sibling of this project.\n# Review the trademark guidelines at https://github.com/ansible/awx-logos/blob/master/TRADEMARKS.md\nawx_official=false\n\n# Proxy\n#http_proxy=http://proxy:3128\n#https_proxy=http://proxy:3128\n#no_proxy=mycorp.org\n\n# Container networking configuration\n# Set the awx_task and awx_web containers\' search domain(s)\n#awx_container_search_domains=example.com,ansible.com\n# Alternate DNS servers\n#awx_alternate_dns_servers="10.1.2.3,10.2.3.4"\n\n# AWX project data folder. If you need access to the location where AWX stores the projects\n# it manages from the docker host, you can set this to turn it into a volume for the container.\n#project_data_dir=/var/lib/awx/projects\n\n# AWX custom virtual environment folder. Only usable for local install.\n#custom_venv_dir=/opt/my-envs/\n\n# CA Trust directory. If you need to provide custom CA certificates, supplying\n# this variable causes this directory on the host to be bind mounted over\n# /etc/pki/ca-trust in the awx_task and awx_web containers.\n# If you are deploying on openshift or kubernetes, set the variable to /etc/pki/ca-trust instead,\n# as the awx_web and awx_task containers will not run the `update-ca-trust` command.\n#ca_trust_dir=/etc/pki/ca-trust/source/anchors\n\n# Include /etc/nginx/awx_extra.conf\n# Note the use of glob pattern for nginx\n# which makes include "optional" - i.e. not fail\n# if file is absent\n#extra_nginx_include="/etc/nginx/awx_extra[.]conf"\n\n# Docker compose explicit subnet. Set to avoid overlapping your existing LAN networks.\n#docker_compose_subnet="172.17.0.1/16"\n#\n# Allow for different docker logging drivers\n# By Default; the logger will be json-file, however you can override\n# that by uncommenting the docker_logger below.\n# Be aware that journald may rate limit your log messages if you choose it.\n# See: https://docs.docker.com/config/containers/logging/configure/\n# docker_logger=journald\n#\n\n# Add extra hosts to docker compose file. This might be necessary to\n# sneak in servernames. For example for DMZ self-signed CA certificates.\n# Equivialent to using the --add-host parameter with "docker run".\n#docker_compose_extra_hosts="otherserver.local:192.168.0.1,ldap-server.local:192.168.0.2"\n\n')),(0,o.kt)("p",null,"In the ",(0,o.kt)("strong",{parentName:"p"},"inventory")," file above I choose the folder ",(0,o.kt)("inlineCode",{parentName:"p"},"/opt/awx")," to hold the PostgresSQL Data - whatever you choose there, make sure that the directory exists and can be written to by your Docker user:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir /opt/awx\n")),(0,o.kt)("p",null,"Now we can install Ansible AWX with following the Ansible command from inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"awx/installer/"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ansible-playbook -i inventory install.yml\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you get the following ",(0,o.kt)("strong",{parentName:"p"},"Error Message")," : ",(0,o.kt)("em",{parentName:"p"},'"could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network"')," -> deactivate your VNP connection!")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'fatal: [localhost]: FAILED! => {"changed": true, "cmd": "docker-compose run --rm --service-ports task awx-manage migrate --no-input", "delta": "0:00:00.472026", "end": "2021-07-13 13:33:22.085111", "msg": "non-zero return code", "rc": 1, "start": "2021-07-13 13:33:21.613085", "stderr": "Creating network \\"awxcompose_default\\" with the default driver\\ncould not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network", "stderr_lines": ["Creating network \\"awxcompose_default\\" with the default driver", "could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network"], "stdout": "", "stdout_lines": []}\n')),(0,o.kt)("p",null,"Once the installation process finishes you should see the following docker container running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker ps\n\nCONTAINER ID   IMAGE                PORTS                                   NAMES\nb9b98dbb397e   ansible/awx:17.1.0   8052/tcp                                awx_task\n975b09b0249f   ansible/awx:17.1.0   0.0.0.0:80->8052/tcp, :::80->8052/tcp   awx_web\nf44e1359855e   postgres:12          5432/tcp                                awx_postgres\n4936bcef8a8c   redis                6379/tcp                                awx_redis\n")),(0,o.kt)("h3",{id:"accessing-the-web-interface"},"Accessing the Web Interface"),(0,o.kt)("p",null,"I needed to open the HTTP/S port in my firewall:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo firewall-cmd --permanent --zone=public --add-service=http  --add-service=https\n")),(0,o.kt)("p",null,"And there was an advice to configure SELinux - but it seems that it is not enabled by default on RHEL8... did not need it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"semanage port -a -t http_port_t -p tcp 8052\nsetsebool -P httpd_can_network_connect 1\n")),(0,o.kt)("p",null,"Finally I am able to access the WebUI on my server IP:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ansible Tower (AWX)",src:n(44352).Z,width:"1231",height:"962"})),(0,o.kt)("p",null,"Login using the Admin pass you set inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"inventory")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cfg"},"admin_user=admin\nadmin_password=password\n")),(0,o.kt)("p",null,"Ta da! The Ansible Tower (AWX) web interface is at your service:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Ansible Tower (AWX)",src:n(68882).Z,width:"1231",height:"919"})),(0,o.kt)("h2",{id:"changing-the-logo"},"Changing the Logo"),(0,o.kt)("p",null,"The logo and login background seems to be stored in:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"awx/awx/ui_next/public/static/media\n")),(0,o.kt)("p",null,"I will try changing the content of this directory and rebuild the app later :)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"EDIT"),": Changing the Logo inside your already build container:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Back up the original files:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker exec -ti awx_web /bin/bash\n\nbash-4.4# cd /var/lib/awx/public/static/media/\nbash-4.4# mv logo-header.svg logo-header.svg.bsk\nbash-4.4# mv logo-header.svg.bsk logo-header.svg.bak\nbash-4.4# mv pfbg_576.jpg pfbg_576.jpg.bak\nbash-4.4# mv pfbg_576@2x.jpg pfbg_576@2x.jpg.bak\nbash-4.4# mv pfbg_768.jpg pfbg_768.jpg.bak\nbash-4.4# mv pfbg_768@2x.jpg pfbg_768@2x.jpg.bak\nbash-4.4# mv pfbg_2000.jpg pfbg_2000.jpg.bak\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Create your own versions and copy them into the ",(0,o.kt)("inlineCode",{parentName:"li"},"awx_web")," container:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker cp ~/Pictures/logo-login.svg awx_web:/var/lib/awx/public/static/media/logo-login.svg\nsudo docker cp ~/Pictures/logo-header.svg awx_web:/var/lib/awx/public/static/media/logo-header.svg\nsudo docker cp ~/Pictures/pfbg_2000.jpg awx_web:/var/lib/awx/public/static/media/pfbg_2000.4f598944.jpg\nsudo docker cp ~/Pictures/pfbg_576@2x.jpg awx_web:/var/lib/awx/public/static/media/pfbg_576@2x.b48e77bc.jpg\nsudo docker cp ~/Pictures/pfbg_576.jpg awx_web:/var/lib/awx/public/static/media/pfbg_576.85341a9c.jpg\nsudo docker cp ~/Pictures/pfbg_768@2x.jpg awx_web:/var/lib/awx/public/static/media/pfbg_768@2x.0099dea3.jpg\nsudo docker cp ~/Pictures/pfbg_768.jpg awx_web:/var/lib/awx/public/static/media/pfbg_768.c9839717.jpg\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo docker cp ~/Downloads/logo-login.svg awx_task:/var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/ui_next/build/static/media/logo-login.svg\nsudo docker cp ~/Downloads/logo-header.svg awx_task:/var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/ui_next/build/static/media/logo-header.svg\nsudo docker cp ~/Downloads/pfbg_2000.jpg awx_task:/var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/ui_next/build/static/media/pfbg_2000.jpg\nsudo docker cp ~/Downloads/pfbg_576@2x.jpg awx_task:/var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/ui_next/build/static/media/pfbg_576@2x.jpg\nsudo docker cp ~/Downloads/pfbg_576.jpg awx_task:/var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/ui_next/build/static/media/pfbg_576.jpg\nsudo docker cp ~/Downloads/pfbg_768@2x.jpg awx_task:/var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/ui_next/build/static/media/pfbg_768@2x.jpg\nsudo docker cp ~/Downloads/pfbg_768.jpg awx_task:/var/lib/awx/venv/awx/lib/python3.6/site-packages/awx/ui_next/build/static/media/pfbg_768.jpg\n")),(0,o.kt)("h2",{id:"install-ansible-awx-1922-does-not-work"},"Install Ansible AWX 19.2.2 (DOES NOT WORK)"),(0,o.kt)("p",null,"Clone the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ansible/awx/releases"},"latest release")," with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'git clone -b "19.2.2" https://github.com/ansible/awx.git\n')),(0,o.kt)("p",null,"Generate a secret encryption key with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rand -base64 30\niR0MXri042xWjgqztRXFK1eLERtU+9g2OhYRVWld\n")),(0,o.kt)("p",null,"Navigate to the ",(0,o.kt)("inlineCode",{parentName:"p"},"awx/installer")," directory and locate the inventory file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nano awx/tools/docker-compose/inventory\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'localhost ansible_connection=local ansible_python_interpreter="/usr/bin/env python3"\n\n[all:vars]\n\n# AWX-Managed Database Settings\n# If left blank, these will be generated upon install.\n# Values are written out to tools/docker-compose/_sources/secrets/\n# pg_password=""\n# broadcast_websocket_secret=""\n# secret_key=""\nsecret_key=iR0MXri042xWjgqztRXFK1eLERtU+9g2OhYRVWld\n\n# External Database Settings\n# pg_host=""\n# pg_password=""\n# pg_username=""\n# pg_hostname=""\npg_username=awx\npg_password=awxpassword\npg_database=awx\npg_port=5432\n\n# awx_image="quay.io/awx/awx_devel"\n# migrate_local_docker=false\n\ndockerhub_base=ansible\nawx_task_hostname=awx\nawx_web_hostname=awxweb\npostgres_data_dir="/opt/awx/pgdocker"\nhost_port=80\nhost_port_ssl=443\ndocker_compose_dir="/opt/awx/awxcompose"\nadmin_user=admin\nadmin_password=password\ncreate_preload_data=True\nawx_official=false\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir /opt/awx\n")),(0,o.kt)("h3",{id:"build-the-image"},"Build the image"),(0,o.kt)("p",null,"The AWX base container image (defined in the Dockerfile templated from Dockerfile.j2) contains basic OS dependencies and symbolic links into the development environment that make running the services easy. Run the following to build the image:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo make docker-compose-build\n")),(0,o.kt)("h3",{id:"start-the-containers"},"Start the Containers"),(0,o.kt)("p",null,"Run the awx, postgres and redis containers. This utilizes the image built in the previous step, and will automatically start all required services and dependent containers. Once the containers launch, your session will be attached to the awx container, and you'll be able to watch log messages and events in real time. You will see messages from Django and the front end build process."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo make docker-compose\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Running ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo docker images")," shows me that the build was tagged with ",(0,o.kt)("strong",{parentName:"p"},"HEAD")," - I will have to add this to the make ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo COMPOSE_TAG=HEAD make docker-compose"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For running docker-compose detached mode, start the containers using the following command: ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo make docker-compose COMPOSE_UP_OPTS=-d"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"ERROR"),": The docker run ended with an error message ",(0,o.kt)("inlineCode",{parentName:"p"},'starting container awx1 caused: exec "/entrypoint.sh": permission denied: unknown'),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown root:root tools/docker-compose/entrypoint.sh\nsudo chmod +x tools/docker-compose/entrypoint.sh\n")))}d.isMDXComponent=!0},44352:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Ansible_Tower_01-69503e3ba3bf04e05a9a9adc15746a03.png"},68882:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Ansible_Tower_02-156d3f5ef0e2db1ff339e1307f485ec7.png"},95916:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-e280ac64c46eea72fd9db939f902292a.jpg"}}]);