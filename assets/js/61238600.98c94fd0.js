"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[68768],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=p(n),y=a,m=c["".concat(l,".").concat(y)]||c[y]||d[y]||r;return n?o.createElement(m,i(i({ref:t},s),{},{components:n})):o.createElement(m,i({ref:t},s))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},88351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>u,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const r={sidebar_position:9020,slug:"2022-10-08",title:"Python - PyQt Desktop App",authors:"mpolinowski",tags:["Python"],description:"Using PyQt6 to build desktop app with Python."},i=void 0,u={unversionedId:"Development/Python/2022-10-08-python-desktop-app/index",id:"Development/Python/2022-10-08-python-desktop-app/index",title:"Python - PyQt Desktop App",description:"Using PyQt6 to build desktop app with Python.",source:"@site/docs/Development/Python/2022-10-08-python-desktop-app/index.md",sourceDirName:"Development/Python/2022-10-08-python-desktop-app",slug:"/Development/Python/2022-10-08-python-desktop-app/2022-10-08",permalink:"/docs/Development/Python/2022-10-08-python-desktop-app/2022-10-08",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Python/2022-10-08-python-desktop-app/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2022-10-08",title:"Python - PyQt Desktop App",authors:"mpolinowski",tags:["Python"],description:"Using PyQt6 to build desktop app with Python."},sidebar:"tutorialSidebar",previous:{title:"Python - Flask Frontend to generate Elasticsearch Docs from Sitemaps",permalink:"/docs/Development/Python/2022-10-09-python-flask-elasticsearch/2022-10-09"},next:{title:"Python - Deploying a Web App with Flask",permalink:"/docs/Development/Python/2022-10-08-python-flask-app/2022-10-08"}},l={},p=[{value:"Setup",id:"setup",level:2},{value:"Hello World",id:"hello-world",level:3},{value:"Signals",id:"signals",level:2},{value:"Working with User Inputs",id:"working-with-user-inputs",level:2},{value:"Web Scraping",id:"web-scraping",level:2},{value:"Advanced UI Elements",id:"advanced-ui-elements",level:2},{value:"Advanced Layouts",id:"advanced-layouts",level:2}],s={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Sham Sui Po, Hong Kong",src:n(81688).Z,width:"1500",height:"548"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#setup"},"Setup"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#hello-world"},"Hello World")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#signals"},"Signals")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#working-with-user-inputs"},"Working with User Inputs")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#web-scraping"},"Web Scraping")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#advanced-ui-elements"},"Advanced UI Elements")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#advanced-layouts"},"Advanced Layouts"))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/py-Qt6-app"},"Github Repository")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install PyQt6\n")),(0,a.kt)("h3",{id:"hello-world"},"Hello World"),(0,a.kt)("p",null,"Create a simple Layout in Qt6:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout\nfrom PyQt6.QtWidgets import QLabel, QPushButton, QLineEdit\n\napp = QApplication([])\nwindow = QWidget()\nwindow.setWindowTitle('PyQt6 Application')\n\nlayout = QVBoxLayout()\n\ntext = QLineEdit()\n\nlayout.addWidget(text)\n\nwindow.setLayout(layout)\nwindow.show()\napp.exec()\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Python - PyQt Desktop App",src:n(47536).Z,width:"911",height:"211"})),(0,a.kt)("h2",{id:"signals"},"Signals"),(0,a.kt)("p",null,'State is exchanged in Qt by "signals":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"def make_it_so():\n    input_text = text.text()\n    output_label.setText(input_text)\n\nbtn = QPushButton('Make it so!')\nlayout.addWidget(btn)\nbtn.clicked.connect(make_it_so)\n\noutput_label = QLabel('')\nlayout.addWidget(output_label)\n")),(0,a.kt)("p",null,"When the button is clicked it triggers a function that then pushes the state - text input - of the input field to an label widget."),(0,a.kt)("h2",{id:"working-with-user-inputs"},"Working with User Inputs"),(0,a.kt)("p",null,"Once we have the user input from our text widget we can add some functionality to it - for example turning input strings into URL-safe base64 representations:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Python - PyQt Desktop App",src:n(8127).Z,width:"955",height:"248"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout\nfrom PyQt6.QtWidgets import QLabel, QPushButton, QLineEdit\n\nimport base64\n\n# Add functions - what do you want to do with the user input\n\ndef to_base64():\n    input_text = text_encode.text()\n    encoded_bytes = base64.urlsafe_b64encode(input_text.encode("utf-8"))\n    encoded_text = str(encoded_bytes, "utf-8")\n    output_encode.setText("Encoded String: " + encoded_text)\n\ndef from_base64():\n    input_text = text_decode.text()\n    decoded_bytes = base64.urlsafe_b64decode(input_text.encode("utf-8"))\n    decoded_text = str(decoded_bytes, "utf-8")\n    output_decode.setText("Decoded String: " + decoded_text)\n\n# App scaffolding\n\napp = QApplication([])\nwindow = QWidget()\nwindow.setWindowTitle(\'base64 de/encoder\')\nlayout = QVBoxLayout()\n\n# Encode string to base64\n\ntext_encode = QLineEdit()\nlayout.addWidget(text_encode)\n\nbtn = QPushButton(\'base64 Encode\')\nlayout.addWidget(btn)\nbtn.clicked.connect(to_base64)\n\noutput_encode = QLabel(\'\')\nlayout.addWidget(output_encode)\n\n# Decode string from base64\n\ntext_decode = QLineEdit()\nlayout.addWidget(text_decode)\n\nbtn = QPushButton(\'base64 Decode\')\nlayout.addWidget(btn)\nbtn.clicked.connect(from_base64)\n\noutput_decode = QLabel(\'\')\nlayout.addWidget(output_decode)\n\n## Execute\n\nwindow.setLayout(layout)\nwindow.show()\napp.exec()\n')),(0,a.kt)("h2",{id:"web-scraping"},"Web Scraping"),(0,a.kt)("p",null,"Using Beautiful Soup to scrape information from the web."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Python - PyQt Desktop App",src:n(5660).Z,width:"850",height:"386"})),(0,a.kt)("p",null,"Calculate the price of an INSTAR camera by scraping the latest prize from the INSTAR web shop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout\nfrom PyQt6.QtWidgets import QLabel, QPushButton, QLineEdit\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef get_prize():\n    url = f'https://www.instar.com/produkte/wlan-aussenkameras-poe-ip-kameras-wetterfeste-netzwerkkameras-outdoor-uberwachungskameras/in-9408-2k-serie-wlan-uberwachungskamera-ai-objekterkennung-apple-homekit-mqtt-sftp-nachtsicht/in-9408-2k-poe-weiss-ip-kamera.html'\n    content = requests.get(url).text\n    soup = BeautifulSoup(content, 'html.parser')\n    prize = soup.find(\"span\", class_=\"price\").get_text()\n    prize_intl = prize.replace(',', '.')\n    prize_float = float(prize_intl[:-2])\n    \n    return prize_float\n\n\ndef calc_value():\n    number = float(number_input.text())\n    prize = get_prize()\n    calculated_value = str(number * prize)\n    number_output.setText(calculated_value)\n\n# App scaffolding\n\napp = QApplication([])\nwindow = QWidget()\nwindow.setWindowTitle('Price Calculator - INSTAR IN-9408 2k+')\nlayout = QVBoxLayout()\n\n# Encode string to base64\n\nnumber_input = QLineEdit()\nlayout.addWidget(number_input)\n\nbtn = QPushButton('Get Price')\nlayout.addWidget(btn)\nbtn.clicked.connect(calc_value)\n\nnumber_output = QLabel('')\nlayout.addWidget(number_output)\n\n## Execute\n\nwindow.setLayout(layout)\nwindow.show()\napp.exec()\n")),(0,a.kt)("h2",{id:"advanced-ui-elements"},"Advanced UI Elements"),(0,a.kt)("p",null,"Using Dropdown menus:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"currencies = ['USD','EUR','GBP','CNY']\n\nselect_inCurrency = QComboBox()\nselect_inCurrency.addItems(currencies)\nlayout.addWidget(select_inCurrency)\n\nselect_outCurrency = QComboBox()\nselect_outCurrency.addItems(currencies)\nlayout.addWidget(select_outCurrency)\n")),(0,a.kt)("h2",{id:"advanced-layouts"},"Advanced Layouts"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Python - PyQt Desktop App",src:n(87047).Z,width:"926",height:"341"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout\nfrom PyQt6.QtWidgets import QLabel, QPushButton, QLineEdit, QComboBox\n\nfrom bs4 import BeautifulSoup\nimport requests\n\ndef get_conversion(in_currency, out_currency):\n    url = f'https://www.x-rates.com/calculator/?from={in_currency}&to={out_currency}&amount=1'\n    content = requests.get(url).text\n    soup = BeautifulSoup(content, 'html.parser')\n    rate = soup.find(\"span\", class_=\"ccOutputRslt\").get_text()\n    rate_float = float(rate[:-4])\n\n    return rate_float\n\ndef calc_value():\n    number = float(number_input.text())\n    in_currency = select_inCurrency.currentText()\n    out_currency = select_outCurrency.currentText()\n    rate = get_conversion(in_currency, out_currency)\n    calculated_value = str(number * rate)\n    message = f'{number} {in_currency} is {calculated_value} {out_currency}'\n    number_output.setText(message)\n\n# App scaffolding\n\napp = QApplication([])\nwindow = QWidget()\nwindow.setWindowTitle('Currency Converter')\n\nlayoutMain = QVBoxLayout()\nlayoutContainer = QHBoxLayout()\nlayoutMain.addLayout(layoutContainer)\n\nlayoutLeftBox = QVBoxLayout()\nlayoutContainer.addLayout(layoutLeftBox)\nlayoutRightBox = QVBoxLayout()\nlayoutContainer.addLayout(layoutRightBox)\n\n\n# Select Currencies\n\ncurrencies = ['USD','EUR','GBP','CNY']\n\nselect_inCurrency = QComboBox()\nselect_inCurrency.addItems(currencies)\nlayoutLeftBox.addWidget(select_inCurrency)\n\nselect_outCurrency = QComboBox()\nselect_outCurrency.addItems(currencies)\nlayoutLeftBox.addWidget(select_outCurrency)\n\n# Convert to Target Currency\n\nnumber_input = QLineEdit()\nlayoutRightBox.addWidget(number_input)\n\nbtn = QPushButton('Convert')\nlayoutMain.addWidget(btn)\nbtn.clicked.connect(calc_value)\n\nnumber_output = QLabel('')\nlayoutRightBox.addWidget(number_output)\n\n## Execute\n\nwindow.setLayout(layoutMain)\nwindow.show()\napp.exec()\n")))}d.isMDXComponent=!0},47536:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/Python_PyQt6_Desktop_App_01-ef56f178092312ef49f26542b44b76d6.png"},8127:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/Python_PyQt6_Desktop_App_02-48736ef5f1c4723c3b621bc97c38bcd5.png"},5660:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/Python_PyQt6_Desktop_App_03-be5c86e7b36c20386b5f2dd662206187.png"},87047:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/Python_PyQt6_Desktop_App_04-a4e37a95913d727d83e83e84f3d54dea.png"},81688:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5f44d483789c3ce79f05418f930f5cd2.jpg"}}]);