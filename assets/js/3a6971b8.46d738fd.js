"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[19167],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(a),h=o,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||i;return a?n.createElement(u,r(r({ref:t},p),{},{components:a})):n.createElement(u,r({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},77710:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(87462),o=(a(67294),a(3905));const i={sidebar_position:4950,slug:"2022-12-11",title:"Breast Histopathology Image Segmentation Part 4",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Train our model to fit the dataset"},r=void 0,l={unversionedId:"IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part4/index",id:"IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part4/index",title:"Breast Histopathology Image Segmentation Part 4",description:"Train our model to fit the dataset",source:"@site/docs/IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part4/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part4",slug:"/IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part4/2022-12-11",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part4/2022-12-11",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part4/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:4950,frontMatter:{sidebar_position:4950,slug:"2022-12-11",title:"Breast Histopathology Image Segmentation Part 4",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"Train our model to fit the dataset"},sidebar:"tutorialSidebar",previous:{title:"Breast Histopathology Image Segmentation Part 5",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-12-12-tf-breast-cancer-classification-part5/2022-12-12"},next:{title:"Breast Histopathology Image Segmentation Part 3",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part3/2022-12-11"}},s={},c=[{value:"Model Compilation",id:"model-compilation",level:2},{value:"ResNet50 Model",id:"resnet50-model",level:3},{value:"Custom CNN Model",id:"custom-cnn-model",level:3},{value:"Model Checkpoints",id:"model-checkpoints",level:2},{value:"Model Fitting",id:"model-fitting",level:2},{value:"ResNet50 Model",id:"resnet50-model-1",level:3},{value:"Custom Model",id:"custom-model",level:3}],p={toc:c};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Guangzhou, China",src:a(98683).Z,width:"1500",height:"383"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2022-12-10-tf-breast-cancer-classification-part1/2022-12-10"},"Part 1: Data Inspection and Pre-processing")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part2/2022-12-11"},"Part 2: Weights, Data Augmentations and Generators")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part3/2022-12-11"},"Part 3: Model creation based on a pre-trained and a custom model")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2022-12-11-tf-breast-cancer-classification-part4/2022-12-11"},"Part 4: Train our model to fit the dataset")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2022-12-12-tf-breast-cancer-classification-part5/2022-12-12"},"Part 5: Evaluate the performance of your trained model")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2022-12-12-tf-breast-cancer-classification-part6/2022-12-12"},"Part 6: Running Predictions"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/tf-bc-classification"},"Github"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#model-compilation"},"Model Compilation"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#resnet50-model"},"ResNet50 Model")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#custom-cnn-model"},"Custom CNN Model")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#model-checkpoints"},"Model Checkpoints")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#model-fitting"},"Model Fitting"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#resnet50-model-1"},"ResNet50 Model")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#custom-model"},"Custom Model"))))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Based on ",(0,o.kt)("a",{parentName:"p",href:"https://www.kaggle.com/datasets/paultimothymooney/breast-histopathology-images"},"Breast Histopathology Images")," by ",(0,o.kt)("a",{parentName:"p",href:"https://www.kaggle.com/paultimothymooney"},"Paul Mooney"),".\n",(0,o.kt)("inlineCode",{parentName:"p"},"Invasive Ductal Carcinoma (IDC) is the most common subtype of all breast cancers. To assign an aggressiveness grade to a whole mount sample, pathologists typically focus on the regions which contain the IDC. As a result, one of the common pre-processing steps for automatic aggressiveness grading is to delineate the exact regions of IDC inside of a whole mount slide."),"\n",(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/8XsiMQQ-4mM"},"Can recurring breast cancer be spotted with AI tech? - BBC News"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Citation: ",(0,o.kt)("a",{parentName:"li",href:"https://pubmed.ncbi.nlm.nih.gov/27563488/"},"Deep learning for digital pathology image analysis: A comprehensive tutorial with selected use cases")),(0,o.kt)("li",{parentName:"ul"},"Dataset: 198,738 IDC(negative) image patches; 78,786 IDC(positive) image patches")),(0,o.kt)("h2",{id:"model-compilation"},"Model Compilation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Optimizer"),": An optimizer is a function that modifies e.g. weights and learning rates to help minimizing the loss function with each epoch. The default optimizer to use is ",(0,o.kt)("strong",{parentName:"li"},"Adam")," (",(0,o.kt)("em",{parentName:"li"},"Adaptive Moment Estimation"),"). "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Loss Function"),": A loss function is a method to evaluate how well an algorithm models a given dataset. If predictions deviate too much from actual results it will return a large number. The goal of learning epochs is it to minimize the outcome of the selected loss function. The ",(0,o.kt)("strong",{parentName:"li"},"Binary Cross-Entropy")," function compares the predicted probabilities to the actual class - ",(0,o.kt)("inlineCode",{parentName:"li"},"0")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"1"),". Which in our case is either ",(0,o.kt)("inlineCode",{parentName:"li"},"benign")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"malignant"),".")),(0,o.kt)("h3",{id:"resnet50-model"},"ResNet50 Model"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"./train","_","ResNet50","_","32","_","20k.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'# Compiling the model\n## Decay updates the learning rate by a decreasing factor in each epoch\nprint("Compiling model")\nopt = Adam(learning_rate=config.INIT_LR, decay=config.INIT_LR / config.EPOCHS)\nmodel.compile(loss="binary_crossentropy", optimizer=opt, metrics=["accuracy"])\n')),(0,o.kt)("h3",{id:"custom-cnn-model"},"Custom CNN Model"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"./train","_","CustomModel","_","32","_","conv","_","20k.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'# Compiling the model\n## Decay updates the learning rate by a decreasing factor in each epoch\nprint("Compiling the model")\nopt = Adam(learning_rate=config.INIT_LR, decay=config.INIT_LR / config.EPOCHS)\nmodel.compile(loss="binary_crossentropy", optimizer=opt, metrics=["accuracy"])\n')),(0,o.kt)("h2",{id:"model-checkpoints"},"Model Checkpoints"),(0,o.kt)("p",null,"Model checkpoints are callbacks to save the Keras model or model weights in a given interval. Those can be loaded later to continue the training from this saved state. Configuration options are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Save all epoch checkpoints or only hold on to the latest best result."),(0,o.kt)("li",{parentName:"ul"},"Save after each epoch or only after a fixed number of training batches"),(0,o.kt)("li",{parentName:"ul"},"Save the entire model or only it's weights")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"./train","_","ResNet50","_","32","_","20k.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'# Using ModelCheckpoint to store the best performing model based on val_loss\nMCName = os.path.sep.join([config.OUTPUT_PATH, "resnet50_weights-{epoch:03d}-{val_loss:.4f}.hdf5"])\ncheckpoint = ModelCheckpoint(MCName, monitor="val_loss", mode="min", save_best_only=True, verbose=1)\ncallbacks = [checkpoint]\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"./train","_","CustomModel","_","32","_","conv","_","20k.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'# Using ModelCheckpoint to store the best performing model based on val_loss\nMCName = os.path.sep.join([config.OUTPUT_PATH, "custom_weights-{epoch:03d}-{val_loss:.4f}.hdf5"])\ncheckpoint = ModelCheckpoint(MCName, monitor="val_loss", mode="min", save_best_only=True, verbose=1)\ncallbacks = [checkpoint]\n')),(0,o.kt)("h2",{id:"model-fitting"},"Model Fitting"),(0,o.kt)("p",null,"An ",(0,o.kt)("strong",{parentName:"p"},"Epoch")," refers to the number of passes the algorithm has made over the entire training dataset. The dataset is divided into small portions and not processed all at once. The amount of samples passing through the neural net at the same time is the ",(0,o.kt)("strong",{parentName:"p"},"Batch Size"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"./train","_","ResNet50","_","32","_","20k.py"),"\n",(0,o.kt)("em",{parentName:"p"},"./train","_","CustomModel","_","32","_","conv","_","20k.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'# Fitting the model on training data\nprint("Model Fitting")\nMF = model.fit(\n    x=trainGen,\n    steps_per_epoch=totalTrain // config.BATCH_SIZE,\n    validation_data=valGen,\n    validation_steps=totalVal // config.BATCH_SIZE,\n    class_weight=classWeight,\n    callbacks=callbacks,\n    epochs=config.EPOCHS)\n')),(0,o.kt)("h3",{id:"resnet50-model-1"},"ResNet50 Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pipenv run python ./train_ResNet50_32_20k.py\n")),(0,o.kt)("p",null,"I kept the training running over night. But already after 25 epochs I could not see any improvements:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Epoch 25/60\n6243/6244 [============================>.] - ETA: 0s - loss: 0.9039 - accuracy: 0.6454\nEpoch 25: val_loss improved from 0.63957 to 0.63328, saving model to ./output/weights-025-0.6333.hdf5\n6244/6244 [==============================] - 215s 34ms/step - loss: 0.9039 - accuracy: 0.6454 - val_loss: 0.6333 - val_accuracy: 0.6313\n")),(0,o.kt)("p",null,"Hmm that is interesting - I am coding along someone elses solution and I can see that my loss is a lot higher even though we are using the same data and augmentations - this training already reached a minimum after the 10th epoch:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Epoch 10: val_loss did not improve from 0.39576\n7995/7995 [==============================] - 410s 51ms/step - loss: 0.5612 - accuracy: 0.8289 - val_loss: 0.4257 - val_accuracy: 0.8085\n")),(0,o.kt)("h3",{id:"custom-model"},"Custom Model"),(0,o.kt)("p",null,"I now limit the number of epochs for the custom model to 10:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pipenv run python ./train_CustomModel_32_conv_20k.ipynb\n")),(0,o.kt)("p",null,"And given that most of the epochs before the last still showed an improvement - i assume that this is not yet the minimum:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Epoch 10/10\n6243/6244 [============================>.] - ETA: 0s - loss: 0.5423 - accuracy: 0.8398  \nEpoch 10: val_loss did not improve from 0.42444\n6244/6244 [==============================] - 223s 36ms/step - loss: 0.5423 - accuracy: 0.8398 - val_loss: 0.4738 - val_accuracy: 0.8039\n")))}m.isMDXComponent=!0},98683:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-918471126c0472aad97358a725e1a399.jpg"}}]);