"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[5362],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),g=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=g(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=g(a),d=r,h=u["".concat(l,".").concat(d)]||u[d]||p[d]||s;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var g=2;g<s;g++)i[g]=a[g];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},61731:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>g});var n=a(87462),r=(a(67294),a(3905));const s={sidebar_position:8050,slug:"2021-03-27",title:"Elasticsearch 7 Aggregations",authors:"mpolinowski",tags:["LINUX","Elasticsearch"]},i=void 0,o={unversionedId:"DevOps/Elasticsearch/2021-03-27-elasticsearch7-aggregations/index",id:"DevOps/Elasticsearch/2021-03-27-elasticsearch7-aggregations/index",title:"Elasticsearch 7 Aggregations",description:"Abashiri, Japan",source:"@site/docs/DevOps/Elasticsearch/2021-03-27-elasticsearch7-aggregations/index.md",sourceDirName:"DevOps/Elasticsearch/2021-03-27-elasticsearch7-aggregations",slug:"/DevOps/Elasticsearch/2021-03-27-elasticsearch7-aggregations/2021-03-27",permalink:"/docs/DevOps/Elasticsearch/2021-03-27-elasticsearch7-aggregations/2021-03-27",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Elasticsearch/2021-03-27-elasticsearch7-aggregations/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Elasticsearch",permalink:"/docs/tags/elasticsearch"}],version:"current",sidebarPosition:8050,frontMatter:{sidebar_position:8050,slug:"2021-03-27",title:"Elasticsearch 7 Aggregations",authors:"mpolinowski",tags:["LINUX","Elasticsearch"]},sidebar:"tutorialSidebar",previous:{title:"Elasticsearch 7 Timeseries",permalink:"/docs/DevOps/Elasticsearch/2021-03-28-elasticsearch7-timeseries/2021-03-28"},next:{title:"Elasticsearch 7 to log Linux System Events",permalink:"/docs/DevOps/Elasticsearch/2021-03-26-elasticsearch7-for-syslog-messages/2021-03-26"}},l={},g=[{value:"Run an Aggregation",id:"run-an-aggregation",level:2},{value:"TV Ratings Example",id:"tv-ratings-example",level:3},{value:"What is the Rating Distribution for Season 01 ?",id:"what-is-the-rating-distribution-for-season-01-",level:4},{value:"How many 8 Star Ratings did Season 01 get ?",id:"how-many-8-star-ratings-did-season-01-get-",level:4},{value:"What is the Average Rating of all Episodes in Season 01",id:"what-is-the-average-rating-of-all-episodes-in-season-01",level:4},{value:"Display Ratings by 1.0 Intervals",id:"display-ratings-by-10-intervals",level:4}],c={toc:g};function p(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Abashiri, Japan",src:a(85285).Z,width:"1500",height:"501"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#run-an-aggregation"},"Run an Aggregation"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#tv-ratings-example"},"TV Ratings Example"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-is-the-rating-distribution-for-season-01-"},"What is the Rating Distribution for Season 01 ?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#how-many-8-star-ratings-did-season-01-get-"},"How many 8 Star Ratings did Season 01 get ?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#what-is-the-average-rating-of-all-episodes-in-season-01"},"What is the Average Rating of all Episodes in Season 01")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#display-ratings-by-10-intervals"},"Display Ratings by 1.0 Intervals"))))))),(0,r.kt)("p",null,"An aggregation summarizes your data as metrics, statistics, or other analytics. Aggregations help you answer questions like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"What\u2019s the average load time for my website?"),(0,r.kt)("li",{parentName:"ul"},"Who are my most valuable customers based on transaction volume?"),(0,r.kt)("li",{parentName:"ul"},"What would be considered a large file on my network?"),(0,r.kt)("li",{parentName:"ul"},"How many products are in each product category?")),(0,r.kt)("p",null,"Elasticsearch organizes aggregations into three categories:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics.html"},"Metric")," aggregations that calculate metrics, such as a sum or average, from field values."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket.html"},"Bucket")," aggregations that group documents into buckets, also called bins, based on field values, ranges, or other criteria."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html"},"Pipeline")," aggregations that take input from other aggregations instead of documents or fields.")),(0,r.kt)("h2",{id:"run-an-aggregation"},"Run an Aggregation"),(0,r.kt)("p",null,"You can run aggregations as part of a search by specifying the search API's aggs parameter. The following search runs a terms aggregation on ",(0,r.kt)("inlineCode",{parentName:"p"},"my-field")," - e.g. product rating:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'GET /my-index/_search\n{\n  "aggs": {\n    "my-agg-name": {\n      "terms": {\n        "field": "rating"\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Aggregation results are in the response\u2019s aggregations object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"aggregations": {\n    "my-agg-name": {                           \n      "doc_count_error_upper_bound": 0,\n      "sum_other_doc_count": 0,\n      "buckets": []\n    }\n  }\n')),(0,r.kt)("p",null,"You can also filter your results. For example, what is the average rating for a single product:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl -XGET \'127.0.0.1:9200/ratings/_search?size=0&pretty\' -d\n\'{\n  "query": {\n    "match": {\n      "title": "My Product Title"\n    }\n  },\n  "aggs": {\n    "my-agg-name": {\n      "terms": {\n        "field": "rating"\n      }\n    }\n  }\n}\'\n')),(0,r.kt)("h3",{id:"tv-ratings-example"},"TV Ratings Example"),(0,r.kt)("p",null,"As an example I am going to use my ",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Elasticsearch/2021-03-20-elasticsearch-7-refresher/2021-03-20#relationships"},"The Expanse TV Series Index")," that has a ",(0,r.kt)("inlineCode",{parentName:"p"},"imdb_rating")," field that I can run an aggregation query against. There we joint a couple of episodes that all belonged to season 01 of this show and we were able to query all of them with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'GET /the-expanse/_search\n{\n  "query": {\n    "has_parent": {\n      "parent_type": "season",\n      "query": {\n          "match": {\n              "title": "Season 01"\n          }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Elasticsearch 7 Aggregations",src:a(17928).Z,width:"1491",height:"711"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"Text fields are not optimised for operations that require per-document field data like aggregations and sorting, so these operations are disabled by default. Please use a keyword field instead. Alternatively, set fielddata=true on [imdb-rating] in order to load field data by uninverting the inverted index. Note that this can use significant memory."))),(0,r.kt)("p",null,"I was receiving the error message above at first before I did not add mapping types to this index. Which meant that the ",(0,r.kt)("inlineCode",{parentName:"p"},"imdb-rating")," field was mapped as text. I fixed this in the original article linked above and was now able to run the aggregation:"),(0,r.kt)("h4",{id:"what-is-the-rating-distribution-for-season-01-"},"What is the Rating Distribution for Season 01 ?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl -H "Content-Type: application/json" -XGET \'localhost:9200/the-expanse/_search?size=0&pretty\' -d\'\n{\n  "query": {\n    "has_parent": {\n      "parent_type": "season",\n      "query": {\n          "match": {\n              "title": "Season 01"\n          }\n      }\n    }\n  },\n  "aggs": {\n    "imdb-ratings": {\n      "terms": {\n        "field": "imdb-rating"\n      }\n    }\n  }\n}\'\n')),(0,r.kt)("p",null,"I set the ",(0,r.kt)("inlineCode",{parentName:"p"},"imdb_rating")," type to ",(0,r.kt)("inlineCode",{parentName:"p"},"float")," which gave me those results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"aggregations" : {\n    "imdb-ratings" : {\n      "doc_count_error_upper_bound" : 0,\n      "sum_other_doc_count" : 0,\n      "buckets" : [\n        {\n          "key" : 8.699999809265137,\n          "doc_count" : 4\n        },\n        {\n          "key" : 7.699999809265137,\n          "doc_count" : 2\n        },\n        {\n          "key" : 8.0,\n          "doc_count" : 2\n        },\n        {\n          "key" : 7.800000190734863,\n          "doc_count" : 1\n        },\n        {\n          "key" : 7.900000095367432,\n          "doc_count" : 1\n        }\n      ]\n    }\n  }\n')),(0,r.kt)("p",null,"It is obviously better to use ",(0,r.kt)("inlineCode",{parentName:"p"},'"type": "integer"')," (as an alternative see ",(0,r.kt)("a",{parentName:"p",href:"#display-ratings-by-10-intervals"},"Histograms")," below!) for the ",(0,r.kt)("inlineCode",{parentName:"p"},"imdb_rating")," which rounds things up to 6 times ",(0,r.kt)("strong",{parentName:"p"},"8 Star")," and 4 times ",(0,r.kt)("strong",{parentName:"p"},"7 Star")," rating for ",(0,r.kt)("strong",{parentName:"p"},"Season 01")," of the expanse:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"aggregations" : {\n    "average-rating" : {\n      "doc_count_error_upper_bound" : 0,\n      "sum_other_doc_count" : 0,\n      "buckets" : [\n        {\n          "key" : 8,\n          "doc_count" : 6\n        },\n        {\n          "key" : 7,\n          "doc_count" : 4\n        }\n      ]\n    }\n  }\n')),(0,r.kt)("h4",{id:"how-many-8-star-ratings-did-season-01-get-"},"How many 8 Star Ratings did Season 01 get ?"),(0,r.kt)("p",null,"This time we just need to filter for ",(0,r.kt)("inlineCode",{parentName:"p"},"imdb-rating"),"'s with an integer value of ",(0,r.kt)("inlineCode",{parentName:"p"},"8"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl -H "Content-Type: application/json" -XGET \'localhost:9200/the-expanse/_search?size=0&pretty\' -d\'\n{\n  "query": {\n    "match": {\n      "imdb-rating": 8\n    }\n  },\n  "aggs": {\n    "imdb-ratings": {\n      "terms": {\n        "field": "imdb-rating"\n      }\n    }\n  }\n}\'\n')),(0,r.kt)("p",null,"And we will get the expected result - 6 episodes of season 01 of The Expanse had a rounded up IMDB rating of ",(0,r.kt)("inlineCode",{parentName:"p"},"8"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"aggregations" : {\n    "imdb-ratings" : {\n      "doc_count_error_upper_bound" : 0,\n      "sum_other_doc_count" : 0,\n      "buckets" : [\n        {\n          "key" : 8,\n          "doc_count" : 6\n        }\n      ]\n    }\n  }\n')),(0,r.kt)("h4",{id:"what-is-the-average-rating-of-all-episodes-in-season-01"},"What is the Average Rating of all Episodes in Season 01"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl -H "Content-Type: application/json" -XGET \'localhost:9200/the-expanse/_search?size=0&pretty\' -d\'\n{\n  "query": {\n    "has_parent": {\n      "parent_type": "season",\n      "query": {\n          "match": {\n              "title": "Season 01"\n          }\n      }\n    }\n  },\n  "aggs": {\n    "average-ratings": {\n      "avg": {\n        "field": "imdb-rating"\n      }\n    }\n  }\n}\'\n')),(0,r.kt)("p",null,"The average rating for season 01 of The Expanse is ",(0,r.kt)("inlineCode",{parentName:"p"},"7.6"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"aggregations" : {\n    "average-ratings" : {\n      "value" : 7.6\n    }\n  }\n')),(0,r.kt)("h4",{id:"display-ratings-by-10-intervals"},"Display Ratings by 1.0 Intervals"),(0,r.kt)("p",null,"Before I ran into the issue that I set the type of my ratings to ",(0,r.kt)("inlineCode",{parentName:"p"},"float")," - instead of re-indexing the data with ",(0,r.kt)("inlineCode",{parentName:"p"},"integer")," ratings I could have also have used the ",(0,r.kt)("strong",{parentName:"p"},"Histogram")," function that Elasticsearch provides for aggregations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl -H "Content-Type: application/json" -XGET \'localhost:9200/the-expanse/_search?size=0&pretty\' -d\'\n{\n  "aggs": {\n    "whole-ratings": {\n      "histogram": {\n        "field": "imdb-rating",\n        "interval": 1.0\n      }\n    }\n  }\n}\'\n')),(0,r.kt)("p",null,"Even with the ratings set to ",(0,r.kt)("inlineCode",{parentName:"p"},"float")," I now get my data nicely formatted and ready to be used for a histogram visualisation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"aggregations" : {\n    "whole-ratings" : {\n      "buckets" : [\n        {\n          "key" : 7.0,\n          "doc_count" : 4\n        },\n        {\n          "key" : 8.0,\n          "doc_count" : 6\n        }\n      ]\n    }\n  }\n')))}p.isMDXComponent=!0},17928:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Elasticsearch_7_Aggregations_01-f0230eae4c98397314f2d4ed48c2aa66.png"},85285:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-88a2f99c39ff778b07d59e7597b9c8e7.jpg"}}]);