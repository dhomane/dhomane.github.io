"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[89062],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=l(t),d=o,f=u["".concat(i,".").concat(d)]||u[d]||p[d]||a;return t?r.createElement(f,s(s({ref:n},m),{},{components:t})):r.createElement(f,s({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=u;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},58619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:9060,slug:"2020-12-26",title:"Tomcat 10 Cluster with individual Node Server",authors:"mpolinowski",tags:["LINUX","Tomcat","Docker"]},s=void 0,c={unversionedId:"DevOps/Tomcat/2020-12-26-tomcat10-cluster-with-individual-nodes/index",id:"DevOps/Tomcat/2020-12-26-tomcat10-cluster-with-individual-nodes/index",title:"Tomcat 10 Cluster with individual Node Server",description:"Siem Reap, Cambodia",source:"@site/docs/DevOps/Tomcat/2020-12-26-tomcat10-cluster-with-individual-nodes/index.md",sourceDirName:"DevOps/Tomcat/2020-12-26-tomcat10-cluster-with-individual-nodes",slug:"/DevOps/Tomcat/2020-12-26-tomcat10-cluster-with-individual-nodes/2020-12-26",permalink:"/docs/DevOps/Tomcat/2020-12-26-tomcat10-cluster-with-individual-nodes/2020-12-26",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Tomcat/2020-12-26-tomcat10-cluster-with-individual-nodes/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Tomcat",permalink:"/docs/tags/tomcat"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:9060,frontMatter:{sidebar_position:9060,slug:"2020-12-26",title:"Tomcat 10 Cluster with individual Node Server",authors:"mpolinowski",tags:["LINUX","Tomcat","Docker"]},sidebar:"tutorialSidebar",previous:{title:"Tomcat",permalink:"/docs/category/tomcat"},next:{title:"Tomcat 10 Docker Cluster",permalink:"/docs/DevOps/Tomcat/2020-12-25-tomcat10-docker-cluster/2020-12-25"}},i={},l=[{value:"Setting up Minion and Master Nodes with Docker-Compose",id:"setting-up-minion-and-master-nodes-with-docker-compose",level:2},{value:"NGINX Configuration",id:"nginx-configuration",level:3},{value:"default.conf",id:"defaultconf",level:4},{value:"nginx.conf",id:"nginxconf",level:4}],m={toc:l};function p(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Siem Reap, Cambodia",src:t(88838).Z,width:"1500",height:"706"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#setting-up-minion-and-master-nodes-with-docker-compose"},"Setting up Minion and Master Nodes with Docker-Compose"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#nginx-configuration"},"NGINX Configuration"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#defaultconf"},"default.conf")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#nginxconf"},"nginx.conf"))))))),(0,o.kt)("h2",{id:"setting-up-minion-and-master-nodes-with-docker-compose"},"Setting up Minion and Master Nodes with Docker-Compose"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"docker-compose.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.8"\nservices:\n\n  tomcatOne:\n    container_name: tomcatOne\n    image: tomcat:10-jdk11-corretto\n    networks:\n        - gateway\n    restart: unless-stopped\n    networks:\n        gateway:\n            ipv4_address: 172.25.0.10\n\n    volumes:\n    - /opt/tomcat/docker/cluster/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml\n    - /opt/tomcat/docker/cluster/tomcat/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml\n    - /opt/tomcat/docker/cluster/tomcat/webapps/ROOT_01:/usr/local/tomcat/webapps/ROOT\n\n  tomcatTwo:\n    container_name: tomcatTwo\n    image: tomcat:10-jdk11-corretto\n    networks:\n        - gateway\n    restart: unless-stopped\n    networks:\n        gateway:\n            ipv4_address: 172.25.0.20\n    volumes:\n    - /opt/tomcat/docker/cluster/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml\n    - /opt/tomcat/docker/cluster/tomcat/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml\n    - /opt/tomcat/docker/cluster/tomcat/webapps/ROOT_02:/usr/local/tomcat/webapps/ROOT\n\n  tomcatThree:\n    container_name: tomcatThree\n    image: tomcat:10-jdk11-corretto\n    networks:\n        - gateway\n    restart: unless-stopped\n    networks:\n        gateway:\n            ipv4_address: 172.25.0.30\n    volumes:\n    - /opt/tomcat/docker/cluster/tomcat/conf/server.xml:/usr/local/tomcat/conf/server.xml\n    - /opt/tomcat/docker/cluster/tomcat/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml\n    - /opt/tomcat/docker/cluster/tomcat/webapps/ROOT_03:/usr/local/tomcat/webapps/ROOT\n\n  ingress:\n    image: nginx:stable-alpine\n    container_name: ingress\n    networks:\n        gateway:\n            ipv4_address: 172.25.0.5\n    ports:\n        - "192.168.2.111:443:443"\n    restart: unless-stopped\n    volumes:\n    - /opt/tomcat/docker/cluster/nginx/conf.d:/etc/nginx/conf.d\n    - /opt/tomcat/docker/cluster/nginx/ssl:/etc/nginx/ssl\n    - /opt/tomcat/docker/cluster/nginx/nginx.conf:/etc/nginx/nginx.conf\n    depends_on:\n        - tomcatOne\n        - tomcatTwo\n        - tomcatThree\n\nnetworks:\n  gateway:\n    ipam:\n      config:\n        - subnet: 172.25.0.0/24\n')),(0,o.kt)("h3",{id:"nginx-configuration"},"NGINX Configuration"),(0,o.kt)("h4",{id:"defaultconf"},"default.conf"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Master / Minion1")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cfg"},"##########################################################################\n########################## Cluster Ingress ###############################\n##########################################################################\n\n\nserver {\n    listen 80;\n    listen [::]:80;\n\n    server_name virtual-host1.com;\n\n    return 301 https://$server_name$request_uri;\n}\n\n\nupstream cluster_nodes {\n    server virtual-host2.com:443;\n    server virtual-host3.com:443;\n}\n\nserver {\n    listen      443 ssl http2 default_server;\n    listen      [::]:443 ssl http2;\n    include     conf.d/self-signed.conf;\n    include     conf.d/ssl-params.conf;\n    include     conf.d/header.conf;\n\n    server_name virtual-host1.com;\n\n    location = / {\n        proxy_pass http://cluster_nodes;\n    }\n\n    error_page  404              /404.html;\n    error_page  500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n\n\n##########################################################################\n########################## Tomcat Servlet 1 ##############################\n##########################################################################\n\n\nserver {\n    listen 80;\n\n    server_name virtual-host2.com;\n\n    return 301 https://$server_name$request_uri;\n}\n\n\nupstream tc_servlets {\n    server tomcatOne:8080;\n    server tomcatTwo:8080;\n    server tomcatThree:8080;\n}\n\nserver {\n    listen      443 ssl http2;\n    include     conf.d/self-signed.conf;\n    include     conf.d/ssl-params.conf;\n    include     conf.d/header.conf;\n\n    server_name virtual-host2.com;\n\n    location = / {\n        proxy_pass http://tc_servlets;\n    }\n\n    error_page  404              /404.html;\n    error_page  500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Minion2")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cfg"},"##########################################################################\n########################## Tomcat Servlet 2 ##############################\n##########################################################################\n\n\nserver {\n    listen 80;\n\n    server_name virtual-host3.com;\n\n    return 301 https://$server_name$request_uri;\n}\n\n\nupstream tc_servlets {\n    server tomcatOne:8080;\n    server tomcatTwo:8080;\n    server tomcatThree:8080;\n}\n\nserver {\n    listen      443 ssl http2;\n    include     conf.d/self-signed.conf;\n    include     conf.d/ssl-params.conf;\n    include     conf.d/header.conf;\n\n    server_name virtual-host3.com;\n\n    location = / {\n        proxy_pass http://tc_servlets;\n    }\n\n    error_page  404              /404.html;\n    error_page  500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n")),(0,o.kt)("h4",{id:"nginxconf"},"nginx.conf"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cfg"},"user  nginx;\nworker_processes  auto;\nworker_rlimit_nofile  15000;\npid  /var/run/nginx.pid;\ninclude /usr/share/nginx/modules/*.conf;\n\n\nevents {\n    worker_connections  2048;\n    multi_accept on;\n    use epoll;\n}\n\n\nhttp {\n    default_type   application/octet-stream;\n    # access_log   /var/log/nginx/access.log;\n    # activate the server access log only when needed\n    access_log     off;\n    error_log      /var/log/nginx/error.log;\n    # don't display server version on error pages\n    server_tokens  off;\n    server_names_hash_bucket_size 64;\n    include        /etc/nginx/mime.types;\n    sendfile       on;\n    tcp_nopush     on;\n    tcp_nodelay    on;\n\n    charset utf-8;\n    source_charset utf-8;\n    charset_types text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml;\n\n    include /etc/nginx/conf.d/default.conf;\n    include /etc/nginx/conf.d/buffers.conf;\n    include /etc/nginx/conf.d/timeouts.conf;\n    # Only activate caching in production\n    # include /etc/nginx/conf.d/cache.conf;\n    include /etc/nginx/conf.d/gzip.conf;\n}\n")),(0,o.kt)("p",null,"I forwarded the Tomcat service on port ",(0,o.kt)("inlineCode",{parentName:"p"},"443")," so I can now access the sample app under:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"https://<My-Server>:443/sample/\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Tomcat 10 Docker Cluster",src:t(23441).Z,width:"785",height:"202"})),(0,o.kt)("p",null,"Repeat these steps on all your minion servers."))}p.isMDXComponent=!0},88838:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-dbec03b1535301c8b293ac3087af0dd4.jpg"},23441:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/tomcat10-docker-cluster_01-b5f7c91a1cd0a3ac4c0e5207cd3b73ed.gif"}}]);