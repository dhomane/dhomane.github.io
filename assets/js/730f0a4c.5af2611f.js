"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[37224],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>m});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=t.createContext({}),d=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},p=function(e){var a=d(e.components);return t.createElement(o.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,k=c["".concat(o,".").concat(m)]||c[m]||u[m]||s;return n?t.createElement(k,l(l({ref:a},p),{},{components:n})):t.createElement(k,l({ref:a},p))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=c;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<s;d++)l[d]=n[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},60969:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=n(87462),r=(n(67294),n(3905));const s={sidebar_position:8070,slug:"2022-11-19",title:"Kubernetes Beyond the Edge",tags:["LINUX","Docker","Kubernetes"],description:"Installing K3S on Air-Gapped Bare-Metal Server"},l=void 0,i={unversionedId:"DevOps/Kubernetes/2022-11-19--k3s-air-gapped-kubernetes/index",id:"DevOps/Kubernetes/2022-11-19--k3s-air-gapped-kubernetes/index",title:"Kubernetes Beyond the Edge",description:"Installing K3S on Air-Gapped Bare-Metal Server",source:"@site/docs/DevOps/Kubernetes/2022-11-19--k3s-air-gapped-kubernetes/index.md",sourceDirName:"DevOps/Kubernetes/2022-11-19--k3s-air-gapped-kubernetes",slug:"/DevOps/Kubernetes/2022-11-19--k3s-air-gapped-kubernetes/2022-11-19",permalink:"/docs/DevOps/Kubernetes/2022-11-19--k3s-air-gapped-kubernetes/2022-11-19",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Kubernetes/2022-11-19--k3s-air-gapped-kubernetes/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Docker",permalink:"/docs/tags/docker"},{label:"Kubernetes",permalink:"/docs/tags/kubernetes"}],version:"current",sidebarPosition:8070,frontMatter:{sidebar_position:8070,slug:"2022-11-19",title:"Kubernetes Beyond the Edge",tags:["LINUX","Docker","Kubernetes"],description:"Installing K3S on Air-Gapped Bare-Metal Server"},sidebar:"tutorialSidebar",previous:{title:"Kubernetes",permalink:"/docs/category/kubernetes"},next:{title:"Setting up an OKD Cluster",permalink:"/docs/DevOps/Kubernetes/2019-03-05--first-openshift3-cluster/2019-03-05"}},o={},d=[{value:"K3s",id:"k3s",level:2},{value:"Manually Deploy Images and Binary",id:"manually-deploy-images-and-binary",level:2},{value:"Prepare the Images Directory and K3s Binary",id:"prepare-the-images-directory-and-k3s-binary",level:3},{value:"Prepare the K3s Binary",id:"prepare-the-k3s-binary",level:3},{value:"Installing K3s in an Air-Gapped Environment",id:"installing-k3s-in-an-air-gapped-environment",level:2},{value:"Kubernetes Dashboard",id:"kubernetes-dashboard",level:2},{value:"Deploying the Kubernetes Dashboard",id:"deploying-the-kubernetes-dashboard",level:3},{value:"Dashboard RBAC Configuration",id:"dashboard-rbac-configuration",level:3},{value:"Obtain the Bearer Token",id:"obtain-the-bearer-token",level:4},{value:"Local Access to the Dashboard",id:"local-access-to-the-dashboard",level:2},{value:"Run a Stateless Application Using a Deployment",id:"run-a-stateless-application-using-a-deployment",level:2},{value:"Uninstalling K3s",id:"uninstalling-k3s",level:2}],p={toc:d};function u(e){let{components:a,...s}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,s,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Harbin, China",src:n(28183).Z,width:"1500",height:"821"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#k3s"},"K3s")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#manually-deploy-images-and-binary"},"Manually Deploy Images and Binary"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prepare-the-images-directory-and-k3s-binary"},"Prepare the Images Directory and K3s Binary")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#prepare-the-k3s-binary"},"Prepare the K3s Binary")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installing-k3s-in-an-air-gapped-environment"},"Installing K3s in an Air-Gapped Environment")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#kubernetes-dashboard"},"Kubernetes Dashboard"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#deploying-the-kubernetes-dashboard"},"Deploying the Kubernetes Dashboard")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dashboard-rbac-configuration"},"Dashboard RBAC Configuration"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#obtain-the-bearer-token"},"Obtain the Bearer Token")))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#local-access-to-the-dashboard"},"Local Access to the Dashboard")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#run-a-stateless-application-using-a-deployment"},"Run a Stateless Application Using a Deployment")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#uninstalling-k3s"},"Uninstalling K3s"))),(0,r.kt)("h2",{id:"k3s"},"K3s"),(0,r.kt)("p",null,"K3S - the lightweight Kubernetes. Production ready, easy to install, half the memory, all in a binary less than 100 MB. Used for Edge, IoT, CI, Development, ARM, Embedding k8s and situations where a PhD in k8s clusterology is infeasible"),(0,r.kt)("p",null,"You can install ",(0,r.kt)("a",{parentName:"p",href:"https://docs.k3s.io/"},"K3s")," in an air-gapped environment using two different methods. An air-gapped environment is any environment that is not directly connected to the Internet. You can either deploy a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/registry/deploying/#run-an-externally-accessible-registry"},"private registry")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.k3s.io/installation/private-registry"},"mirror docker.io"),", or you can manually deploy images such as for small clusters."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Embedded Component Versions")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Component"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Kubernetes"),(0,r.kt)("td",{parentName:"tr",align:null},"v1.25.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Kine"),(0,r.kt)("td",{parentName:"tr",align:null},"v0.9.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SQLite"),(0,r.kt)("td",{parentName:"tr",align:null},"3.36.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Etcd"),(0,r.kt)("td",{parentName:"tr",align:null},"v3.5.3-k3s1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Containerd"),(0,r.kt)("td",{parentName:"tr",align:null},"v1.6.8-k3s1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Runc"),(0,r.kt)("td",{parentName:"tr",align:null},"v1.1.4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Flannel"),(0,r.kt)("td",{parentName:"tr",align:null},"v0.19.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Metrics-server"),(0,r.kt)("td",{parentName:"tr",align:null},"v0.6.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Traefik"),(0,r.kt)("td",{parentName:"tr",align:null},"v2.9.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CoreDNS"),(0,r.kt)("td",{parentName:"tr",align:null},"v1.9.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Helm-controller"),(0,r.kt)("td",{parentName:"tr",align:null},"v0.12.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Local-path-provisioner"),(0,r.kt)("td",{parentName:"tr",align:null},"v0.0.21")))),(0,r.kt)("h2",{id:"manually-deploy-images-and-binary"},"Manually Deploy Images and Binary"),(0,r.kt)("p",null,"This method requires you to manually deploy the necessary images to each node and is appropriate for edge deployments where running a private registry is not practical."),(0,r.kt)("h3",{id:"prepare-the-images-directory-and-k3s-binary"},"Prepare the Images Directory and K3s Binary"),(0,r.kt)("p",null,"Obtain the images tar file for your architecture from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/k3s/releases"},"releases page")," for the version of K3s you will be running. Place the tar file in the images directory, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://github.com/k3s-io/k3s/releases/download/v1.25.3%2Bk3s1/k3s-airgap-images-amd64.tar.zst\nsudo mkdir -p /var/lib/rancher/k3s/agent/images/\nsudo tar --use-compress-program=unzstd -xvf ./k3s-airgap-images-amd64.tar.zst --directory /var/lib/rancher/k3s/agent/images\nrm ./k3s-airgap-images-amd64.tar.zst\n")),(0,r.kt)("h3",{id:"prepare-the-k3s-binary"},"Prepare the K3s Binary"),(0,r.kt)("p",null,"Download the K3s binary from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/k3s/releases"},"releases page"),", matching the same version used to get the airgap images. Place the binary in ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," on each air-gapped node and ensure it is executable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo wget https://github.com/k3s-io/k3s/releases/download/v1.25.3%2Bk3s1/k3s --directory-prefix=/usr/local/bin\nsudo chmod +x /usr/local/bin/k3s\n")),(0,r.kt)("h2",{id:"installing-k3s-in-an-air-gapped-environment"},"Installing K3s in an Air-Gapped Environment"),(0,r.kt)("p",null,"Download the K3s install script at ",(0,r.kt)("a",{parentName:"p",href:"https://get.k3s.io"},"get.k3s.io"),". Place the install script anywhere on each air-gapped node, and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"install.sh"),". When running the K3s script with the ",(0,r.kt)("inlineCode",{parentName:"p"},"INSTALL_K3S_SKIP_DOWNLOAD")," environment variable, K3s will use the local version of the script and binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget --output-document=./install.sh  https://get.k3s.io\nchmod +x ./install.sh\n")),(0,r.kt)("p",null,"To install K3s on a single server, simply do the following on the server node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"INSTALL_K3S_SKIP_DOWNLOAD=true ./install.sh\n\n[INFO]  Skipping k3s download and verify\n[INFO]  Skipping installation of SELinux RPM\n[INFO]  Creating /usr/local/bin/kubectl symlink to k3s\n[INFO]  Creating /usr/local/bin/crictl symlink to k3s\n[INFO]  Skipping /usr/local/bin/ctr symlink to k3s, command exists in PATH at /usr/bin/ctr\n[INFO]  Creating killall script /usr/local/bin/k3s-killall.sh\n[INFO]  Creating uninstall script /usr/local/bin/k3s-uninstall.sh\n[INFO]  env: Creating environment file /etc/systemd/system/k3s.service.env\n[INFO]  systemd: Creating service file /etc/systemd/system/k3s.service\n[INFO]  systemd: Enabling k3s unit\nCreated symlink /etc/systemd/system/multi-user.target.wants/k3s.service \u2192 /etc/systemd/system/k3s.service.\n[INFO]  systemd: Starting k3s\n")),(0,r.kt)("p",null,"Then, to ",(0,r.kt)("em",{parentName:"p"},"optionally")," add additional agents download the ",(0,r.kt)("inlineCode",{parentName:"p"},"install.sh")," and run the following on each agent node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"INSTALL_K3S_SKIP_DOWNLOAD=true K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken ./install.sh\n")),(0,r.kt)("p",null,"Take care to ensure you replace ",(0,r.kt)("inlineCode",{parentName:"p"},"myserver")," with the IP or valid DNS of the server and replace ",(0,r.kt)("inlineCode",{parentName:"p"},"mynodetoken")," with the node token from the server typically at ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/lib/rancher/k3s/server/node-token"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo cat /var/lib/rancher/k3s/server/node-token\nK109ff43654eb75675r756r49f41e02ve5467e5v45b9139esfdh23c8::server:ef896e4377876834524356876\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Before adding an external client make sure that all ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/reference/ports-and-protocols/"},"Kubernetes ports")," are opened and accessible on all systems.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"INSTALL_K3S_SKIP_DOWNLOAD=true K3S_URL=https://192.168.1.101:6443 K3S_TOKEN=K109ff43654eb75675r756r49f41e02ve5467e5v45b9139esfdh23c8::server:ef896e4377876834524356876 ./install.sh\n")),(0,r.kt)("p",null,"Verify that the installation was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo kubectl version --short --output=yaml\n\nclientVersion:\n  buildDate: "2022-10-25T19:59:38Z"\n  compiler: gc\n  gitCommit: f2585c1671b31b4b34bddbb3bf4e7d69662b0821\n  gitTreeState: clean\n  gitVersion: v1.25.3+k3s1\n  goVersion: go1.19.2\n  major: "1"\n  minor: "25"\n  platform: linux/amd64\nkustomizeVersion: v4.5.7\nserverVersion:\n  buildDate: "2022-10-25T19:59:38Z"\n  compiler: gc\n  gitCommit: f2585c1671b31b4b34bddbb3bf4e7d69662b0821\n  gitTreeState: clean\n  gitVersion: v1.25.3+k3s1\n  goVersion: go1.19.2\n  major: "1"\n  minor: "25"\n  platform: linux/amd64\n')),(0,r.kt)("h2",{id:"kubernetes-dashboard"},"Kubernetes Dashboard"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/"},"Kubernetes Dashboard")," is a web-based Kubernetes user interface. You can use Dashboard to deploy containerized applications to a Kubernetes cluster, troubleshoot your containerized application, and manage the cluster resources. You can use Dashboard to get an overview of applications running on your cluster, as well as for creating or modifying individual Kubernetes resources (such as Deployments, Jobs, DaemonSets, etc). For example, you can scale a Deployment, initiate a rolling update, restart a pod or deploy new applications using a deploy wizard."),(0,r.kt)("h3",{id:"deploying-the-kubernetes-dashboard"},"Deploying the Kubernetes Dashboard"),(0,r.kt)("p",null,"To install the dashboard on an Edge (online) system you should set the following global variables to get the latest version:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"GITHUB_URL=https://github.com/kubernetes/dashboard/releases\nVERSION_KUBE_DASHBOARD=$(curl -w '%{url_effective}' -I -L -s -S ${GITHUB_URL}/latest -o /dev/null | sed -e 's|.*/||')\n")),(0,r.kt)("p",null,"I can check the latest version on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/dashboard/releases/latest"},"release page")," - in my case this is ",(0,r.kt)("inlineCode",{parentName:"p"},"v2.7.0"),". So instead of running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo k3s kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/${VERSION_KUBE_DASHBOARD}/aio/deploy/recommended.yaml\n")),(0,r.kt)("p",null,"I can download the file and transfer it to my air-gapped system:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir /opt/k3s\nsudo chown myuser:myuser /opt/k3s\nwget --output-document=/opt/k3s/kube-dash.yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n")),(0,r.kt)("p",null,"This file will deploy two container to the Kubernetes cluster that we can pull on a live system:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull kubernetesui/dashboard:v2.7.0 \ndocker pull kubernetesui/metrics-scraper:v1.0.8\n")),(0,r.kt)("p",null,"And then ",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Linux/2019-06-14--download-and-save-docker-image/2019-06-14/"},"transfer to my air-gapped system")," before applying the downloaded job file."),(0,r.kt)("p",null,"Now I can deploy the dashboard:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo k3s kubectl create -f /opt/k3s/kube-dash.yaml\n\nnamespace/kubernetes-dashboard created\nserviceaccount/kubernetes-dashboard created\nservice/kubernetes-dashboard created\nsecret/kubernetes-dashboard-certs created\nsecret/kubernetes-dashboard-csrf created\nsecret/kubernetes-dashboard-key-holder created\nconfigmap/kubernetes-dashboard-settings created\nrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created\nrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\nclusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created\ndeployment.apps/kubernetes-dashboard created\nservice/dashboard-metrics-scraper created\ndeployment.apps/dashboard-metrics-scraper created\n")),(0,r.kt)("p",null,"This seemed to have worked. Let's verify that both pods are now running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo kubectl get pod --all-namespaces -o wide\n\nNAMESPACE              NAME                                         READY STATUS    AGE   IP        \nkube-system            coredns-75fc8f8fff-lm4zk                     1/1   Running   3m45s 10.42.0.6 \nkube-system            local-path-provisioner-5b5579c644-znhxp      1/1   Running   3m45s 10.42.0.4 \nkube-system            helm-install-traefik-crd-bqfzh               0/1   Completed 3m45s 10.42.0.5 \nkube-system            helm-install-traefik-s2k47                   0/1   Completed 3m45s 10.42.0.2 \nkube-system            metrics-server-5c8978b444-57t9t              1/1   Running   3m45s 10.42.0.3 \nkube-system            svclb-traefik-6b2eda7a-grvsv                 2/2   Running   3m7s  10.42.0.7 \nkube-system            traefik-9c6dc6686-778mw                      1/1   Running   3m7s  10.42.0.8 \nkubernetes-dashboard   dashboard-metrics-scraper-64bcc67c9c-ppdj4   1/1   Running   54s   10.42.0.10\nkubernetes-dashboard   kubernetes-dashboard-5c8bd6b59-96xdj         1/1   Running   54s   10.42.0.9\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo kubectl get deployments -n kubernetes-dashboard\n\nNAME                        READY   UP-TO-DATE   AVAILABLE   AGE\ndashboard-metrics-scraper   1/1     1            1           55s\nkubernetes-dashboard        1/1     1            1           55s\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo kubectl get services -n kubernetes-dashboard \n\nNAME                        TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\nkubernetes-dashboard        ClusterIP   10.43.53.84    <none>        443/TCP    57s\ndashboard-metrics-scraper   ClusterIP   10.43.58.132   <none>        8000/TCP   57s\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Looking good :)")),(0,r.kt)("h3",{id:"dashboard-rbac-configuration"},"Dashboard RBAC Configuration"),(0,r.kt)("p",null,"Create the following resource manifest files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/k3s/dashboard.admin-user.yml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/k3s/dashboard.admin-user-role.yml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\n")),(0,r.kt)("p",null,"Deploy the admin-user configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo k3s kubectl create -f /opt/k3s/dashboard.admin-user.yml -f /opt/k3s/dashboard.admin-user-role.yml\n\nserviceaccount/admin-user created\nclusterrolebinding.rbac.authorization.k8s.io/admin-user created\n")),(0,r.kt)("h4",{id:"obtain-the-bearer-token"},"Obtain the Bearer Token"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo k3s kubectl -n kubernetes-dashboard create token admin-user\n\neyJhbGciOiJSUzI1NiIsImtpZCI6IkdnaWluV2RRbnpuMENIaUI2TFB2QmxhbGctQUhUVWVjM2FXSWhKRTRXNUEifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiLCJrM3MiXSwiZXhwIjoxNjY4ODU3MDA1LCJpYXQiOjE2Njg4NTM0MDUsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJhZG1pbi11c2VyIiwidWlkIjoiYzNhNjY0ODUtYjQ2Ny00NzNjLTg4MzktMDk3YzUwMzE4NzI5In19LCJuYmYiOjE2Njg4NTM0MDUsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDphZG1pbi11c2VyIn0.Aq7mrvx3yo4EGsziJZs5poXWYJsq_s5uMkWhuinu0h_XNi-Qke9ZAX2f5cCw31vErXY2NcIYqQKgMMmcFpW9Kod_g--ZdIEmxGRqsIk_bBm1pjgYvdHvQDA8EZrFpT4BMgQMX10I8qp6zE6Y7iLckABDCiTWl0Pu42oRXxnRPp5_OppGOEbOte4Z1A5xjsR889t4YgVeKa9RHlvroWyaDkd5hyEpolpoDxteSd16e6TYXkNUkh70taPbcUzxO-DheP8apWWLsFSzQOUXbG0L2JJIAL1rYbBsvCYH346VtP2SwGFU5Z_S1whACH4O3lKu56aesnT5TERUPL6PdBclIQ\n")),(0,r.kt)("h2",{id:"local-access-to-the-dashboard"},"Local Access to the Dashboard"),(0,r.kt)("p",null,"To access the Dashboard you must create a secure channel to your K3s cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo k3s kubectl proxy\n\nStarting to serve on 127.0.0.1:8001\n")),(0,r.kt)("p",null,"The Dashboard is now accessible at:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/")),(0,r.kt)("li",{parentName:"ul"},"Sign In with the admin-user Bearer Token")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Kubernetes Beyond the Edge",src:n(76236).Z,width:"1463",height:"361"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Kubernetes Beyond the Edge",src:n(82666).Z,width:"1601",height:"604"})),(0,r.kt)("h2",{id:"run-a-stateless-application-using-a-deployment"},"Run a Stateless Application Using a Deployment"),(0,r.kt)("p",null,"You can run an application by creating a Kubernetes Deployment object, and you can describe a Deployment in a YAML file. For example, this YAML file describes a Deployment that runs the latest ",(0,r.kt)("inlineCode",{parentName:"p"},"nginx:alpine")," Docker image (",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Linux/2019-06-14--download-and-save-docker-image/2019-06-14/"},"the image needs to be present on the air-gapped system"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  replicas: 2 # tells deployment to run 2 pods matching the template\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:alpine\n        ports:\n        - containerPort: 80\n")),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl")," you can now deploy this job file with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo kubectl apply -f https://k8s.io/examples/application/deployment.yaml\nsudo kubectl describe deployment nginx-deployment\nsudo kubectl get pods -l app=nginx\nsudo kubectl describe pod <pod-name>\nsudo kubectl delete deployment nginx-deployment\n")),(0,r.kt)("p",null,"Or we can use the Kubernetes Dashboard - click on ",(0,r.kt)("em",{parentName:"p"},"Create a new resource")," in the top right and fill out the form:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Kubernetes Beyond the Edge",src:n(2349).Z,width:"1611",height:"845"})),(0,r.kt)("p",null,"Verify via ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo kubectl describe deployment nginx-deployment\nName:                   nginx-deployment\nNamespace:              default\nCreationTimestamp:      Sat, 19 Nov 2022 19:40:31 +0800\nLabels:                 k8s-app=nginx-deployment\n...\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo kubectl get pods -l k8s-app=nginx-deployment\n\nNAME                                READY   STATUS    RESTARTS   AGE\nnginx-deployment-7fd66545df-v2bbz   1/1     Running   0          116s\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo kubectl describe pod nginx-deployment-7fd66545df-v2bbz\n\nName:             nginx-deployment-7fd66545df-v2bbz\nNamespace:        default\nPriority:         0\nService Account:  default\nNode:             tp-link0815b/192.168.2.112\nStart Time:       Sat, 19 Nov 2022 19:40:31 +0800\nLabels:           k8s-app=nginx-deployment\n                  pod-template-hash=7fd66545df\nAnnotations:      <none>\nStatus:           Running\nIP:               10.42.0.14\n\n...\n\nEvents:\n  Type    Reason     Age    From               Message\n  ----    ------     ----   ----               -------\n  Normal  Scheduled  4m42s  default-scheduler  Successfully assigned default/nginx-deployment-7fd66545df-v2bbz to tp-link0815b\n  Normal  Pulled     4m42s  kubelet            Container image "nginx:alpine" already present on machine\n  Normal  Created    4m42s  kubelet            Created container nginx-deployment\n  Normal  Started    4m42s  kubelet            Started container nginx-deployment\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Kubernetes Beyond the Edge",src:n(74945).Z,width:"1601",height:"885"})),(0,r.kt)("h2",{id:"uninstalling-k3s"},"Uninstalling K3s"),(0,r.kt)("p",null,"To uninstall K3s from a server node, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/usr/local/bin/k3s-uninstall.sh\n")),(0,r.kt)("p",null,"To uninstall K3s from an agent node, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/usr/local/bin/k3s-agent-uninstall.sh\n")))}u.isMDXComponent=!0},76236:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/K3s_Kubernetes_Beyond_the_Edge_01-31535fc40d33e82d6bd7590d269a4e33.png"},82666:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/K3s_Kubernetes_Beyond_the_Edge_02-850286ebef77d2347efbee385db7f2ca.png"},2349:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/K3s_Kubernetes_Beyond_the_Edge_03-44d422ce97db7682e9a472a6751ec4e2.png"},74945:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/K3s_Kubernetes_Beyond_the_Edge_04-49def8afe6ff9534b9877888f14d3f49.png"},28183:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/photo-84356dfgd_67gfh6dfdj_o-c01aef9ec79407ce395a6a1542ae56cc.jpg"}}]);