"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[25725],{3905:(a,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>m});var n=t(67294);function r(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function s(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function o(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function i(a,e){if(null==a)return{};var t,n,r=function(a,e){if(null==a)return{};var t,n,r={},s=Object.keys(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||(r[t]=a[t]);return r}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(r[t]=a[t])}return r}var l=n.createContext({}),p=function(a){var e=n.useContext(l),t=e;return a&&(t="function"==typeof a?a(e):o(o({},e),a)),t},d=function(a){var e=p(a.components);return n.createElement(l.Provider,{value:e},a.children)},c={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},g=n.forwardRef((function(a,e){var t=a.components,r=a.mdxType,s=a.originalType,l=a.parentName,d=i(a,["components","mdxType","originalType","parentName"]),g=p(t),m=r,f=g["".concat(l,".").concat(m)]||g[m]||c[m]||s;return t?n.createElement(f,o(o({ref:e},d),{},{components:t})):n.createElement(f,o({ref:e},d))}));function m(a,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof a||r){var s=t.length,o=new Array(s);o[0]=g;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=a,i.mdxType="string"==typeof a?a:r,o[1]=i;for(var p=2;p<s;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},27059:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=t(87462),r=(t(67294),t(3905));const s={sidebar_position:9020,slug:"2019-01-08",title:"Sensors Data and Grafana",authors:"mpolinowski",tags:["LINUX","IoT","Databases"]},o=void 0,i={unversionedId:"DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/index",id:"DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/index",title:"Sensors Data and Grafana",description:"Hongkong",source:"@site/docs/DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/index.mdx",sourceDirName:"DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard",slug:"/DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/2019-01-08",permalink:"/docs/DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/2019-01-08",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2019-01-08--creating-a-grafana-dashboard/index.mdx",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"IoT",permalink:"/docs/tags/io-t"},{label:"Databases",permalink:"/docs/tags/databases"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2019-01-08",title:"Sensors Data and Grafana",authors:"mpolinowski",tags:["LINUX","IoT","Databases"]},sidebar:"tutorialSidebar",previous:{title:"Installing Discourse on Centos 8",permalink:"/docs/DevOps/Provisioning/2019-06-15--installing-discourse-on-centos8/2019-06-15"},next:{title:"Red Hat Certified Specialist in Containerized Application Development",permalink:"/docs/DevOps/Provisioning/2018-12-27--red-hat-containerized-application-development-rhcs/2018-12-27"}},l={},p=[{value:"Installing Grafana",id:"installing-grafana",level:2}],d={toc:p};function c(a){let{components:e,...s}=a;return(0,r.kt)("wrapper",(0,n.Z)({},d,s,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Hongkong",src:t(26144).Z,width:"1500",height:"739"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installing-grafana"},"Installing Grafana"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/grafana"},"Grafana")," allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data driven culture. The Grafana project can also be found on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grafana/grafana"},"Github"),"."),(0,r.kt)("h2",{id:"installing-grafana"},"Installing Grafana"),(0,r.kt)("p",null,"Since I am working on a Raspberry Pi 2 (the same would be true for a v3) with Raspbian installed I will grab the ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/grafana/download?platform=arm"},"download link")," for Grafana for ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/docs/installation/debian/"},"Ubuntu & Debian(ARMv7)"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Correction I seemed to be using a single core version of the Raspberry Pi 2 that requires the ARMv6 build - see below")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://dl.grafana.com/oss/release/grafana_6.1.6_armhf.deb\nsudo apt-get install -y adduser libfontconfig1\nsudo dpkg -i grafana_6.1.6_armhf.deb \n")),(0,r.kt)("p",null,"In my case ",(0,r.kt)("em",{parentName:"p"},"libfontconfig1")," was missing dependencies after the installation and and the installation of Grafana failed - I was able to fix this issue by running ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo apt --fix-broken install")," and restart the Grafana installation."),(0,r.kt)("p",null,"We can use SystemD to start the Grafana Service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsudo systemctl start grafana-server\nsudo systemctl status grafana-server\n")),(0,r.kt)("p",null,"Unfortunately I am seeing error messages here - and as stated above, I was ",(0,r.kt)("a",{parentName:"p",href:"https://community.grafana.com/t/grafana-wont-start-on-raspberry-pi/8525/3"},"using the wrong build of Grafana"),"..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"09:11:51 raspberrypi systemd[1]: Stopped Grafana instance.\n09:11:51 raspberrypi systemd[1]: grafana-server.service: Start request repeated too quickly.\n09:11:51 raspberrypi systemd[1]: Failed to start Grafana instance.\n09:11:51 raspberrypi systemd[1]: grafana-server.service: Unit entered failed state.\n09:11:51 raspberrypi systemd[1]: grafana-server.service: Failed with result \u2018signal\u2019.\n")),(0,r.kt)("p",null,"So once again, with more feeling (and the correct version ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/grafana/download?platform=arm"},"Ubuntu & Debian(ARMv6)"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl stop grafana-server\nsudo apt-get remove --auto-remove grafana\n\nwget https://dl.grafana.com/oss/release/grafana-rpi_6.1.6_armhf.deb\nsudo apt-get install -y adduser libfontconfig1\nsudo dpkg -i grafana-rpi_6.1.6_armhf.deb\n\nsudo /bin/systemctl daemon-reload\nsudo /bin/systemctl enable grafana-server\nsudo /bin/systemctl start grafana-server\n")),(0,r.kt)("p",null,"This time everything worked as planned:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(65681).Z,width:"800",height:"253"})),(0,r.kt)("p",null,"I had to wait for a few minutes for the service to come online - on a RasPi v3 this should be less of an issue... I am now able to access the Grafana frontend on the IP address of my Pi and the port 3000 - ",(0,r.kt)("inlineCode",{parentName:"p"},"http://192.168.2.64:3000/login"),". The default login is ",(0,r.kt)("strong",{parentName:"p"},"user = admin")," and ",(0,r.kt)("strong",{parentName:"p"},"password = admin")," - but you will be asked to change this right away:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(25744).Z,width:"800",height:"550"})),(0,r.kt)("p",null,"We are greeted by a wizard that leads us through the initial set up process - we have to start by adding a data source. I am going to use the data I started storing inside a ",(0,r.kt)("a",{parentName:"p",href:"/docs/IoT-and-Machine-Learning/Home_Automation/2019-01-05--zigbee2mqtt-xiaomi-fhem/2019-01-05#adding-sql-logging"},"MariaDB database in another article")," and choose MySQL:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(16411).Z,width:"800",height:"654"})),(0,r.kt)("p",null,"For this project I created a database called ",(0,r.kt)("inlineCode",{parentName:"p"},"fhem"),". MariaDB is running on the same Pi and can be accessed over ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:3306")," by the user ",(0,r.kt)("inlineCode",{parentName:"p"},"fhemuser")," with the password ",(0,r.kt)("inlineCode",{parentName:"p"},"instar"),". Clicking on ",(0,r.kt)("strong",{parentName:"p"},"Save & Test")," at the bottom of the page tells me that the ",(0,r.kt)("strong",{parentName:"p"},"Database Connection is OK"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(18514).Z,width:"800",height:"390"})),(0,r.kt)("p",null,"Back to the ",(0,r.kt)("strong",{parentName:"p"},"Home Screen")," I now click on ",(0,r.kt)("strong",{parentName:"p"},"New Dashboard"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(1861).Z,width:"800",height:"353"})),(0,r.kt)("p",null,"Here I can choose a ",(0,r.kt)("strong",{parentName:"p"},"Visualization")," and select a ",(0,r.kt)("strong",{parentName:"p"},"Graph"),". On the empty coordinate system I can click on the ",(0,r.kt)("strong",{parentName:"p"},"Panel Title")," to add a data source for the graph:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(48667).Z,width:"800",height:"501"})),(0,r.kt)("p",null,"My ",(0,r.kt)("a",{parentName:"p",href:"/docs/IoT-and-Machine-Learning/Home_Automation/2019-01-05--zigbee2mqtt-xiaomi-fhem/2019-01-05#adding-sql-logging"},"database has two tables")," - one with the ",(0,r.kt)("strong",{parentName:"p"},"current values")," and one table that collects the ",(0,r.kt)("strong",{parentName:"p"},"historic values")," for all readings. And both have 7 rows - ",(0,r.kt)("inlineCode",{parentName:"p"},"TIMESTAMP"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DEVICE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TYPE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"EVENT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"READING"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"VALUE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"UNIT"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(35504).Z,width:"800",height:"521"})),(0,r.kt)("p",null,"For my graph I am interested in the ",(0,r.kt)("strong",{parentName:"p"},"history table")," and I want to begin to create a plot of the ",(0,r.kt)("em",{parentName:"p"},"Temperature Sensor Reading")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"temp_hum_sensor")," device. Grafana helps with creating the corresponding SQL query. But I am receiving an error because the numeric reading is stored as ",(0,r.kt)("em",{parentName:"p"},"type string"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(87611).Z,width:"800",height:"313"})),(0,r.kt)("p",null,"But we can re-write the SQL query using ",(0,r.kt)("strong",{parentName:"p"},"CAST")," to convert the data type of our ",(0,r.kt)("inlineCode",{parentName:"p"},"VALUES")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"DECIMAL"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  UNIX_TIMESTAMP(`TIMESTAMP`) as time_sec,\n  CAST(`VALUE` AS DECIMAL(10, 6)) as value,\n  'temperature' as metric\nFROM `history`\nWHERE $__timeFilter(`TIMESTAMP`) AND `DEVICE` = 'temp_hum_sensor' AND `READING` = 'temperature'\nORDER BY `TIMESTAMP` ASC\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(59879).Z,width:"800",height:"559"})),(0,r.kt)("p",null,"Continuing through the wizard on the left allows me to further customize the graph:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(29438).Z,width:"800",height:"599"})),(0,r.kt)("p",null,"Now we can return to the home screen and save our first dashboard:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Grafana",src:t(17881).Z,width:"988",height:"427"})))}c.isMDXComponent=!0},65681:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_01-b43e5f6f50f6f62b8da9839323e9592b.png"},25744:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_02-d8cd47dd06e09681167b59865376cde0.png"},16411:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_03-e3718245b01f5aaa5a7130cd9b2a0d94.png"},18514:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_04-5a77971a8aa51caf3c36ec3a35f4c40a.png"},1861:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_05-3ed57b3d78d9b552f71b340de6dd774b.png"},48667:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_06-53cfb0a2e15b282b2b0b7ecfdca3d7be.png"},35504:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_07-929e58c4acc0a3c5c162cfb5a1849dda.png"},87611:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_08-9201fb39a92734a8bd949ab9a147ddd1.png"},59879:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_09-34b033153f7f252ec55eec1bbc643eb8.png"},29438:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_10-82aca217bc2c08433b817c00855ff026.png"},17881:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/grafana_11-626087dd74d74267ee6a0084d798a71d.png"},26144:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/photo-19453645663_6dzgdxff_o-f7d9afeb977fffbf986b40d25fe317f2.png"}}]);