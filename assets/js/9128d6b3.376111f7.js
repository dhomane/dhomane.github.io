"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[75588],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),h=r,d=m["".concat(i,".").concat(h)]||m[h]||p[h]||o;return n?a.createElement(d,l(l({ref:t},u),{},{components:n})):a.createElement(d,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},68820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:3900,slug:"2022-12-05",title:"Hashicorp Consul - Vault Cert Management Part 3",authors:"mpolinowski",tags:["Consul","Vault","LINUX"],description:"Set-up Vault to be the Certificate Authority"},l=void 0,s={unversionedId:"DevOps/Hashicorp/2022-12-05-hashicorp-consul-vault-certificates-part3/index",id:"DevOps/Hashicorp/2022-12-05-hashicorp-consul-vault-certificates-part3/index",title:"Hashicorp Consul - Vault Cert Management Part 3",description:"Set-up Vault to be the Certificate Authority",source:"@site/docs/DevOps/Hashicorp/2022-12-05-hashicorp-consul-vault-certificates-part3/index.md",sourceDirName:"DevOps/Hashicorp/2022-12-05-hashicorp-consul-vault-certificates-part3",slug:"/DevOps/Hashicorp/2022-12-05-hashicorp-consul-vault-certificates-part3/2022-12-05",permalink:"/docs/DevOps/Hashicorp/2022-12-05-hashicorp-consul-vault-certificates-part3/2022-12-05",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-12-05-hashicorp-consul-vault-certificates-part3/index.md",tags:[{label:"Consul",permalink:"/docs/tags/consul"},{label:"Vault",permalink:"/docs/tags/vault"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:3900,frontMatter:{sidebar_position:3900,slug:"2022-12-05",title:"Hashicorp Consul - Vault Cert Management Part 3",authors:"mpolinowski",tags:["Consul","Vault","LINUX"],description:"Set-up Vault to be the Certificate Authority"},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Vault - Certificate Authority",permalink:"/docs/DevOps/Hashicorp/2022-12-07-hashicorp-vault-ca-certificates/2022-12-07"},next:{title:"Hashicorp Consul - Vault Cert Management Part 2",permalink:"/docs/DevOps/Hashicorp/2022-12-05-hashicorp-consul-vault-certificates-part2/2022-12-05"}},i={},c=[{value:"Configure consul-template",id:"configure-consul-template",level:2},{value:"Create Template Files",id:"create-template-files",level:3},{value:"Create consul-template Configuration",id:"create-consul-template-configuration",level:3},{value:"Server Configuration",id:"server-configuration",level:4},{value:"Client Configuration",id:"client-configuration",level:4},{value:"Start consul-template",id:"start-consul-template",level:2},{value:"Nomad Automation",id:"nomad-automation",level:3}],u={toc:c};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shen Zhen, China",src:n(64504).Z,width:"2230",height:"839"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configure-consul-template"},"Configure consul-template"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-template-files"},"Create Template Files")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-consul-template-configuration"},"Create consul-template Configuration"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#server-configuration"},"Server Configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#client-configuration"},"Client Configuration")))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#start-consul-template"},"Start consul-template"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#nomad-automation"},"Nomad Automation"))))),(0,r.kt)("h2",{id:"configure-consul-template"},"Configure consul-template"),(0,r.kt)("h3",{id:"create-template-files"},"Create Template Files"),(0,r.kt)("p",null,"We can now use ",(0,r.kt)("strong",{parentName:"p"},"Consul-Template")," to automate certificate renewal for Consul when the TTL is expired. We can instruct consul-template to generate and  retrieve those files from Vault using the following templates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /opt/consul/templates\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"/opt/consul/templates/agent.crt.tpl")," (",(0,r.kt)("strong",{parentName:"p"},"Master only"),")"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Careful"),": The official documentation uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"common_name")," for the default datacenter ",(0,r.kt)("inlineCode",{parentName:"p"},"consul.dc1"),". I use the name ",(0,r.kt)("inlineCode",{parentName:"p"},"consul")," here and have to change the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"consul.consul")," accordingly. Otherwise the cert verification will fail. This name will be used a couple of times in the following commands - you need to change all of them according to your setup.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'{{ with secret "pki_int/issue/consul-consul" "common_name=server.consul.consul" "ttl=24h" "alt_names=localhost" "ip_sans=127.0.0.1"}}\n{{ .Data.certificate }}\n{{ end }}\n')),(0,r.kt)("p",null,"The template will use the pki_int/issue/consul-consul endpoint that Vault exposes to generate new certificates."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"/opt/consul/templates/agent.key.tpl")," (",(0,r.kt)("strong",{parentName:"p"},"Master only"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'{{ with secret "pki_int/issue/consul-consul" "common_name=server.consul.consul" "ttl=24h" "alt_names=localhost" "ip_sans=127.0.0.1"}}\n{{ .Data.private_key }}\n{{ end }}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"/opt/consul/templates/ca.crt.tpl")," (",(0,r.kt)("strong",{parentName:"p"},"All Nodes"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'{{ with secret "pki_int/issue/consul-consul" "common_name=server.consul.consul" "ttl=24h"}}\n{{ .Data.issuing_ca }}\n{{ end }}\n')),(0,r.kt)("p",null,"Not sure if this is necessary - but since the Consul agent is running with the ",(0,r.kt)("inlineCode",{parentName:"p"},"consul")," user (Master node only) I will change the user rights:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chown -R consul:consul /opt/consul/templates\n")),(0,r.kt)("h3",{id:"create-consul-template-configuration"},"Create consul-template Configuration"),(0,r.kt)("p",null,"Now we need to create a configuration file ",(0,r.kt)("inlineCode",{parentName:"p"},"consul_template.hcl")," that will instruct ",(0,r.kt)("strong",{parentName:"p"},"Consul-Template")," to retrieve the files needed for the agent, client and server, to configure TLS encryption:"),(0,r.kt)("h4",{id:"server-configuration"},"Server Configuration"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"/opt/consul/templates/consul","_","template.hcl")," (",(0,r.kt)("strong",{parentName:"p"},"Master only"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# This denotes the start of the configuration section for Vault. All values\n# contained in this section pertain to Vault.\nvault {\n  # This is the address of the Vault leader. The protocol (http(s)) portion\n  # of the address is required.\n  address      = "http://localhost:8200"\n\n  # This value can also be specified via the environment variable VAULT_TOKEN.\n  # I am using the admin token created earlier\n  token        = "s.MdNlboI0nff3Xpo97d1TfIxd"\n\n  unwrap_token = false\n\n  renew_token  = false\n}\n\n# This block defines the configuration for a template. Unlike other blocks,\n# this block may be specified multiple times to configure multiple templates.\ntemplate {\n  # This is the source file on disk to use as the input template. This is often\n  # called the "consul-template template".\n  source      = "/opt/consul/templates/agent.crt.tpl"\n\n  # This is the destination path on disk where the source template will render.\n  # If the parent directories do not exist, consul-template will attempt to\n  # create them, unless create_dest_dirs is false.\n  destination = "/opt/consul/agent-certs/agent.crt"\n\n  # This is the permission to render the file. If this option is left\n  # unspecified, consul-template will attempt to match the permissions of the\n  # file that already exists at the destination path. If no file exists at that\n  # path, the permissions are 0644.\n  perms       = 0700\n\n  # This is the optional command to run when the template is rendered. The\n  # command will only run if the resulting template changes.\n  command     = "sh -c \'date && consul reload\'"\n}\n\ntemplate {\n  source      = "/opt/consul/templates/agent.key.tpl"\n  destination = "/opt/consul/agent-certs/agent.key"\n  perms       = 0700\n  command     = "sh -c \'date && consul reload\'"\n}\n\ntemplate {\n  source      = "/opt/consul/templates/ca.crt.tpl"\n  destination = "/opt/consul/agent-certs/ca.crt"\n  command     = "sh -c \'date && consul reload\'"\n}\n')),(0,r.kt)("p",null,"The configuration file for the server contains the information to retrieve the CA certificate as well as the certificate/key pair for the server agent:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address")," : The address of your Vault server. If Vault runs on the same node as Consul you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8200")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token")," : A valid Vault ACL token with appropriate permissions")),(0,r.kt)("h4",{id:"client-configuration"},"Client Configuration"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"/opt/consul/templates/consul","_","template.hcl")," (",(0,r.kt)("strong",{parentName:"p"},"Minions only"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# This denotes the start of the configuration section for Vault. All values\n# contained in this section pertain to Vault.\nvault {\n  # This is the address of the Vault leader. The protocol (http(s)) portion\n  # of the address is required.\n  address      = "https://server.consul.consul:8201"\n\n  # This value can also be specified via the environment variable VAULT_TOKEN.\n  # I am using the admin token created earlier\n  token        = "s.MdNlboI0nff3Xpo97d1TfIxd"\n\n  unwrap_token = false\n\n  renew_token  = false\n}\n\ntemplate {\n  source      = "/opt/consul/templates/ca.crt.tpl"\n  destination = "/opt/consul/agent-certs/ca.crt"\n  command     = "sh -c \'date && consul reload\'"\n}\n')),(0,r.kt)("p",null,"The configuration file for the server contains the information to retrieve the CA certificate only, the certificates for client agents are automatically generated from Consul when using the auto_encrypt setting:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"address")," : The address of your Vault server. Here you need to use the IP / domain + opened port of your Vault master"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"token")," : A valid Vault ACL token with appropriate permissions")),(0,r.kt)("p",null,"To be able to access Vault from an external service I am using a Vault-generated certificate. On my test system, that runs both Consul and Vault on a single server, I can use the Consul cert itself. For this to work I needed to add the Consul server address - which is in my case ",(0,r.kt)("inlineCode",{parentName:"p"},"server.consul.consul")," - to ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," to resolve the WAN IP of my Vault server. Now I am still running into issues since the Certificate Authority is not being recognized by my Linux machine. So I have to add it to the trusted-store:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ln -s /opt/consul/agent-certs/ca.crt /usr/local/share/ca-certificates/ca.crt\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"update-ca-certificates\nUpdating certificates in /etc/ssl/certs...\n1 added, 0 removed; done.\nRunning hooks in /etc/ca-certificates/update.d...\ndone.\n")),(0,r.kt)("h2",{id:"start-consul-template"},"Start consul-template"),(0,r.kt)("p",null,"After configuration is completed, you can start ",(0,r.kt)("inlineCode",{parentName:"p"},"consul-template"),". You must provide the file with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-config")," parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'consul-template -config "/opt/consul/templates/consul_template.hcl"\n')),(0,r.kt)("p",null,"THis service will output a `` every 24h - according to our Cert TTL. Meaning that the Consul service has been restarted after the certificate was updated. You can verify the cert validity by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -text -noout -in /opt/consul/agent-certs/agent.crt \n\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            55:...\n        Signature Algorithm: sha256WithRSAEncryption\n        Issuer: CN = consul.consul Intermediate Authority\n        Validity\n            Not Before: Dec  5 06:34:13 2022 GMT\n            Not After : Dec  6 06:34:43 2022 GMT\n        Subject: CN = server.consul.consul\n\n        ...\n")),(0,r.kt)("h3",{id:"nomad-automation"},"Nomad Automation"),(0,r.kt)("p",null,"We can run this job with Nomad on all clients (except the master) using the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/nomad/docs/drivers/raw_exec"},"raw_exec driver"),". To enable raw exec, the Nomad client configuration must explicitly enable the raw_exec driver in the plugin's options:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"/etc/nomad.d/client.hcl")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'plugin "raw_exec" {\n  config {\n    enabled = true\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'job "consul-cert-renewal" {\n    \n    type = "system"\n\n    datacenters = ["All","your","datacenters"]\n    \n    group "cert-renewal" {\n\n        task "consul-template" {\n            driver = "raw_exec"\n\n            config {\n                # When running a binary that exists on the host, the path must be absolute/\n                command = "/usr/bin/consul-template"\n                args    = ["-config", "/opt/consul/templates/consul_template.hcl"]\n            }\n        }\n    }\n}\n')))}p.isMDXComponent=!0},64504:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);