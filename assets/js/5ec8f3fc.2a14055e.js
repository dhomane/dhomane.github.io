"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[68255],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=l(n),u=o,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},61408:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:5980,slug:"2022-11-10",title:"WebRTC Introduction - Interactive Connectivity Establishment",authors:"mpolinowski",tags:["Javascript","WebRTC"],description:"Establishing a connection between the clients"},i=void 0,c={unversionedId:"Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/index",id:"Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/index",title:"WebRTC Introduction - Interactive Connectivity Establishment",description:"Establishing a connection between the clients",source:"@site/docs/Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/index.md",sourceDirName:"Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2",slug:"/Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/2022-11-10",permalink:"/docs/Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/2022-11-10",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"WebRTC",permalink:"/docs/tags/web-rtc"}],version:"current",sidebarPosition:5980,frontMatter:{sidebar_position:5980,slug:"2022-11-10",title:"WebRTC Introduction - Interactive Connectivity Establishment",authors:"mpolinowski",tags:["Javascript","WebRTC"],description:"Establishing a connection between the clients"},sidebar:"tutorialSidebar",previous:{title:"Web3.js Blockchain Application",permalink:"/docs/Development/Javascript/2022-11-19-web3-javascript-app/2022-11-19"},next:{title:"WebRTC Introduction - Client Side Signalling",permalink:"/docs/Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1/2022-10-30"}},s={},l=[{value:"Interactive Connectivity Establishment (ICE)",id:"interactive-connectivity-establishment-ice",level:2},{value:"Peer Connection",id:"peer-connection",level:3},{value:"Negotiate Media (SDP)",id:"negotiate-media-sdp",level:2},{value:"Offer",id:"offer",level:4},{value:"Answer",id:"answer",level:4}],d={toc:l};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Shenzhen, China",src:n(8060).Z,width:"2208",height:"757"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#interactive-connectivity-establishment-ice"},"Interactive Connectivity Establishment (ICE)"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#peer-connection"},"Peer Connection")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#negotiate-media-sdp"},"Negotiate Media (SDP)"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#offer"},"Offer")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#answer"},"Answer"))))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"WIP")," "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/Development/Javascript/2022-10-29-webrtc-introduction-realtime-chat/2022-10-29"},"WebRTC Introduction - Websockets")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/Development/Javascript/2022-10-30-webrtc-introduction-video-chat-part1/2022-10-30"},"WebRTC Introduction - Client Side Signalling")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/Development/Javascript/2022-11-10-webrtc-introduction-video-chat-part2/2022-11-10"},"WebRTC Introduction - Interactive Connectivity Establishment"))),(0,o.kt)("h2",{id:"interactive-connectivity-establishment-ice"},"Interactive Connectivity Establishment (ICE)"),(0,o.kt)("h3",{id:"peer-connection"},"Peer Connection"),(0,o.kt)("p",null,"Use STUN servers to exchange your public address:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://ourcodeworld.com/articles/read/1536/list-of-free-functional-public-stun-servers-2021"},"List of Public STUN Server"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// List of STUN server to exchange public IPs\nconst iceServers = {\n  iceServers: [\n    { urls: "stun:stun.l.google.com:19302" },\n    { urls: "stun:stun.nextcloud.com:443" }\n  ]\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection"},"RTCPeerConnection")," interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"rtcPeerConnection")," is an interface that provides several functions that need to be defined. First we need to handle the local stream that we get from ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchLocalStream")," in form of the ",(0,o.kt)("inlineCode",{parentName:"p"},"userStream")," object. This is done by ",(0,o.kt)("inlineCode",{parentName:"p"},"addTrack()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Room is ready event\nsocket.on('ready', function() {\n  if (creator) {\n    rtcPeerConnection = new RTCPeerConnection(iceServers)\n    rtcPeerConnection.oniceccandidate = onIceCandidate()\n    rtcPeerConnection.ontrack = onTrack()\n    // get local audio stream from userStream object\n    rtcPeerConnection.addTrack(userStream.getTracks()[0], userstream)\n    // get local video stream from userStream object\n    rtcPeerConnection.addTrack(userStream.getTracks()[0], userstream)\n  }\n})\n")),(0,o.kt)("p",null,"The second one is ",(0,o.kt)("inlineCode",{parentName:"p"},"onIceCandidate()")," returns a candidate for the connection that needs to be published through our websocket:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// If ICE candidate is returned emit over ws\nfunction onIceCandidate(event) {\n  if (event.candidate) {\n    socket.emit("candidate", event.candidate, chatRoom.value);\n  }\n}\n')),(0,o.kt)("p",null,"The third function we need to handle is ",(0,o.kt)("inlineCode",{parentName:"p"},"onTrack()")," that handles the media stream that is provided by the remote candidate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// If ICE candidate starts streaming media emit over ws\nfunction onTrack(event) {\n  peerVideo.srcObject = event.streams[0];\n  peerVideo.onloadedmetadata = function (e) {\n    peerVideo.play();\n  };\n}\n")),(0,o.kt)("h2",{id:"negotiate-media-sdp"},"Negotiate Media (SDP)"),(0,o.kt)("p",null,"The creator of the room now needs to use the established connection to send an offer to the remote candidate. Since the answering remote candidate will have to send the same media information I will export those functions and recycle them."),(0,o.kt)("p",null,"When the room is created and ready get public address of the remote candidate and collect your local media information"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function rtcPeering() {\n  rtcPeerConnection = new RTCPeerConnection(iceServers)\n  rtcPeerConnection.oniceccandidate = onIceCandidate()\n  rtcPeerConnection.ontrack = onTrack()\n  // get audio stream from userStream object\n  rtcPeerConnection.addTrack(userStream.getTracks()[0], userstream)\n  // get video stream from userStream object\n  rtcPeerConnection.addTrack(userStream.getTracks()[0], userstream)\n}\n")),(0,o.kt)("h4",{id:"offer"},"Offer"),(0,o.kt)("p",null,"Send the offer to your remote candidate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Room is ready event\nsocket.on('ready', function() {\n  console.log('INFO :: Room ready.')\n  // Room creator generates offer for remote candidate to join\n  if (creator) {\n    rtcPeering()\n    // create offer\n    rtcPeerConnection\n    .createOffer()\n    .then((offer) => {\n      rtcPeerConnection.setLocalDescription(offer);\n      socket.emit(\"offer\", offer, roomName);\n    })\n\n    .catch((error) => {\n      console.log(error);\n    });\n  }\n  console.log('INFO :: Offer send.')\n})\n")),(0,o.kt)("h4",{id:"answer"},"Answer"),(0,o.kt)("p",null,"When the remote candidate receives the offer it will provide the following answer containing the same information but it's local media:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Triggered on receiving an offer from the person who created the room.\nsocket.on("offer", function (offer) {\n  // If not creator send answer to offer\n  if (!creator) {\n    rtcPeering()\n    rtcPeerConnection.setRemoteDescription(offer);\n    rtcPeerConnection\n      .createAnswer()\n      .then((answer) => {\n        rtcPeerConnection.setLocalDescription(answer);\n        socket.emit("answer", answer, roomName);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n  console.log(\'INFO :: Answer send.\')\n});\n')))}p.isMDXComponent=!0},8060:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-e38404fdf0e14587f660e537829bfab5.jpg"}}]);