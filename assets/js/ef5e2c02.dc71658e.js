"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[68704],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(t),m=s,v=p["".concat(c,".").concat(m)]||p[m]||u[m]||r;return t?o.createElement(v,a(a({ref:n},d),{},{components:t})):o.createElement(v,a({ref:n},d))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,a=new Array(r);a[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var l=2;l<r;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(87462),s=(t(67294),t(3905));const r={sidebar_position:6070,slug:"2021-09-08",title:"HTML Video over Websockets",authors:"mpolinowski",tags:["Javascript"]},a=void 0,i={unversionedId:"Development/Javascript/2021-09-08--websockets-html-video/index",id:"Development/Javascript/2021-09-08--websockets-html-video/index",title:"HTML Video over Websockets",description:"Shenzhen, China",source:"@site/docs/Development/Javascript/2021-09-08--websockets-html-video/index.md",sourceDirName:"Development/Javascript/2021-09-08--websockets-html-video",slug:"/Development/Javascript/2021-09-08--websockets-html-video/2021-09-08",permalink:"/docs/Development/Javascript/2021-09-08--websockets-html-video/2021-09-08",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2021-09-08--websockets-html-video/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:6070,frontMatter:{sidebar_position:6070,slug:"2021-09-08",title:"HTML Video over Websockets",authors:"mpolinowski",tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"HAProxy Loadbalancing and Websockets",permalink:"/docs/Development/Javascript/2021-09-09--websocket-HAproxy/2021-09-09"},next:{title:"Introduction to Websockets",permalink:"/docs/Development/Javascript/2021-09-07--intro-to-websockets/2021-09-07"}},c={},l=[{value:"HTML Frontend (WS Client)",id:"html-frontend-ws-client",level:2},{value:"Websocket Server",id:"websocket-server",level:2},{value:"User Notifications",id:"user-notifications",level:2},{value:"Auto-Reconnect the Websocket",id:"auto-reconnect-the-websocket",level:2}],d={toc:l};function u(e){let{components:n,...r}=e;return(0,s.kt)("wrapper",(0,o.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Shenzhen, China",src:t(77913).Z,width:"1500",height:"374"})),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#html-frontend-ws-client"},"HTML Frontend (WS Client)")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#websocket-server"},"Websocket Server")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#user-notifications"},"User Notifications")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#auto-reconnect-the-websocket"},"Auto-Reconnect the Websocket"))),(0,s.kt)("p",null,"This is a frontend client for the INSTAR WQHD (",(0,s.kt)("inlineCode",{parentName:"p"},"IN-9408 2k+"),") camera websocket server. It connects to the server and displays the camera's live video stream inside an HTML5 video tag."),(0,s.kt)("h2",{id:"html-frontend-ws-client"},"HTML Frontend (WS Client)"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"HTML Video over Websockets",src:t(46599).Z,width:"1050",height:"972"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset="UTF-8">\n        <meta http-equiv="Content-Security-Policy"  content="connect-src * \'unsafe-inline\';">\n        \x3c!-- Bootstrap CSS --\x3e\n        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous"><link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">\n        <style>\n            /* override styles here */\n            .notie-container {\n            box-shadow: none;\n            }\n        </style>\n    </head>\n    <body>\n        <nav class="navbar sticky-top navbar-dark bg-dark mb-3">\n            <div class="container-fluid">\n                <a class="navbar-brand" href="#">\n                    <img src="instar.svg" alt="" width="156" height="45" class="d-inline-block">\n                </a>\n                <div class="d-flex text-light me-2" id="status">\n                </div>\n            </div>\n        </nav>\n        <div class="container-fluid">\n            <div class="row justify-content-between">\n                <div class="col">\n                    <div class="container-md" id="connection_paramter">\n                        <table class="table table-hover">\n                        <thead>\n                            <tr>\n                                <th scope="col">Websocket</th>\n                                <th scope="col">Configuration</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <th width="200px" scope="row">WS Protocol</th>\n                                <td>\n                                    <select id="protocol" class="form-select">\n                                        <option value="ws" selected="selected">ws</option>\n                                        <option value="wss">wss</option>\n                                    </select>\n                                </td>\n                            </tr>\n                            <tr>\n                                <th scope="row">WS Hostname</th>\n                                <td>\n                                    <div class="input-group">\n                                        <input type="text" class="form-control" id="hostname" value="192.168.2.19"/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr>\n                                <th scope="row">WS Port</th>\n                                <td>\n                                    <div class="input-group">\n                                        <input type="text" class="form-control" id="port" value="80"/>\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr>\n                                <th scope="row">WS Endpoint</th>\n                                <td>\n                                    <div class="input-group">\n                                        <input type="text" class="form-control" id="endpoint" value="/ws" />\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr>\n                                <th scope="row">Connection</th>\n                                <td>\n                                    <div class="d-flex gap-2">\n                                        <button type="button" class="btn btn-primary p-2 flex-grow-1" id="btnConnect" onclick="onConnectClick()">\n                                        Connect\n                                        </button>\n                                        <button type="button" class="btn btn-danger p-2 flex-grow-1" id="btnDisconnect" onclick="onDisconnectClick()" disabled>\n                                            Disconnect\n                                        </button>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div class="col">\n                    <div class="container-md" id="message">\n                        <table class="table table-hover">\n                            <thead>\n                                <tr>\n                                    <th colspan="2" scope="col">h.264 Stream</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <th scope="row">Username</th>\n                                    <td>\n                                        <div class="input-group">\n                                            <input type="text" class="form-control" id="username" value="admin"/>\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <th scope="row">Password</th>\n                                    <td>\n                                        <div class="input-group">\n                                            <input type="password" class="form-control" id="password" value="instar" />\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td colspan="2">\n                                        <div class="input-group">\n                                            <select id="wsmessage" class="form-select">\n                                                <option value="livestream" selected="selected">Start</option>\n                                                <option value="stop">Stop</option>\n                                            </select>\n                                            \x3c!-- <input type="text" class="form-control" id="wsmessage" value="livestream"> --\x3e\n                                        </div>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td colspan="2">\n                                        <div class="d-flex">\n                                            <button type="button" class="btn btn-success p-2 flex-grow-1" id="btnSend" onclick="onSendClick()" disabled>\n                                                Send Message\n                                            </button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div class="container-fluid">\n                <div class="row" id="message">\n\n                    <div class="col align-self-center">\n                        <video playsinline muted controls preload="none" width="100%"></video>\n                    </div>\n\n                    <div class="accordion accordion mb-5" id="accordionFlushExample">\n                        <div class="accordion-item">\n                          <h2 class="accordion-header" id="headingOne">\n                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">\n                                Incoming Messages\n                            </button>\n                          </h2>\n                          <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionFlushExample">\n                            <div class="input-group">\n                                <textarea class="form-control" id="incomingMsgOutput" rows="10" cols="20" disabled="disabled"></textarea>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                </div>\n                </div>\n            </div>\n        </div>\n\n        \x3c!-- Scripts --\x3e\n        \x3c!-- Websocket Client --\x3e\n        <script src="wsclient.js"><\/script>\n        \x3c!-- Bootstrap JS and Popper.js --\x3e\n        \x3c!-- <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js" integrity="sha384-W8fXfP3gkOKtndU4JGtKDvXbO53Wy8SZCQHczT5FMiiqmQfUpWbYdTil/SxwZgAN" crossorigin="anonymous"><\/script> --\x3e\n        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.min.js" integrity="sha384-skAcpIdS7UcVUC05LJ9Dxay8AXcDYfBJqt1CJ85S/CFujBsIzCIv+l9liuYLaMQ/" crossorigin="anonymous"><\/script>\n        <script src="https://unpkg.com/notie"><\/script>\n        <script src="reconnecting-websocket.min.js"><\/script>\n    </body>\n</html>\n')),(0,s.kt)("h2",{id:"websocket-server"},"Websocket Server"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'\nvar ws_protocol = document.getElementById("protocol");\nvar ws_hostname = document.getElementById("hostname");\nvar ws_port     = document.getElementById("port");\nvar ws_endpoint = document.getElementById("endpoint");\nvar cam_username = document.getElementById("username");\nvar cam_password = document.getElementById("password");\n\nvar queue = [];\nvar video = null;\nvar webSocket   = null;\nvar sourceBuffer = null;\nvar streamingStarted = false;\n\n// Display ws pre-connected state\nvar statusBadge = document.getElementById("status");\nconst idle = `<h4><span class="badge bg-primary">WS Client</span></h4>`\nstatusBadge.innerHTML = idle;\n\n// Init the Media Source and add event listener\nfunction initMediaSource() {\n    video = document.querySelector(\'video\');\n    video.onerror = elementError;\n    video.loop = false;\n    video.addEventListener(\'canplay\', (event) => {\n        console.log(\'Video can start, but not sure it will play through.\');\n        video.play();\n    });\n    video.addEventListener(\'paused\', (event) => {\n        console.log(\'Video paused for buffering...\');\n        setTimeout(function() { video.play(); }, 2000);\n    });\n    \n    /* NOTE: Chrome will not play the video if we define audio here\n    * and the stream does not include audio */\n    var mimeCodec = \'video/mp4; codecs="avc1.4D0033, mp4a.40.2"\';\n    //var mimeCodec = \'video/mp4; codecs=avc1.42E01E,mp4a.40.2\'; baseline\n    //var mimeCodec = \'video/mp4; codecs=avc1.4d002a,mp4a.40.2\'; main\n    //var mimeCodec = \'video/mp4; codecs="avc1.64001E, mp4a.40.2"\'; high\n\n    if (!window.MediaSource) {\n        console.error("No Media Source API available");\n        document.getElementById("incomingMsgOutput").value += "error: No Media Source API available" + "\\r\\n";\n        return;\n    }\n    \n    if (!MediaSource.isTypeSupported(mimeCodec)) {\n        console.error("Unsupported MIME type or codec: " + mimeCodec);\n        document.getElementById("incomingMsgOutput").value += "error: Unsupported MIME type or codec" + "\\r\\n";\n        return;\n    }\n    \n    var ms = new MediaSource();\n    video.src = window.URL.createObjectURL(ms);\n    ms.addEventListener(\'sourceopen\', onMediaSourceOpen);\n    \n    function onMediaSourceOpen() {\n        sourceBuffer = ms.addSourceBuffer(mimeCodec);\n        sourceBuffer.addEventListener("updateend",loadPacket);\n        sourceBuffer.addEventListener("onerror", sourceError);\n    }\n    \n    function loadPacket() { // called when sourceBuffer is ready for more\n        if (!sourceBuffer.updating) {\n            if (queue.length>0) {\n                data = queue.shift(); // pop from the beginning\n                appendToBuffer(data);\n            } else { // the queue runs empty, so we must force-feed the next packet\n                streamingStarted = false;\n            }\n        }\n        else {}\n    }\n    \n    function sourceError(event) {\n        console.log("Media source error");\n    }\n    \n    function elementError(event) {\n        console.log("Media element error");\n    }\n}\n\n// Append AV data to source buffer\nfunction appendToBuffer(videoChunk) {\n    if (videoChunk) {\n        sourceBuffer.appendBuffer(videoChunk);\n    }\n}\n\n// Event handler for clicking on button "Connect"\nfunction onConnectClick() {\n     // Makes sure that user typed username and message before sending\n     if ((ws_protocol.value === \'\') || (ws_hostname.value === \'\') || (ws_port.value === \'\') || (ws_endpoint.value === \'\') ||(cam_username === \'\') || (cam_password === \'\')) {\n        errorToast("Please fill out all the configuration fields above!");\n        return false;\n    } else {\n        initMediaSource();\n        document.getElementById("incomingMsgOutput").value = "";\n        document.getElementById("btnConnect").disabled    = true;\n        openWSConnection(ws_protocol.value, ws_hostname.value, ws_port.value, ws_endpoint.value);\n        successToast("Send the \'Start\' message to start the video stream.");\n        }    \n}\n\n// Event handler for clicking on button "Disconnect"\nfunction onDisconnectClick() {\n    document.getElementById("btnDisconnect").disabled = true;\n    webSocket.close();\n    video.pause();\n}\n\n// Adding confirmations with notie.js\nfunction successToast(msg) {\n    notie.alert({\n        type: \'success\', // optional, default = 4, enum: [1, 2, 3, 4, 5, \'success\', \'warning\', \'error\', \'info\', \'neutral\']\n        text: msg,\n        stay: false, // optional, default = false\n        time: 3, // optional, default = 3, minimum = 1,\n        position: \'bottom\' // optional, default = \'top\', enum: [\'top\', \'bottom\']\n    })\n}\n\n//Adding alerts with notie.js\nfunction errorToast(msg) {\n    notie.alert({\n        type: \'error\', // optional, default = 4, enum: [1, 2, 3, 4, 5, \'success\', \'warning\', \'error\', \'info\', \'neutral\']\n        text: msg,\n        stay: false, // optional, default = false\n        time: 3, // optional, default = 3, minimum = 1,\n        position: \'bottom\' // optional, default = \'top\', enum: [\'top\', \'bottom\']\n    })\n}\n\n// Open a new WebSocket connection using the given parameters\nfunction openWSConnection(protocol, hostname, port, endpoint) {\n    \n    var webSocketURL = null;\n    var keepAliveCount = 0;\n    \n    webSocketURL = protocol + "://" + hostname + ":" + port + endpoint;\n    console.log("openWSConnection::Connecting to: " + webSocketURL);\n\n    const offline = `<h4><span class="badge bg-danger">Disconnected</span></h4>`\n    const online = `<h4><span class="badge bg-success">Connected</span></h4>`\n    \n    let statusBadge = document.getElementById("status");\n\n    try {\n        // webSocket = new WebSocket(webSocketURL);\n        webSocket = new ReconnectingWebSocket(webSocketURL);\n        webSocket.debug = true;\n        webSocket.timeoutInterval = 3000;\n        webSocket.onopen = function(openEvent) {\n            var open = JSON.stringify(openEvent, null, 4);\n            console.log("WebSocket open");\n            document.getElementById("btnSend").disabled       = false;\n            document.getElementById("btnConnect").disabled    = true;\n            document.getElementById("btnDisconnect").disabled = false;\n            document.getElementById("incomingMsgOutput").value += "WebSocket connected" + "\\r\\n";\n            statusBadge.innerHTML = online\n        };\n        webSocket.onclose = function (closeEvent) {\n            var closed = JSON.stringify(closeEvent, null, 4);\n            console.log("WebSocket closed");\n            document.getElementById("btnSend").disabled       = true;\n            document.getElementById("btnConnect").disabled    = false;\n            document.getElementById("btnDisconnect").disabled = true;\n            document.getElementById("incomingMsgOutput").value += "WebSocket closed" + "\\r\\n";\n            statusBadge.innerHTML = offline\n        };\n        webSocket.onerror = function (errorEvent) {\n            var error = JSON.stringify(errorEvent, null, 4);\n            console.log("WebSocket ERROR: " + error);\n            document.getElementById("btnConnect").disabled    = false;\n            document.getElementById("incomingMsgOutput").value += "error: Websocket connection failed" + "\\r\\n";\n            statusBadge.innerHTML = offline\n        };\n        webSocket.onmessage = function (messageEvent) {\n            var wsMsg = messageEvent.data;\n            if (typeof wsMsg === \'string\') {\n                if (wsMsg.indexOf("error:") == 0) {\n                    document.getElementById("incomingMsgOutput").value += wsMsg + "\\r\\n";\n                } else {\n                    document.getElementById("incomingMsgOutput").value += "echo message: " + wsMsg + "\\r\\n";\n                }\n            } else {\n                var arrayBuffer;\n                var fileReader = new FileReader();\n                fileReader.onload = function(event) {\n                    arrayBuffer = event.target.result;\n                    var data = new Uint8Array(arrayBuffer);\n                    document.getElementById("incomingMsgOutput").value += "received: " + data.length + " bytes\\r\\n";\n                    if (!streamingStarted) {\n                        appendToBuffer(arrayBuffer);\n                        streamingStarted=true;\n                        return;\n                    }\n                    queue.push(arrayBuffer); // add to the end\n                };\n                fileReader.readAsArrayBuffer(wsMsg);\n                /* NOTE: the web server has a idle-timeout of 60 seconds,\n                 so we need to send a keep-alive message regulary */\n                keepAliveCount++;\n                if (keepAliveCount >= 10 && webSocket.readyState == WebSocket.OPEN) {\n                    keepAliveCount = 0;\n                    webSocket.send("keep-alive");\n                }\n            }\n        };\n    } catch (exception) {\n        console.error(exception);\n    }\n}\n\n// Send a message to the WebSocket server\nfunction onSendClick() {\n    if (webSocket.readyState != WebSocket.OPEN) {\n        console.error("webSocket is not open: " + webSocket.readyState);\n        return;\n    }\n    var msg = document.getElementById("wsmessage").value;\n    webSocket.send(msg);\n}\n')),(0,s.kt)("h2",{id:"user-notifications"},"User Notifications"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/Development/Javascript/2021-09-10--notifications-alerts-as-toast/2021-09-10"},"Adding toast notifications with Notie.js"),"."),(0,s.kt)("h2",{id:"auto-reconnect-the-websocket"},"Auto-Reconnect the Websocket"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/Development/Javascript/2021-09-10--websocket-recconects/2021-09-10"},"Make sure that the connection is always re-established with ReconnectingWebsockets"),"."))}u.isMDXComponent=!0},77913:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-dd2c04030bd344a6c433c240ed2c2bba.jpg"},46599:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/ws_html_video_01-1248c1a608e0e7c871f0582d5017c3c2.png"}}]);