"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[51971],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,g=u["".concat(s,".").concat(d)]||u[d]||p[d]||r;return n?a.createElement(g,i(i({ref:t},m),{},{components:n})):a.createElement(g,i({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:6080,slug:"2022-07-22",title:"Go - MQTT Hello World",authors:"mpolinowski",tags:["IoT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"Writing a Go program that connects to my camera MQTT broker, subscribes to the last-will topic and publishes updates to the privacy mask to turn it on and off again after 15s. The client disconnects after 250ms after that."},i=void 0,l={unversionedId:"IoT-and-Machine-Learning/MQTT/2022-07-22-go-hello-world/index",id:"IoT-and-Machine-Learning/MQTT/2022-07-22-go-hello-world/index",title:"Go - MQTT Hello World",description:"Writing a Go program that connects to my camera MQTT broker, subscribes to the last-will topic and publishes updates to the privacy mask to turn it on and off again after 15s. The client disconnects after 250ms after that.",source:"@site/docs/IoT-and-Machine-Learning/MQTT/2022-07-22-go-hello-world/index.md",sourceDirName:"IoT-and-Machine-Learning/MQTT/2022-07-22-go-hello-world",slug:"/IoT-and-Machine-Learning/MQTT/2022-07-22-go-hello-world/2022-07-22",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-07-22-go-hello-world/2022-07-22",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/MQTT/2022-07-22-go-hello-world/index.md",tags:[{label:"IoT",permalink:"/docs/tags/io-t"}],version:"current",sidebarPosition:6080,frontMatter:{sidebar_position:6080,slug:"2022-07-22",title:"Go - MQTT Hello World",authors:"mpolinowski",tags:["IoT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"Writing a Go program that connects to my camera MQTT broker, subscribes to the last-will topic and publishes updates to the privacy mask to turn it on and off again after 15s. The client disconnects after 250ms after that."},sidebar:"tutorialSidebar",previous:{title:"Mosquitto Broker from Source",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-07-23-mosquitto-broker-compilation/2022-07-23"},next:{title:"Rust - MQTT Hello World",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-07-21-rust-hello-world/2022-07-21"}},s={},c=[{value:"Go Paho MQTT Client",id:"go-paho-mqtt-client",level:2},{value:"Connect to the MQTT broker",id:"connect-to-the-mqtt-broker",level:3},{value:"Running the Program",id:"running-the-program",level:3},{value:"Cross Compiling with Go",id:"cross-compiling-with-go",level:2}],m={toc:c};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Guangzhou, China",src:n(83602).Z,width:"2385",height:"962"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#go-paho-mqtt-client"},"Go Paho MQTT Client"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#connect-to-the-mqtt-broker"},"Connect to the MQTT broker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#running-the-program"},"Running the Program")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#cross-compiling-with-go"},"Cross Compiling with Go"))),(0,o.kt)("h2",{id:"go-paho-mqtt-client"},"Go Paho MQTT Client"),(0,o.kt)("p",null,"I already wrote a ",(0,o.kt)("a",{parentName:"p",href:"/docs/IoT-and-Machine-Learning/MQTT/2021-09-12--golang-paho-mqtt/2021-09-12/"},"Go MQTT client")," before. I will try to expand this a little bit:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go mod init go/go-mqtt\ngo get github.com/eclipse/paho.mqtt.golang@latest\n")),(0,o.kt)("h3",{id:"connect-to-the-mqtt-broker"},"Connect to the MQTT broker"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Broker IP"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"192.168.2.115")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"MQTT Service Port"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"1883")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Broker Login"),": ",(0,o.kt)("inlineCode",{parentName:"li"},"admin/instar"))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Go - MQTT Hello World",src:n(2255).Z,width:"1031",height:"693"})),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"./main.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "time"\n\n    mqtt "github.com/eclipse/paho.mqtt.golang"\n)\n\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\n    fmt.Printf("Topic: %s | %s\\n", msg.Topic(), msg.Payload())\n}\n\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\n    fmt.Println("Connected")\n}\n\nvar connectLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\n    fmt.Printf("Connect lost: %+v", err)\n}\n\nfunc main() {\n    var broker = "192.168.2.115"\n    var port = 1883\n    opts := mqtt.NewClientOptions()\n    opts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\n    opts.SetClientID("go_mqtt_client")\n    opts.SetUsername("admin")\n    opts.SetPassword("instar")\n    opts.SetDefaultPublishHandler(messagePubHandler)\n    opts.OnConnect = connectHandler\n    opts.OnConnectionLost = connectLostHandler\n    client := mqtt.NewClient(opts)\n    if token := client.Connect(); token.Wait() && token.Error() != nil {\n        panic(token.Error())\n    }\n\n    sub(client)\n    publish(client)\n\n    client.Disconnect(250)\n}\n\nfunc publish(client mqtt.Client) {\n    // Turn privacy mask 1 on and off again after 15s\n    nums := []int{1, 0}\n    for _, num := range nums {\n        value := fmt.Sprintf("%d", num)\n        token := client.Publish("cameras/115/multimedia/privacy/region1/enable/raw", 0, false, value)\n        token.Wait()\n        time.Sleep(15 * time.Second)\n    }\n}\n\nfunc sub(client mqtt.Client) {\n    // Subscribe to the LWT connection status\n    topic := "cameras/115/status/testament"\n    token := client.Subscribe(topic, 1, nil)\n    token.Wait()\n    fmt.Println("Subscribed to LWT", topic)\n}\n')),(0,o.kt)("h3",{id:"running-the-program"},"Running the Program"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'go run .\\main.go\nConnected\nSubscribed to LWT cameras/115/status/testament\nTopic: cameras/115/status/testament | {"val":"alive"}\n')),(0,o.kt)("p",null,"The program connects to my camera broker, subscribes to the last-will topic and publishes updates to the privacy mask to turn it on and off again after 15s. The client disconnects after 250ms after that."),(0,o.kt)("p",null,"To get a binary file out I can run the build command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go build ./main.go -o mqtt\n")),(0,o.kt)("p",null,"And run the binary with ",(0,o.kt)("inlineCode",{parentName:"p"},"./mqtt"),"."),(0,o.kt)("h2",{id:"cross-compiling-with-go"},"Cross Compiling with Go"),(0,o.kt)("p",null,"Go supports a variety of platforms and operating systems, including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Android"),(0,o.kt)("li",{parentName:"ul"},"Darwin"),(0,o.kt)("li",{parentName:"ul"},"Linux"),(0,o.kt)("li",{parentName:"ul"},"Windows")),(0,o.kt)("p",null,"The file created requires a 64bit ",(0,o.kt)("inlineCode",{parentName:"p"},"x86-64")," system to be executed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"file main\nmain: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, Go BuildID=GkWKfp1sGIj5CJ0LesYM/P1txXPn8ar3YIQEGRF3P/hbjIOYuyC5-d1UMZN32q/CGL0UrtrAC1goylMkfFl, with debug_info, not stripped\n")),(0,o.kt)("p",null,"So how do I get a file that I can use on my IP camera that uses an ARM7 processor?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"uname -m\narmv7l\n")),(0,o.kt)("p",null,"So how do I find out what systems are supported?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go tool dist list\n\nandroid/386\nandroid/amd64\nandroid/arm\nandroid/arm64\nios/amd64\nios/arm64\njs/wasm\nlinux/386\nlinux/amd64\nlinux/arm\nlinux/arm64\nlinux/loong64\nlinux/mips\nlinux/mips64\nlinux/mips64le\nlinux/mipsle\nlinux/ppc64\nlinux/ppc64le\nlinux/riscv64\nlinux/s390x\nwindows/386\nwindows/amd64\nwindows/arm\nwindows/arm64\n\n...\n")),(0,o.kt)("p",null,"I can add the information as a environment variable when running the build:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"env GOOS=linux GOARCH=arm go build -o mqtt_arm\n")),(0,o.kt)("p",null,"Now I got a binary that can be executed on a 32bit ARM system:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"file mqtt_arm\nmqtt_arm: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, Go BuildID=msMp-jFIWHH3UaYAwNkh/TSOtDFvNMz_m1j_2VuU-/jOS7whdSr12-3_dBf4qC/xOLKo5WJnx4cluesUzqW, with debug_info, not stripped\n")),(0,o.kt)("p",null,"And this worked - just copying the binary onto my IP Camera and executing it and I got the broker connection. Very nice <3"))}p.isMDXComponent=!0},2255:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Rust_MQTT_Hello_World_01-68435046037215dc6dc8ad7c87b5b34c.png"},83602:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4dda98a4eb3b498839926e0b6a5039aa.jpg"}}]);