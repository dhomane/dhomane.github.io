"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[61603],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>u});var t=a(67294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(a),u=o,m=h["".concat(s,".").concat(u)]||h[u]||d[u]||r;return a?t.createElement(m,i(i({ref:n},p),{},{components:a})):t.createElement(m,i({ref:n},p))}));function u(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}h.displayName="MDXCreateElement"},56749:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=a(87462),o=(a(67294),a(3905));const r={sidebar_position:3980,slug:"2022-11-15",title:"Hashicorp Nomad for NGINX Load-balancing",authors:"mpolinowski",tags:["Nomad","Consul","LINUX","NTS"],description:"Following along the official NGINX load-balancing tutorial."},i=void 0,l={unversionedId:"DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/index",id:"DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/index",title:"Hashicorp Nomad for NGINX Load-balancing",description:"Following along the official NGINX load-balancing tutorial.",source:"@site/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/index.md",sourceDirName:"DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing",slug:"/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/2022-11-15",permalink:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/2022-11-15",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-nginx-load-balancing/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"},{label:"NTS",permalink:"/docs/tags/nts"}],version:"current",sidebarPosition:3980,frontMatter:{sidebar_position:3980,slug:"2022-11-15",title:"Hashicorp Nomad for NGINX Load-balancing",authors:"mpolinowski",tags:["Nomad","Consul","LINUX","NTS"],description:"Following along the official NGINX load-balancing tutorial."},sidebar:"tutorialSidebar",previous:{title:"Deploy Mautic with Hashicorp Nomad",permalink:"/docs/DevOps/Hashicorp/2022-11-16-hashicorp-nomad-mautic/2022-11-16"},next:{title:"Hashicorp Nomad Secure & Balanced NTS Time Service",permalink:"/docs/DevOps/Hashicorp/2022-11-15-hashicorp-nomad-balanced-nts/2022-11-15"}},s={},c=[{value:"Load Balancing with NGINX",id:"load-balancing-with-nginx",level:2},{value:"Demo Web App",id:"demo-web-app",level:3},{value:"NGINX Load Balancer",id:"nginx-load-balancer",level:3}],p={toc:c};function d(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Shen Zhen, China",src:a(86189).Z,width:"2230",height:"839"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#load-balancing-with-nginx"},"Load Balancing with NGINX"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#demo-web-app"},"Demo Web App")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#nginx-load-balancer"},"NGINX Load Balancer"))))),(0,o.kt)("h2",{id:"load-balancing-with-nginx"},"Load Balancing with NGINX"),(0,o.kt)("p",null,"You can use Nomad's template stanza to configure NGINX so that it can dynamically update its ",(0,o.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/nomad/tutorials/load-balancing"},"load balancer configuration")," to scale along with your services. The main use case for NGINX in this scenario is to distribute incoming HTTP(S) and TCP requests from the Internet to front-end services that can handle these requests."),(0,o.kt)("h3",{id:"demo-web-app"},"Demo Web App"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"webapp.tf")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'job "demo_webapp" {\n  datacenters = ["dc1"]\n\n  group "demo" {\n    count = 3\n    network {\n      port "http" {\n        to = -1\n      }\n    }\n\n    service {\n      name = "demo-webapp"\n      port = "http"\n\n      check {\n        type     = "http"\n        path     = "/"\n        interval = "2s"\n        timeout  = "2s"\n      }\n    }\n\n    task "server" {\n      env {\n        PORT    = "${NOMAD_PORT_http}"\n        NODE_IP = "${NOMAD_IP_http}"\n      }\n\n      driver = "docker"\n\n      config {\n        image = "hashicorp/demo-webapp-lb-guide"\n        ports = ["http"]\n      }\n    }\n  }\n}\n\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'nomad plan webapp.tf                                                                                            [\xb1master \u25cf]\n+ Job: "demo_webapp"\n+ Task Group: "demo" (3 create)\n  + Task: "server" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 webapp.tf\n')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hashicorp Nomad for NGINX Load-balancing",src:a(4748).Z,width:"1171",height:"246"})),(0,o.kt)("p",null,"The 3 instances have now been deployed to the host system exposing random port:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker ps\nCONTAINER ID   IMAGE                          PORTS\n17288d176334   hashicorp/demo-webapp-lb-guide server-ip:30809->30809/tcp\n17c426f00330   hashicorp/demo-webapp-lb-guide server-ip:24931->24931/tcp\n3f863e8dc822   hashicorp/demo-webapp-lb-guide server-ip:27252->27252/tcp\n")),(0,o.kt)("h3",{id:"nginx-load-balancer"},"NGINX Load Balancer"),(0,o.kt)("p",null,"This NGINX instance balances requests across the deployed instances of the web application:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"nginx.tf")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'job "nginx" {\n  datacenters = ["dc1"]\n\n  group "nginx" {\n    count = 1\n\n    network {\n      port "http" {\n        static = 80\n      }\n    }\n\n    service {\n      name = "nginx"\n      port = "http"\n    }\n\n    task "nginx" {\n      driver = "docker"\n\n      config {\n        image = "nginx:alpine"\n        network_mode = "host"\n\n        volumes = [\n          "local:/etc/nginx/conf.d",\n        ]\n      }\n\n      template {\n        data = <<EOF\nupstream backend {\n{{ range service "demo-webapp" }}\n  server {{ .Address }}:{{ .Port }};\n{{ else }}server 127.0.0.1:65535; # force a 502\n{{ end }}\n}\n\nserver {\n   listen 80;\n\n   location / {\n      proxy_pass http://backend;\n   }\n}\nEOF\n\n        destination   = "local/load-balancer.conf"\n        change_mode   = "signal"\n        change_signal = "SIGHUP"\n      }\n    }\n  }\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"NOTE")," I kept getting a ",(0,o.kt)("strong",{parentName:"p"},"502 Bad Gateway")," error from NGINX when following the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/nomad/tutorials/load-balancing/load-balancing-nginx"},"official tutorial"),'. This happened because - unlike with Docker-Compose where I would add all container to the same virtual network and use the internal DNS service to connect them - here the container are unable to "see" each other directly. Communication always has to leave the local environment using the WAN IP of my host server - which is where my firewall sabotaged my efforts. I am not sure what the recommended way is to handle this issue - don\'t you use firewalls, or should I try to dynamically configure it using Nomads ',(0,o.kt)("inlineCode",{parentName:"p"},"exec_raw")," driver? I solved the issue for now by lifting the Load-Balancer onto my host network stack using ",(0,o.kt)("inlineCode",{parentName:"p"},'network_mode = "host"'),".")),(0,o.kt)("p",null,"This configuration uses Nomad's template to populate the load balancer configuration for NGINX. It uses Consul to get the address and port of services named ",(0,o.kt)("inlineCode",{parentName:"p"},"demo-webapp"),", which are created in the demo web application's job specification. It then makes those services available over static port of 8080 from the load balancer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'nomad plan nginx.tf                                                                                             [\xb1master \u25cf]\n+ Job: "nginx"\n+ Task Group: "nginx" (1 create)\n  + Task: "nginx" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 nginx.tf\n')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hashicorp Nomad for NGINX Load-balancing",src:a(93024).Z,width:"1175",height:"246"})),(0,o.kt)("p",null,"Testing the round-robin load-balancing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl server-ip\nWelcome! You are on node server-ip:25447\ncurl server-ip\nWelcome! You are on node server-ip:29597\ncurl server-ip\nWelcome! You are on node server-ip:29709\ncurl server-ip\nWelcome! You are on node server-ip:25447\n")))}d.isMDXComponent=!0},4748:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/Hashicorp_Nomad_for_NGINX_Load-balancing_01-af05ef13977114a22d8d3257c5cc46c7.png"},93024:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/Hashicorp_Nomad_for_NGINX_Load-balancing_02-cb1c55f543924f884c4f04372d8e1793.png"},86189:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);