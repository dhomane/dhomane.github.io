"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[99637],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>m});var t=n(67294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=t.createContext({}),_=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},c=function(e){var a=_(e.components);return t.createElement(o.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=_(n),m=i,u=d["".concat(o,".").concat(m)]||d[m]||p[m]||r;return n?t.createElement(u,l(l({ref:a},c),{},{components:n})):t.createElement(u,l({ref:a},c))}));function m(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var s={};for(var o in a)hasOwnProperty.call(a,o)&&(s[o]=a[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var _=2;_<r;_++)l[_]=n[_];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3924:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>_});var t=n(87462),i=(n(67294),n(3905));const r={sidebar_position:4920,slug:"2022-12-16",title:"Tensorflow Image Classification",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"The CIFAR-10 is a labeled subset of the 80 million tiny images dataset that can be directly downloaded using Keras."},l=void 0,s={unversionedId:"IoT-and-Machine-Learning/ML/2022-12-16-tf-cifar/index",id:"IoT-and-Machine-Learning/ML/2022-12-16-tf-cifar/index",title:"Tensorflow Image Classification",description:"The CIFAR-10 is a labeled subset of the 80 million tiny images dataset that can be directly downloaded using Keras.",source:"@site/docs/IoT-and-Machine-Learning/ML/2022-12-16-tf-cifar/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2022-12-16-tf-cifar",slug:"/IoT-and-Machine-Learning/ML/2022-12-16-tf-cifar/2022-12-16",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-12-16-tf-cifar/2022-12-16",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2022-12-16-tf-cifar/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:4920,frontMatter:{sidebar_position:4920,slug:"2022-12-16",title:"Tensorflow Image Classification",authors:"mpolinowski",tags:["Python","Machine Learning","Tensorflow"],description:"The CIFAR-10 is a labeled subset of the 80 million tiny images dataset that can be directly downloaded using Keras."},sidebar:"tutorialSidebar",previous:{title:"Tensorflow Transfer Learning",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-12-18-tf-transfer-learning/2022-12-18"},next:{title:"Breast Histopathology Image Segmentation Part 6",permalink:"/docs/IoT-and-Machine-Learning/ML/2022-12-12-tf-breast-cancer-classification-part6/2022-12-12"}},o={},_=[{value:"Datasets",id:"datasets",level:2},{value:"CIFAR-10",id:"cifar-10",level:3},{value:"Building the Model",id:"building-the-model",level:2},{value:"Training the Model",id:"training-the-model",level:2},{value:"Evaluating the Model",id:"evaluating-the-model",level:2},{value:"Run Predictions",id:"run-predictions",level:2}],c={toc:_};function p(e){let{components:a,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Guangzhou, China",src:n(26644).Z,width:"1500",height:"383"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#datasets"},"Datasets"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#cifar-10"},"CIFAR-10")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#building-the-model"},"Building the Model")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#training-the-model"},"Training the Model")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#evaluating-the-model"},"Evaluating the Model")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#run-predictions"},"Run Predictions"))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/tf-cifar"},"Github"))),(0,i.kt)("h2",{id:"datasets"},"Datasets"),(0,i.kt)("h3",{id:"cifar-10"},"CIFAR-10"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://www.cs.toronto.edu/~kriz/cifar.html"},"CIFAR-10")," dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images."),(0,i.kt)("p",null,"The dataset is divided into five training batches and one test batch, each with 10000 images. The test batch contains exactly 1000 randomly-selected images from each class. The training batches contain the remaining images in random order, but some training batches may contain more images from one class than another. Between them, the training batches contain exactly 5000 images from each class. You can download the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/keras-team/keras/tree/master/keras/datasets"},"Keras dataset")," by:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"from tensorflow.keras import datasets\n(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Keras models and datasets will be saved to ",(0,i.kt)("inlineCode",{parentName:"p"},"/home/myuser/.keras")," on Linux.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# print sample images from dataset\nplt.figure(figsize=(10,10))\n\n# pick 25 images\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    # choose images from training set\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    # use train class name as labels\n    plt.xlabel(class_names[train_labels[i][0]])\n\nplt.show()\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Tensorflow Tiny Image Classification",src:n(25117).Z,width:"1000",height:"982"})),(0,i.kt)("h2",{id:"building-the-model"},"Building the Model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32,32, 3)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\n\nmodel.summary()\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10))\n\nmodel.summary()\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'Model: "sequential"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n conv2d (Conv2D)             (None, 30, 30, 32)        896       \n                                                                 \n max_pooling2d (MaxPooling2D  (None, 15, 15, 32)       0         \n )                                                               \n                                                                 \n conv2d_1 (Conv2D)           (None, 13, 13, 64)        18496     \n                                                                 \n max_pooling2d_1 (MaxPooling  (None, 6, 6, 64)         0         \n 2D)                                                             \n                                                                 \n conv2d_2 (Conv2D)           (None, 4, 4, 64)          36928     \n                                                                 \n=================================================================\nTotal params: 56,320\nTrainable params: 56,320\nNon-trainable params: 0\n_________________________________________________________________\nModel: "sequential"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n conv2d (Conv2D)             (None, 30, 30, 32)        896       \n                                                                 \n max_pooling2d (MaxPooling2D  (None, 15, 15, 32)       0         \n )                                                               \n                                                                 \n conv2d_1 (Conv2D)           (None, 13, 13, 64)        18496     \n                                                                 \n max_pooling2d_1 (MaxPooling  (None, 6, 6, 64)         0         \n 2D)                                                             \n                                                                 \n conv2d_2 (Conv2D)           (None, 4, 4, 64)          36928     \n                                                                 \n flatten (Flatten)           (None, 1024)              0         \n                                                                 \n dense (Dense)               (None, 64)                65600     \n                                                                 \n dense_1 (Dense)             (None, 10)                650       \n                                                                 \n=================================================================\nTotal params: 122,570\nTrainable params: 122,570\nNon-trainable params: 0\n_________________________________________________________________\n')),(0,i.kt)("h2",{id:"training-the-model"},"Training the Model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'# compile the model\nmodel.compile(optimizer=\'adam\',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=[\'accuracy\'])\n\n# saving checkpoints when there are improvements\nMCName = os.path.sep.join(["./checkpoints", "weights-{epoch:03d}-{val_loss:.4f}.hdf5"])\ncheckpoint = ModelCheckpoint(MCName, monitor="val_loss", mode="min", save_best_only=True, verbose=1)\ncallbacks = [checkpoint]\n\n# fit the model\nhistory = model.fit(train_images,\n                    train_labels,\n                    epochs=25,\n                    callbacks=callbacks,\n                    validation_data=(test_images, test_labels))\n')),(0,i.kt)("h2",{id:"evaluating-the-model"},"Evaluating the Model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"plt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')\nplt.show()\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Tensorflow Tiny Image Classification",src:n(8329).Z,width:"640",height:"480"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"313/313 - 1s - loss: 1.6254 - accuracy: 0.6483 - 507ms/epoch - 2ms/step\n")),(0,i.kt)("h2",{id:"run-predictions"},"Run Predictions"),(0,i.kt)("p",null,"We can now use the test dataset to verify our training:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# load cifar10\n# to use images from the test dataset for prediction\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')\n\nprint(x_train.shape, y_train.shape)\nprint(x_test.shape, y_test.shape)\nprint(type(x_test))\nprint(type(y_test[0]))\n\n# cifar10 category label name\ncifar10_labels = np.array([\n    'airplane',\n    'automobile',\n    'bird',\n    'cat',\n    'deer',\n    'dog',\n    'frog',\n    'horse',\n    'ship',\n    'truck'])\n")),(0,i.kt)("p",null,"Use Keras to load the latest training checkpoint:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# load latest checkpoint\nmodel = load_model('checkpoints/weights-008-1.0783.hdf5')\n")),(0,i.kt)("p",null,"Tensorflow does not like the shape the images are in:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'ValueError: Input 0 of layer "sequential" is incompatible with the layer: expected shape=(None, 32, 32, 3), found shape=(1, 32, 3)\n')),(0,i.kt)("p",null,"We need to take care of that by providing the following function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# prepare test image    \ndef convertCIFER10Data(image):\n    img = image.astype('float32')\n    c = np.zeros(32*32*3).reshape((1,32,32,3))\n    c[0] = img\n    return c\n")),(0,i.kt)("p",null,"Now we can run a prediction loop over a batch of test images:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'# run prediction\nfor i in range(75):\n    # Random test image\n    index = random.randint(0, x_test.shape[0])\n    image = x_test[index]\n    data = convertCIFER10Data(image)\n\n    plt.subplot(10, 10, i+1)\n    plt.tight_layout()\n    plt.imshow(image)\n    plt.axis(\'off\')\n\n    ret = model.predict(data, batch_size=1)\n\n    bestnum = 0.0\n    bestclass = 0\n    for n in [0,1,2,3,4,5,6,7,8,9]:\n        if bestnum < ret[0][n]:\n            bestnum = ret[0][n]\n            bestclass = n\n\n    if y_test[index] == bestclass:\n        plt.title(cifar10_labels[bestclass], fontsize=10)\n        right += 1\n    else:\n        plt.title(cifar10_labels[bestclass] + "!=" + cifar10_labels[y_test[index][0]], color=\'#ff0000\', fontsize=10)\n        mistake += 1\n                                                                   \nplt.show()\nprint("Correct predictions:", right)\nprint("False predictions:", mistake)\nprint("Rate:", right/(mistake + right)*100, \'%\')\n')),(0,i.kt)("p",null,"On average I am seeing correct detection rates of around ",(0,i.kt)("inlineCode",{parentName:"p"},"60%")," which is not so bad for a training run of 25 epochs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Correct predictions: 46\nFalse predictions: 29\nRate: 61.33333333333333 %\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Tensorflow Tiny Image Classification",src:n(88564).Z,width:"1600",height:"839"})))}p.isMDXComponent=!0},26644:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-918471126c0472aad97358a725e1a399.jpg"},25117:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/tf-cifar_01-c8b96b1c42d8bf64757bcc51b4d7f5a9.png"},8329:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/tf-cifar_02-ce05ae2ddcf207158ee13aaf550e3b2a.png"},88564:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/tf-cifar_03-cd6424fce60957bc48c333098a317f00.png"}}]);