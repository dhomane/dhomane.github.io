"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[60207],{3905:(n,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>m});var t=a(67294);function l(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function i(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function s(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){l(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function o(n,e){if(null==n)return{};var a,t,l=function(n,e){if(null==n)return{};var a,t,l={},i=Object.keys(n);for(t=0;t<i.length;t++)a=i[t],e.indexOf(a)>=0||(l[a]=n[a]);return l}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(t=0;t<i.length;t++)a=i[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(l[a]=n[a])}return l}var r=t.createContext({}),p=function(n){var e=t.useContext(r),a=e;return n&&(a="function"==typeof n?n(e):s(s({},e),n)),a},c=function(n){var e=p(n.components);return t.createElement(r.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},d=t.forwardRef((function(n,e){var a=n.components,l=n.mdxType,i=n.originalType,r=n.parentName,c=o(n,["components","mdxType","originalType","parentName"]),d=p(a),m=l,h=d["".concat(r,".").concat(m)]||d[m]||u[m]||i;return a?t.createElement(h,s(s({ref:e},c),{},{components:a})):t.createElement(h,s({ref:e},c))}));function m(n,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof n||l){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var r in e)hasOwnProperty.call(e,r)&&(o[r]=e[r]);o.originalType=n,o.mdxType="string"==typeof n?n:l,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2508:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var t=a(87462),l=(a(67294),a(3905));const i={sidebar_position:9080,slug:"2020-06-16",title:"Salt State",authors:"mpolinowski",tags:["LINUX","Salt"]},s=void 0,o={unversionedId:"DevOps/Salt/2020-06-16--salt-state/index",id:"DevOps/Salt/2020-06-16--salt-state/index",title:"Salt State",description:"Guangzhou, China",source:"@site/docs/DevOps/Salt/2020-06-16--salt-state/index.mdx",sourceDirName:"DevOps/Salt/2020-06-16--salt-state",slug:"/DevOps/Salt/2020-06-16--salt-state/2020-06-16",permalink:"/docs/DevOps/Salt/2020-06-16--salt-state/2020-06-16",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-16--salt-state/index.mdx",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2020-06-16",title:"Salt State",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salt Pillars & Formulas",permalink:"/docs/DevOps/Salt/2020-06-17--salt-pillars-formulas/2020-06-17"},next:{title:"Salty DevOps",permalink:"/docs/DevOps/Salt/2020-06-15--salty-devops/2020-06-15"}},r={},p=[{value:"Setting up your Minions",id:"setting-up-your-minions",level:2},{value:"Installing Apache",id:"installing-apache",level:3},{value:"Configuring Apache",id:"configuring-apache",level:3},{value:"Jinja Scripts",id:"jinja-scripts",level:2},{value:"Conditionals",id:"conditionals",level:3},{value:"Looping",id:"looping",level:3},{value:"Scripts CleanUP",id:"scripts-cleanup",level:3},{value:"Working with Dictionaries",id:"working-with-dictionaries",level:3},{value:"Splitting up our Files",id:"splitting-up-our-files",level:3},{value:"Using Custom Python Scripts",id:"using-custom-python-scripts",level:2}],c={toc:p};function u(n){let{components:e,...i}=n;return(0,l.kt)("wrapper",(0,t.Z)({},c,i,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Guangzhou, China",src:a(48051).Z,width:"1500",height:"515"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#setting-up-your-minions"},"Setting up your Minions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#installing-apache"},"Installing Apache")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#configuring-apache"},"Configuring Apache")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#jinja-scripts"},"Jinja Scripts"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#conditionals"},"Conditionals")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#looping"},"Looping")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#scripts-cleanup"},"Scripts CleanUP")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#working-with-dictionaries"},"Working with Dictionaries")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#splitting-up-our-files"},"Splitting up our Files")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#using-custom-python-scripts"},"Using Custom Python Scripts"))),(0,l.kt)("h2",{id:"setting-up-your-minions"},"Setting up your Minions"),(0,l.kt)("h3",{id:"installing-apache"},"Installing Apache"),(0,l.kt)("p",null,"We can set the state of an Minion inside a YAML file that contains instructions for Salt. Start by creating a folder ",(0,l.kt)("inlineCode",{parentName:"p"},"/srv/salt")," and run ",(0,l.kt)("inlineCode",{parentName:"p"},"git init")," to version your ",(0,l.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/states/all/index.html"},"minion state"),". To make sure that our minion has ",(0,l.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/states/all/salt.states.pkg.html#salt.states.pkg.installed"},"Apache installed")," we will create an ",(0,l.kt)("inlineCode",{parentName:"p"},"apache.sls")," file inside the directory ",(0,l.kt)("strong",{parentName:"p"},"on your MASTER"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"install_apache:\n  pkg.installed:\n   - name: apache2\n")),(0,l.kt)("p",null,"You can now execute this set of instructions on your minion server by running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt ubuntuAsus state.sls apache\n\nubuntuAsus:\n----------\n          ID: install_apache\n    Function: pkg.installed\n        Name: apache2\n      Result: True\n     Comment: The following packages were installed/updated: apache2\n     Started: 15:15:20.619100\n    Duration: 28624.3 ms\n     Changes:   \n              ----------\n              apache2:\n                  ----------\n                  new:\n                      2.4.41-4ubuntu3\n                  old:\n              apache2-bin:\n                  ----------\n                  new:\n                      2.4.41-4ubuntu3\n                  old:\n              apache2-data:\n\nSummary for ubuntuAsus\n------------\nSucceeded: 1 (changed=1)\nFailed:    0\n------------\nTotal states run:     1\nTotal run time:  28.624 s\n")),(0,l.kt)("p",null,"This step had our Minion download a copy of ",(0,l.kt)("inlineCode",{parentName:"p"},"apache.sls")," file from our master and run it's instructions. The master does not need to know how the minion is going to download and install the required software - the OS on our minion makes that decision. Since we have Ubuntu installed on our minion it will run ",(0,l.kt)("inlineCode",{parentName:"p"},"apt-get update && apt-get install apache2"),"."),(0,l.kt)("h3",{id:"configuring-apache"},"Configuring Apache"),(0,l.kt)("p",null,"We can now also make sure that Apache will be ",(0,l.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/states/all/salt.states.service.html#module-salt.states.service"},"enabled and activated as a service")," by adding the following line to our instruction file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"install_apache:\n  pkg.installed:\n   - name: apache2\n\nenable_apache:\n  service.running:\n    - name: apache2\n    - enable: True\n")),(0,l.kt)("p",null,"We can also configure Apache to display a landing page on Port 80:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"install_apache:\n  pkg.installed:\n   - name: apache2\n\nenable_apache:\n  service.running:\n    - name: apache2\n    - enable: True\n\nadd_landing_page:\n  file.managed:\n    - name: /var/www/html/index.html\n    - contents: |\n        <!doctype html>\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n")),(0,l.kt)("p",null,"Now re-run ",(0,l.kt)("inlineCode",{parentName:"p"},"state.sls")," and the default Apache Landing Page will be overwritten by our ",(0,l.kt)("strong",{parentName:"p"},"Hello World"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt ubuntuAsus state.sls apache test=true\n\nsudo salt ubuntuAsus state.sls apache\n")),(0,l.kt)("p",null,"You can visit the website on your minions IP address and port 80. You can get the IP address by running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt ubuntuAsus network.ip_addrs\n\nubuntuAsus:\n    - 10.1.88.0\n    - 172.17.0.1\n    - 192.168.2.111\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},"curl 192.168.2.111\n\n<!doctype html>\n<body><h1>Salty Dayze, Sailor!</h1></body>\n")),(0,l.kt)("h2",{id:"jinja-scripts"},"Jinja Scripts"),(0,l.kt)("h3",{id:"conditionals"},"Conditionals"),(0,l.kt)("p",null,"The Apache install script in this form will only work for Debian-based operating system - the Apache package is called ",(0,l.kt)("inlineCode",{parentName:"p"},"apache2")," on Ubuntu but ",(0,l.kt)("inlineCode",{parentName:"p"},"httpd")," on CentOS. We can use the Jinja script syntax to make our script more robust:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"install_apache:\n  pkg.installed:\n   {% if salt.grains.get('os_family') == 'Debian' %}\n   - name: apache2\n   {% elif salt.grains.get('os_family') == 'RedHat' %}\n   - name: httpd\n   {% endif %}\n\nenable_apache:\n  service.running:\n    {% if salt.grains.get('os_family') == 'Debian' %}\n    - name: apache2\n    {% elif salt.grains.get('os_family') == 'RedHat' %}\n    - name: httpd\n    {% endif %}\n    - enable: True\n\nadd_landing_page:\n  file.managed:\n    - name: /var/www/html/index.html\n    - contents: |\n        <!doctype html>\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n")),(0,l.kt)("p",null,"We can test this script with the ",(0,l.kt)("inlineCode",{parentName:"p"},"state.show_sls")," command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt '*' state.show_sls apache | less\n\nubuntuAsus:\n    ----------\n    enable_apache:\n        ----------\n        __env__:\n            base\n        __sls__:\n            apache\n        service:\n            |_\n              ----------\n              name:\n                  apache2\n            |_\n              ----------\n              enable:\n                  True\n            - running\n            |_\n              ----------\n              order:\n                  10001\n")),(0,l.kt)("p",null,"We can see that our Ubuntu Minion correctly resolved the ",(0,l.kt)("inlineCode",{parentName:"p"},"apache2")," package and not ",(0,l.kt)("inlineCode",{parentName:"p"},"httpd"),"."),(0,l.kt)("h3",{id:"looping"},"Looping"),(0,l.kt)("p",null,"To configure Apache we can now create configuration files in the ",(0,l.kt)("inlineCode",{parentName:"p"},"conf-available")," directory and copy them over into the ",(0,l.kt)("inlineCode",{parentName:"p"},"conf-enabled")," directory to start using them:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"mod_status:\n  file.managed:\n    - name: /etc/apache2/conf-available/mod_status.conf\n    - contents: |\n      <Location '/status'>\n        SetHandler server-status\n      </Location>\n  cmd.run:\n    - name: a2enmod status && a2enconf mod_status\n    - creates: /etc/apache2/conf-enabled/mod_status.conf\n\nmod_info:\n  file.managed:\n    - name: /etc/apache2/conf-available/mod_info.conf\n    - contents: |\n      <Location '/info'>\n        SetHandler server-info\n      </Location>\n  cmd.run:\n    - name: a2enmod info && a2enconf mod_info\n    - creates: /etc/apache2/conf-enabled/mod_info.conf\n")),(0,l.kt)("p",null,"This configuration script can be compacted by writing a for-loop:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"{% for conf in ['status', 'info'] %}\n\nmod_{{ conf }}:\n  file.managed:\n    - name: /etc/apache2/conf-available/mod_{{ conf }}.conf\n    - contents: |\n        <Location '/{{ conf }}'>\n            SetHandler server-{{ conf }}\n        </Location>\n\n  {% if salt.grains.get('os_family') == 'Debian' %}\n  cmd.run:\n    - name: a2enmod {{ conf }} && a2enconf mod_{{ conf }}\n    - creates: /etc/apache2/conf-enabled/mod_{{ conf }}.conf\n  {% endif %}\n\n{% endfor %}\n")),(0,l.kt)("p",null,"The command step is only necessary on Debian systems and can be wrapped into a conditional. We can again test our script:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt '*' state.show_sls mods | less\n\nubuntuAsus:\n    ----------\n    mod_info:\n        ----------\n        __env__:\n            base\n        __sls__:\n            mods\n    ...\n")),(0,l.kt)("h3",{id:"scripts-cleanup"},"Scripts CleanUP"),(0,l.kt)("p",null,"Commenting your scripts and separating logic from state:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"apache.sls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Install vanilla Apache on Debian/RedHat\n\n{% if salt.grains.get('os_family') == 'Debian' %}\n{% set apache_pkg = 'apache2' %}\n{% elif salt.grains.get('os_family') == 'RedHat' %}\n{% set apache_pkg = 'httpd' %}\n{% endif %}\n\ninstall_apache:\n  pkg.installed:\n   - name: {{ apache_pkg }}\n\nenable_apache:\n  service.running:\n    - name: {{ apache_pkg }}\n\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\n    - enable: True\n\n# Adding a blank front page\nadd_landing_page:\n  file.managed:\n    - name: /var/www/html/index.html\n    - contents: |\n        <!doctype html>\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n")),(0,l.kt)("h3",{id:"working-with-dictionaries"},"Working with Dictionaries"),(0,l.kt)("p",null,"Create a lookup dictionary to assign the correct package and service name for each minion:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"apache.sls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Install vanilla Apache on Debian/RedHat\n\n{% set lookup = {\n    'Debian': {\n        'pkg': 'apache2',\n        'srv': 'apache2'\n    },\n    'RedHat': {\n        'pkg': 'httpd',\n        'srv': 'httpd'\n    }\n} %}\n\n{% set apache = lookup[salt.grains.get('os_family')] %}\n\ninstall_apache:\n  pkg.installed:\n   - name: {{ apache.pkg }}\n\nenable_apache:\n  service.running:\n    - name: {{ apache.srv }}\n\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\n    - enable: True\n\n# Adding a blank front page\nadd_landing_page:\n  file.managed:\n    - name: /var/www/html/index.html\n    - contents: |\n        <!doctype html>\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n")),(0,l.kt)("p",null,"making this is a little bit more compact by using ",(0,l.kt)("inlineCode",{parentName:"p"},"grains.filter_by"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt '*' grains.filter_by '{Debian: apache2, RedHat: httpd}'\n\nubuntuAsus:\n    apache2\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"apache.sls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Install vanilla Apache on Debian/RedHat\n\n{% set apache = salt.grains.filter_by({\n    'Debian': {\n        'pkg': 'apache2',\n        'srv': 'apache2'\n    },\n    'RedHat': {\n        'pkg': 'httpd',\n        'srv': 'httpd'\n    }\n}) %}\n\ninstall_apache:\n  pkg.installed:\n   - name: {{ apache.pkg }}\n\nenable_apache:\n  service.running:\n    - name: {{ apache.srv }}\n\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\n    - enable: True\n\n# Adding a blank front page\nadd_landing_page:\n  file.managed:\n    - name: /var/www/html/index.html\n    - contents: |\n        <!doctype html>\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n")),(0,l.kt)("p",null,"Again, you can test your script with ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo salt '*' state.show_sls apache | less"),"."),(0,l.kt)("h3",{id:"splitting-up-our-files"},"Splitting up our Files"),(0,l.kt)("p",null,"We can now break up our configuration file so that every SLS file only does one thing - if possible. We will collect the resulting files inside a subdirectory ",(0,l.kt)("inlineCode",{parentName:"p"},"/srv/salt/apache"),":"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"welcome.sls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Adding a blank front page\nadd_landing_page:\n  file.managed:\n    - name: /var/www/html/index.html\n    - contents: |\n        <!doctype html>\n        <body><h1>Salty Dayze, Sailor!</h1></body>\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"map.sls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Get package/service name per OS version\n{% set apache = salt.grains.filter_by({\n    'Debian': {\n        'pkg': 'apache2',\n        'srv': 'apache2'\n    },\n    'RedHat': {\n        'pkg': 'httpd',\n        'srv': 'httpd'\n    }\n}) %}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"init.sls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Install vanilla Apache on Debian/RedHat\n\n{% from 'apache/map.sls' import apache with context %}\n\ninstall_apache:\n  pkg.installed:\n   - name: {{ apache.pkg }}\n\nenable_apache:\n  service.running:\n    - name: {{ apache.srv }}\n\n    # Will be enabled automatically on Debian but has to be enabled manually on RedHat\n    - enable: True\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"mods.sls")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"{% for conf in ['status', 'info'] %}\n\nmod_{{ conf }}:\n  file.managed:\n    - name: /etc/apache2/conf-available/mod_{{ conf }}.conf\n    - contents: |\n        <Location '/{{ conf }}'>\n            SetHandler server-{{ conf }}\n        </Location>\n\n  {% if salt.grains.get('os_family') == 'Debian' %}\n  cmd.run:\n    - name: a2enmod {{ conf }} && a2enconf mod_{{ conf }}\n    - creates: /etc/apache2/conf-enabled/mod_{{ conf }}.conf\n  {% endif %}\n\n{% endfor %}\n")),(0,l.kt)("p",null,"Again, you can test your script with ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo salt '*' state.show_sls apache | less")),(0,l.kt)("h2",{id:"using-custom-python-scripts"},"Using Custom Python Scripts"),(0,l.kt)("p",null,"You can write your own Python modules and execute them with Salt. Start by creating a folder ",(0,l.kt)("inlineCode",{parentName:"p"},"/srv/salt/_modules")," and add your Python scripts - ",(0,l.kt)("inlineCode",{parentName:"p"},"myUtils.py"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def getDate():\n    return __salt__['cmd.run']('date')\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt '*' saltutil.sync_modules  //sync script with all minions\nsudo salt '*' myUtils.getDate\n\nubuntuAsus:\n    Tue Aug  4 09:19:49 UTC 2020\n")))}u.isMDXComponent=!0},48051:(n,e,a)=>{a.d(e,{Z:()=>t});const t=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-84382f048ade340d9439e0fd8b2d8085.jpg"}}]);