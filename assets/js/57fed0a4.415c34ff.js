"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[10804],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var i=a.createContext({}),c=function(t){var e=a.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,i=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(h,l(l({ref:e},p),{},{components:n})):a.createElement(h,l({ref:e},p))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},38905:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:9080,slug:"2020-12-24",title:"Tomcat 9 Cluster & Loadbalancing",authors:"mpolinowski",tags:["LINUX","Tomcat"]},l=void 0,s={unversionedId:"DevOps/Tomcat/2020-12-24-tomcat9-cluster-and-load-balancing/index",id:"DevOps/Tomcat/2020-12-24-tomcat9-cluster-and-load-balancing/index",title:"Tomcat 9 Cluster & Loadbalancing",description:"Siem Reap, Cambodia",source:"@site/docs/DevOps/Tomcat/2020-12-24-tomcat9-cluster-and-load-balancing/index.md",sourceDirName:"DevOps/Tomcat/2020-12-24-tomcat9-cluster-and-load-balancing",slug:"/DevOps/Tomcat/2020-12-24-tomcat9-cluster-and-load-balancing/2020-12-24",permalink:"/docs/DevOps/Tomcat/2020-12-24-tomcat9-cluster-and-load-balancing/2020-12-24",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Tomcat/2020-12-24-tomcat9-cluster-and-load-balancing/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Tomcat",permalink:"/docs/tags/tomcat"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2020-12-24",title:"Tomcat 9 Cluster & Loadbalancing",authors:"mpolinowski",tags:["LINUX","Tomcat"]},sidebar:"tutorialSidebar",previous:{title:"Tomcat 10 Docker Cluster",permalink:"/docs/DevOps/Tomcat/2020-12-25-tomcat10-docker-cluster/2020-12-25"},next:{title:"Contributing to Apache Tomcat",permalink:"/docs/DevOps/Tomcat/2020-12-24-tomcat9-cluster-and-load-balancing/tomcat/apache-tomcat-9.0.41/CONTRIBUTING"}},i={},c=[{value:"Creating Multiple Server Instances",id:"creating-multiple-server-instances",level:2},{value:"Duplicating our Server Code",id:"duplicating-our-server-code",level:3},{value:"Assigning Server Ports",id:"assigning-server-ports",level:3},{value:"Creating Startup Scripts",id:"creating-startup-scripts",level:3},{value:"Loadbalancing - Vertical Cluster",id:"loadbalancing---vertical-cluster",level:2},{value:"Setting Up NGINX",id:"setting-up-nginx",level:3}],p={toc:c};function u(t){let{components:e,...o}=t;return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Siem Reap, Cambodia",src:n(15655).Z,width:"1500",height:"706"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-multiple-server-instances"},"Creating Multiple Server Instances"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#duplicating-our-server-code"},"Duplicating our Server Code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#assigning-server-ports"},"Assigning Server Ports")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-startup-scripts"},"Creating Startup Scripts")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#loadbalancing---vertical-cluster"},"Loadbalancing - Vertical Cluster"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setting-up-nginx"},"Setting Up NGINX"))))),(0,r.kt)("p",null,"I now want to create several instances of the Tomcat server on a single LINUX server. This is the kind of setup you would use for an microservice driven web app. For this case I will create 1:1 copies of the original server and latter add NGINX in front of it to balance out the load."),(0,r.kt)("h2",{id:"creating-multiple-server-instances"},"Creating Multiple Server Instances"),(0,r.kt)("h3",{id:"duplicating-our-server-code"},"Duplicating our Server Code"),(0,r.kt)("p",null,"Start by copying ",(0,r.kt)("strong",{parentName:"p"},"everything but")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"/lib")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"/bin")," directory from your Tomcat installation dir into 3 new folder next to the installation dir - ",(0,r.kt)("inlineCode",{parentName:"p"},"instance1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"instance2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"instance3"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Directories\n\u251c\u2500\u2500 apache-tomcat-9.0.41\n\u2502  \u251c\u2500\u2500 bin\n\u2502  \u251c\u2500\u2500 conf\n\u2502  \u251c\u2500\u2500 lib\n\u2502  \u251c\u2500\u2500 logs\n\u2502  \u251c\u2500\u2500 temp\n\u2502  \u251c\u2500\u2500 virtual-hosts\n\u2502  \u2502  \u251c\u2500\u2500 host1\n\u2502  \u2502  \u251c\u2500\u2500 host2\n\u2502  \u2502  \u2514\u2500\u2500 host3\n\u2502  \u251c\u2500\u2500 webapps\n\u2502  \u2502  \u251c\u2500\u2500 boilerplate\n\u2502  \u2502  \u251c\u2500\u2500 docs\n\u2502  \u2502  \u251c\u2500\u2500 examples\n\u2502  \u2502  \u251c\u2500\u2500 host-manager\n\u2502  \u2502  \u251c\u2500\u2500 manager\n\u2502  \u2502  \u2514\u2500\u2500 ROOT\n\u2502  \u2514\u2500\u2500 work\n\u251c\u2500\u2500 instance1\n\u2502  \u251c\u2500\u2500 conf\n\u2502  \u251c\u2500\u2500 logs\n\u2502  \u251c\u2500\u2500 temp\n\u2502  \u251c\u2500\u2500 virtual-hosts\n\u2502  \u2502  \u251c\u2500\u2500 host1\n\u2502  \u2502  \u251c\u2500\u2500 host2\n\u2502  \u2502  \u2514\u2500\u2500 host3\n\u2502  \u251c\u2500\u2500 webapps\n\u2502  \u2502  \u251c\u2500\u2500 boilerplate\n\u2502  \u2502  \u251c\u2500\u2500 docs\n\u2502  \u2502  \u251c\u2500\u2500 examples\n\u2502  \u2502  \u251c\u2500\u2500 host-manager\n\u2502  \u2502  \u251c\u2500\u2500 manager\n\u2502  \u2502  \u2514\u2500\u2500 ROOT\n\u2502  \u2514\u2500\u2500 work\n\u251c\u2500\u2500 instance2\n\u2502  \u251c\u2500\u2500 conf\n\u2502  \u251c\u2500\u2500 logs\n\u2502  \u251c\u2500\u2500 temp\n\u2502  \u251c\u2500\u2500 virtual-hosts\n\u2502  \u2502  \u251c\u2500\u2500 host1\n\u2502  \u2502  \u251c\u2500\u2500 host2\n\u2502  \u2502  \u2514\u2500\u2500 host3\n\u2502  \u251c\u2500\u2500 webapps\n\u2502  \u2502  \u251c\u2500\u2500 boilerplate\n\u2502  \u2502  \u251c\u2500\u2500 docs\n\u2502  \u2502  \u251c\u2500\u2500 examples\n\u2502  \u2502  \u251c\u2500\u2500 host-manager\n\u2502  \u2502  \u251c\u2500\u2500 manager\n\u2502  \u2502  \u2514\u2500\u2500 ROOT\n\u2502  \u2514\u2500\u2500 work\n\u251c\u2500\u2500 instance3\n\u2502  \u251c\u2500\u2500 conf\n\u2502  \u251c\u2500\u2500 logs\n\u2502  \u251c\u2500\u2500 temp\n\u2502  \u251c\u2500\u2500 virtual-hosts\n\u2502  \u2502  \u251c\u2500\u2500 host1\n\u2502  \u2502  \u251c\u2500\u2500 host2\n\u2502  \u2502  \u2514\u2500\u2500 host3\n\u2502  \u251c\u2500\u2500 webapps\n\u2502  \u2502  \u251c\u2500\u2500 boilerplate\n\u2502  \u2502  \u251c\u2500\u2500 docs\n\u2502  \u2502  \u251c\u2500\u2500 examples\n\u2502  \u2502  \u251c\u2500\u2500 host-manager\n\u2502  \u2502  \u251c\u2500\u2500 manager\n\u2502  \u2502  \u2514\u2500\u2500 ROOT\n\u2502  \u2514\u2500\u2500 work\n")),(0,r.kt)("h3",{id:"assigning-server-ports"},"Assigning Server Ports"),(0,r.kt)("p",null,"Now we need to give each instance a unique set of ports to operate on. This can be set inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"./conf/server.xml")," of each instance, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"nano /opt/tomcat/instance1/conf/server.xml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<Server port="8105" shutdown="SHUTDOWN">\n\n...\n\n<Connector port="8180" protocol="HTTP/1.1" connectionTimeout="20000" />\n\n...\n\n\x3c!-- <Connector protocol="org.apache.coyote.http11.Http11NioProtocol"\n               port="8443" maxThreads="200"\n               scheme="https" secure="true" SSLEnabled="true"\n               keystoreFile="/opt/tomcat/ssl/sslKey.jks" keystorePass="instar"\n               clientAuth="false" sslProtocol="TLS"/> --\x3e\n\n...\n\n<Connector protocol="AJP/1.3" port="8109" />\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"I am removing the self-signed certificate as I am going to use NGINX later to handle my CA certificate.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Instance"),(0,r.kt)("th",{parentName:"tr",align:null},"Shutdown Port"),(0,r.kt)("th",{parentName:"tr",align:null},"HTTP Port"),(0,r.kt)("th",{parentName:"tr",align:null},"AJP Port"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Base"),(0,r.kt)("td",{parentName:"tr",align:null},"8005"),(0,r.kt)("td",{parentName:"tr",align:null},"8080"),(0,r.kt)("td",{parentName:"tr",align:null},"8009")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Instance1"),(0,r.kt)("td",{parentName:"tr",align:null},"8105"),(0,r.kt)("td",{parentName:"tr",align:null},"8180"),(0,r.kt)("td",{parentName:"tr",align:null},"8109")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Instance2"),(0,r.kt)("td",{parentName:"tr",align:null},"8205"),(0,r.kt)("td",{parentName:"tr",align:null},"8280"),(0,r.kt)("td",{parentName:"tr",align:null},"8209")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Instance3"),(0,r.kt)("td",{parentName:"tr",align:null},"8305"),(0,r.kt)("td",{parentName:"tr",align:null},"8380"),(0,r.kt)("td",{parentName:"tr",align:null},"8309")))),(0,r.kt)("h3",{id:"creating-startup-scripts"},"Creating Startup Scripts"),(0,r.kt)("p",null,"Now we need a new ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," folder inside the tomcat directory to create startup and stop scripts for our new instances - ",(0,r.kt)("inlineCode",{parentName:"p"},"mkdir /opt/tomcat/scripts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/tomcat/scripts/start-instance1.sh\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nexport CATALINA_HOME="/opt/tomcat/latest"\nexport CATALINA_BASE="/opt/tomcat/instance1"\n\ncd $CATALINA_HOME/bin\n./startup.sh\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /opt/tomcat/scripts/stop-instance1.sh\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nexport CATALINA_HOME="/opt/tomcat/latest"\nexport CATALINA_BASE="/opt/tomcat/instance1"\n\ncd $CATALINA_HOME/bin\n./shutdown.sh\n')),(0,r.kt)("p",null,"Create both scripts for all your instances:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"scripts\n\u251c\u2500\u2500 start-instance1.sh\n\u251c\u2500\u2500 start-instance2.sh\n\u251c\u2500\u2500 start-instance3.sh\n\u251c\u2500\u2500 stop-instance1.sh\n\u251c\u2500\u2500 stop-instance2.sh\n\u2514\u2500\u2500 stop-instance3.sh\n")),(0,r.kt)("p",null,"And make those scripts executable with ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod -R 755 /opt/tomcat/scripts"),". You can now start all instances by running each startup script like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/opt/tomcat/scripts/start-instance1.sh\n\nUsing CATALINA_BASE:   /opt/tomcat/instance1\nUsing CATALINA_HOME:   /opt/tomcat/latest\nUsing CATALINA_TMPDIR: /opt/tomcat/instance1/temp\nUsing JRE_HOME:        /usr\nUsing CLASSPATH:       /opt/tomcat/latest/bin/bootstrap.jar:/opt/tomcat/latest/bin/tomcat-juli.jar\nUsing CATALINA_OPTS:\nTomcat started.\n")),(0,r.kt)("p",null,"After making sure that the ports you specified for those 3 instances: ",(0,r.kt)("inlineCode",{parentName:"p"},"ufw allow 8180/tcp"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ufw allow 8280/tcp"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ufw allow 8380/tcp")," - try accessing the 4 different versions of the virtual host we created earlier with your browser:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"http://virtual-host1.com:8180/\nhttp://virtual-host1.com:8280/\nhttp://virtual-host1.com:8380/\n")),(0,r.kt)("h2",{id:"loadbalancing---vertical-cluster"},"Loadbalancing - Vertical Cluster"),(0,r.kt)("p",null,"I now have 3 virtual hosts (instances) that I can target by a unique port:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Port 8180 -> Instance 1"),(0,r.kt)("li",{parentName:"ul"},"Port 8280 -> Instance 2"),(0,r.kt)("li",{parentName:"ul"},"Port 8380 -> Instance 3")),(0,r.kt)("p",null,"Each of them hosts 3 web applications that will respond to one of the following addresses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"virtual-host1.com"),(0,r.kt)("li",{parentName:"ul"},"virtual-host2.com"),(0,r.kt)("li",{parentName:"ul"},"virtual-host3.com")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Before I only added these addresses to the PC I am working on. I now also have to add them to ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/hosts")," on my LINUX server and resolve them to ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),". Verify that you can reach your virtual host before proceeding:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl virtual-host1.com:8180\n\n<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n<head>\n<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">\n<title>Tomcat Boilerplate</title>\n</head>\n<body>\n\n<h1>Hello from Virtual Host 1</h1>\n<h3>Virtual Host Address: http://virtual-host1.com:8180/</h3>\n</body>\n</html>#\n')),(0,r.kt)("h3",{id:"setting-up-nginx"},"Setting Up NGINX"),(0,r.kt)("p",null,"I am going to use the ",(0,r.kt)("a",{parentName:"p",href:"http://nginx.org/en/docs/http/ngx_http_upstream_module.html"},"NGINX Upstream Module")," to set up a Round-Robin traffic balancing for the 3 virtual hosts that we just created:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"NGINX Loadbalancer",src:n(4521).Z,width:"751",height:"768"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"server {\n    listen 80;\n    listen [::]:80;\n\n    server_name virtual-host1.com virtual-host2.com virtual-host3.com;\n\n    return 301 https://$server_name$request_uri;\n}\n\n\nupstream tc1_servlets {\n    server virtual-host1.com:8180;\n    server virtual-host1.com:8280;\n    server virtual-host1.com:8380;\n}\n\nserver {\n    listen      443 ssl http2;\n    listen      [::]:443 ssl http2;\n    include     conf.d/self-signed.conf;\n    include     conf.d/ssl-params.conf;\n    include     conf.d/header.conf;\n\n    server_name virtual-host1.com;\n\n    location = / {\n        proxy_pass http://tc1_servlets;\n    }\n\n    error_page  404              /404.html;\n    error_page  500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n\n\nupstream tc2_servlets {\n    server virtual-host2.com:8180;\n    server virtual-host2.com:8280;\n    server virtual-host2.com:8380;\n}\n\nserver {\n    listen      443 ssl http2;\n    listen      [::]:443 ssl http2;\n    include     conf.d/self-signed.conf;\n    include     conf.d/ssl-params.conf;\n    include     conf.d/header.conf;\n\n    server_name virtual-host2.com;\n\n    location = / {\n        proxy_pass http://tc2_servlets;\n    }\n\n    error_page  404              /404.html;\n    error_page  500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n\n\nupstream tc3_servlets {\n    server virtual-host3.com:8180;\n    server virtual-host3.com:8280;\n    server virtual-host3.com:8380;\n}\n\nserver {\n    listen      443 ssl http2;\n    listen      [::]:443 ssl http2;\n    include     conf.d/self-signed.conf;\n    include     conf.d/ssl-params.conf;\n    include     conf.d/header.conf;\n\n    server_name virtual-host3.com;\n\n    location = / {\n        proxy_pass http://tc3_servlets;\n    }\n\n    error_page  404              /404.html;\n    error_page  500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n")))}u.isMDXComponent=!0},4521:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/NGINX_Loadbalancer_01-4cbb51c6b0ab080065e73e289bba2091.png"},15655:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-dbec03b1535301c8b293ac3087af0dd4.jpg"}}]);