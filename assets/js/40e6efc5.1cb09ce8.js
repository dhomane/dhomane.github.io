"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[6776],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),g=r,m=d["".concat(i,".").concat(g)]||d[g]||u[g]||l;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},27849:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:7e3,slug:"2021-08-25",title:"Hashicorp Vault - Logging",authors:"mpolinowski",tags:["Vault","Linux"]},o=void 0,s={unversionedId:"DevOps/Hashicorp/2021-08-25--hashicorp-vault-logging/index",id:"DevOps/Hashicorp/2021-08-25--hashicorp-vault-logging/index",title:"Hashicorp Vault - Logging",description:"Shenzhen, China",source:"@site/docs/DevOps/Hashicorp/2021-08-25--hashicorp-vault-logging/index.md",sourceDirName:"DevOps/Hashicorp/2021-08-25--hashicorp-vault-logging",slug:"/DevOps/Hashicorp/2021-08-25--hashicorp-vault-logging/2021-08-25",permalink:"/docs/DevOps/Hashicorp/2021-08-25--hashicorp-vault-logging/2021-08-25",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2021-08-25--hashicorp-vault-logging/index.md",tags:[{label:"Vault",permalink:"/docs/tags/vault"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:7e3,frontMatter:{sidebar_position:7e3,slug:"2021-08-25",title:"Hashicorp Vault - Logging",authors:"mpolinowski",tags:["Vault","Linux"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Terraform - Setup",permalink:"/docs/DevOps/Hashicorp/2021-09-05--hashicorp-terraform-setup/2021-09-05"},next:{title:"Hashicorp Vault - Rest API",permalink:"/docs/DevOps/Hashicorp/2021-08-23--hashicorp-vault-rest-api/2021-08-23"}},i={},p=[{value:"Configure Logging",id:"configure-logging",level:2},{value:"Override",id:"override",level:3},{value:"Verify",id:"verify",level:3},{value:"Log Auditing",id:"log-auditing",level:2},{value:"Log Backup",id:"log-backup",level:3},{value:"Testing",id:"testing",level:4},{value:"Setting up Auto-Sync",id:"setting-up-auto-sync",level:3},{value:"Debugging",id:"debugging",level:4}],c={toc:p};function u(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shenzhen, China",src:a(55065).Z,width:"1500",height:"344"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configure-logging"},"Configure Logging"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#override"},"Override")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#verify"},"Verify")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#log-auditing"},"Log Auditing"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#log-backup"},"Log Backup"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#testing"},"Testing")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#setting-up-auto-sync"},"Setting up Auto-Sync"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#debugging"},"Debugging"))))))),(0,r.kt)("h2",{id:"configure-logging"},"Configure Logging"),(0,r.kt)("p",null,"Define the desired ",(0,r.kt)("inlineCode",{parentName:"p"},"log_level")," (",(0,r.kt)("strong",{parentName:"p"},"Trace"),", ",(0,r.kt)("strong",{parentName:"p"},"Debug"),", ",(0,r.kt)("strong",{parentName:"p"},"Info"),", ",(0,r.kt)("strong",{parentName:"p"},"Warn")," or ",(0,r.kt)("strong",{parentName:"p"},"Error"),") in your Vault server config:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/vault.d/config.hcl\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'storage "consul" {\n    address = "192.168.2.110:8500"\n    path = "vault/"\n}\nlistener "tcp" {\n    address = "192.168.2.110:8200"\n    tls_disable = 1\n}\napi_addr = "http://192.168.2.110:8200"\ncluster_addr = "https://192.168.2.110:8201"\nlog_level = "Debug"\nui = true\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"service vault restart\nservice vault status\n")),(0,r.kt)("h3",{id:"override"},"Override"),(0,r.kt)("p",null,"You can set an environment variable to override the log level set in the Vault config - either add it to your bash config or export it directly so it only remains active for the running session:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export VAULT_LOG_LEVEL=trace\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"So far I have been using the Vault UI to unseal Vault after every system reboot. To do it with the CLI run the command ",(0,r.kt)("inlineCode",{parentName:"p"},"vault operator unseal")," three times with three different operator keys.")),(0,r.kt)("h3",{id:"verify"},"Verify"),(0,r.kt)("p",null,"I can verify that logging is enabled by following along with ",(0,r.kt)("inlineCode",{parentName:"p"},"journalctl"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo journalctl -f -b --no-pager -u vault\n\n-- Logs begin at Sat 2021-09-18 09:32:14 HKT. --\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.177+0800 [DEBUG] identity: groups collected: num_existing=0\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.177+0800 [INFO]  identity: groups restored\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.177+0800 [DEBUG] expiration: leases collected: num_existing=5\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.180+0800 [INFO]  expiration: lease restore complete\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.180+0800 [DEBUG] core: request forwarding setup function\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.180+0800 [DEBUG] core: clearing forwarding clients\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.180+0800 [DEBUG] core: done clearing forwarding clients\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.180+0800 [DEBUG] core: leaving request forwarding setup function\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.181+0800 [INFO]  core: usage gauge collection is disabled\nSep 18 12:15:06 consul-master vault[20295]: 2021-09-18T12:15:06.182+0800 [INFO]  core: post-unseal setup complete\n")),(0,r.kt)("h2",{id:"log-auditing"},"Log Auditing"),(0,r.kt)("p",null,"To collect those logs on a separate server I can enable the Vault audit function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkdir /var/log/vault\nvault audit enable file file_path=/var/log/vault/audit.log\nSuccess! Enabled the file audit device at: file/\n")),(0,r.kt)("p",null,"Verify that the log file is being written to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat /var/log/vault/audit.log | jq\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "time": "2021-09-18T05:02:41.431179781Z",\n  "type": "request",\n  "auth": {\n    "token_type": "default"\n  },\n  "request": {\n    "id": "fe5f6943-0a7b-4a21-05f3-5c5bb47e94e3",\n    "operation": "update",\n    "namespace": {\n      "id": "root"\n    },\n    "path": "sys/audit/test"\n  }\n}\n{\n  "time": "2021-09-18T05:02:41.447768489Z",\n  "type": "response",\n  "auth": {\n    "client_token": "hmac-sha256:b4ff29e865438f90b797f4cad389faf79c6a8093fc61f5b0f300b9568afa1524",\n    "accessor": "hmac-sha256:79961a93a15a45e8e6b556f67c3003b9eebc809b52d4f1d2364394c3651b2c79",\n    "display_name": "root",\n    "policies": [\n      "root"\n    ],\n    "token_policies": [\n      "root"\n    ],\n    "token_type": "service",\n    "token_issue_time": "2021-09-12T19:18:36+08:00"\n  },\n  "request": {\n    "id": "d4590f68-9598-f870-39cd-ba3e42ed6a02",\n    "operation": "update",\n    "mount_type": "system",\n    "client_token": "hmac-sha256:b4ff29e865438f90b797f4cad389faf79c6a8093fc61f5b0f300b9568afa1524",\n    "client_token_accessor": "hmac-sha256:79961a93a15a45e8e6b556f67c3003b9eebc809b52d4f1d2364394c3651b2c79",\n    "namespace": {\n      "id": "root"\n    },\n    "path": "sys/audit/file",\n    "data": {\n      "description": "hmac-sha256:d3a21d3083e102f9231bf9946addf6bbf3ae4611e46b88d81698cb6f322dc3df",\n      "local": false,\n      "options": {\n        "file_path": "hmac-sha256:c3ca67685459c365d181c445c3203c314b0d33150b71f94261f1a13cd4abbbca"\n      },\n      "type": "hmac-sha256:a8f9437a7116d5b9d0ba1ebb1ad9e836337bf24d4eccff441e49475c41c3c702"\n    },\n    "remote_address": "192.168.2.110"\n  },\n  "response": {\n    "mount_type": "system"\n  }\n}\n')),(0,r.kt)("p",null,"Now I could use ",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Elasticsearch/2021-03-21-logstash-digesting-data/2021-03-21"},"Logstash")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Elasticsearch/2021-03-30-elasticsearch7-and-filebeats/2021-03-30"},"Elastic Filebeat")," to consume the logfile. Or just copy it to another server to be ingested on demand."),(0,r.kt)("h3",{id:"log-backup"},"Log Backup"),(0,r.kt)("p",null,"I will need an SSH keypair to be able to setup ",(0,r.kt)("inlineCode",{parentName:"p"},"rsync")," to synchronize the logfile on my ",(0,r.kt)("strong",{parentName:"p"},"Vault Server")," (",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.2.110"),") with an identical file on the ",(0,r.kt)("strong",{parentName:"p"},"Logging Server")," (",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.2.111"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ssh-keygen\n\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /root/.ssh/id_rsa.\nYour public key has been saved in /root/.ssh/id_rsa.pub.\n")),(0,r.kt)("p",null,"And copy the content of the public key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat ~/.ssh/id_rsa.pub\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7+KtKrz1OcGqfR6yCf/iWMkyva7cJNEEWF8axAZPQ4Y0p1A1dgkk2Tj2WZ5yskcGB8p7f2k1fCrelTnIOCemeVoxEZJcYmWvFyzt30Ih0XzGJWa3LuCWOxbyB5lALlwRhWKMxzeAGPeDQwsBgo5U3M3vS3mZ400fhodg56+P7/VM2GGxQIY4QWkqNZeb1xbkymYWpfnUiqa867kZoGslGAU8sGpODxSjCccsAXV70OtaYA2eNHXkjkznWxFs9SjeESyEApKn0WwTkF38iSuCvdLl1VpjXqrV7tr5nZhB4IShLTpjJgpOT2QTQICDDB4lu9LB4BUwR6E+k9ijpjU7cCflOnz89t7UZExFM1b8zhF1do4/6zvNJECvGoNZq5W105BNEXrN8m9HcU4IUzIvRq4FISLt+5wCJnnN8cQ4Atkj97Xc3qeBRT+2z8bv5oDCheA8rfjxFC5Nw+RwEELMHgVH8tkFUcmKoid3ZhBNs+CgQs01aA+Zm0phvrdc2AsU= myuser@consul-master\n")),(0,r.kt)("p",null,"Into the authorized keys on the ",(0,r.kt)("strong",{parentName:"p"},"Logging Server"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano ~/.ssh/authorized_keys\nchmod 700 ~/.ssh\nchmod 644 ~/.ssh/authorized_keys\n")),(0,r.kt)("p",null,"Or us ",(0,r.kt)("inlineCode",{parentName:"p"},"ssh_copy")," to add your users public key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo ssh-copy-id root@192.168.2.111\n/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/root/.ssh/id_rsa.pub"\n/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nroot@192.168.2.111\'s password:\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   "ssh \'root@192.168.2.111\'"\nand check to make sure that only the key(s) you wanted were added.\n')),(0,r.kt)("p",null,"And uncomment the line ",(0,r.kt)("inlineCode",{parentName:"p"},"PubkeyAuthentication yes")," in the:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/ssh/sshd_config\nsystemctl restart sshd\n")),(0,r.kt)("h4",{id:"testing"},"Testing"),(0,r.kt)("p",null,"To test the connection I can simply run ",(0,r.kt)("inlineCode",{parentName:"p"},"ssh root@192.168.2.111")," and this now logs me in to my logging server without asking for a password. But when testing ",(0,r.kt)("inlineCode",{parentName:"p"},"rsync")," by creating a file ",(0,r.kt)("inlineCode",{parentName:"p"},"test.txt")," on the Vault server I ran into 2 error messages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo rsync -a ~/test.txt root@192.168.2.111:/opt/test.txt\nzsh:1: command not found: rsync\nrsync: connection unexpectedly closed (0 bytes received so far) [sender]\nrsync error: error in rsync protocol data stream (code 12) at io.c(226) [sender=3.1.3]\n")),(0,r.kt)("p",null,"For the ",(0,r.kt)("inlineCode",{parentName:"p"},"rsync")," Error I checked ",(0,r.kt)("inlineCode",{parentName:"p"},"rsync --version")," on my logging server and saw that the software was not installed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt-get install rsync\n\nrsync --version\nrsync  version 3.2.3  protocol version 31\n")),(0,r.kt)("p",null,"Re-running the test now was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo rsync -a ~/test.txt root@192.168.2.111:/opt/test.txt\n")),(0,r.kt)("p",null,"And the text file appeared on my logging server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat /opt/test.txt\nhello\n")),(0,r.kt)("h3",{id:"setting-up-auto-sync"},"Setting up Auto-Sync"),(0,r.kt)("p",null,"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"rsync")," to update the logfile on our logging server whenever Vault adds a line to it we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"incron"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt install incron\nservice incrond start\nservice incrond status\n")),(0,r.kt)("p",null,"And configure it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/incron.allow\n")),(0,r.kt)("p",null,"Using incrontab commands you can list (-l), edit (-e), and remove (-r) incrontab entries:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"incrontab -l"),(0,r.kt)("li",{parentName:"ul"},"incrontab -e"),(0,r.kt)("li",{parentName:"ul"},"incrontab -r")),(0,r.kt)("p",null,"And add the user you are going to use - in my case just ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),". Now I can create the ",(0,r.kt)("inlineCode",{parentName:"p"},"crontab")," for the watch task:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo incrontab -e\n")),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"<path>  <mask>  <command>\n")),(0,r.kt)("p",null,"Here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"path")," is absolute path of the directory to watch.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"mask")," is event mask(in symbolic or numerical form).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Event Symbols (Masks):"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_ACCESS"),": File was accessed (read)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_ATTRIB"),": Metadata changed (permissions, timestamps, extended attributes, etc.)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_CLOSE_WRITE"),": File opened for writing was closed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_CLOSE_NOWRITE"),": File not opened for writing was closed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_CREATE"),": File/directory created in watched directory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_DELETE"),": File/directory deleted from watched directory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_DELETE_SELF"),": Watched file/directory was itself deleted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_MODIFY"),": File was modified."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_MOVE_SELF"),": Watched file/directory was itself moved."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_MOVED_FROM"),": File moved out of watched directory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_MOVED_TO"),": File moved into watched directory."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"IN_OPEN"),": File was opened."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"command")," is executable file (or script) with its arguments."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The following wildcards may be used inside the command specification.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\\$\\$")," Prints a dollar sign"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\\$@")," Add the watched filesystem path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\\$#")," Add the event-related file name"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\\$%")," Add the event flags (textually)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"\\$&")," Add the event flags (numerically)")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/var/log/vault/audit.log        IN_MODIFY       rsync -a /var/log/vault/audit.log root@192.168.2.111:/opt/vault/audit.log\n")),(0,r.kt)("p",null,"Make sure the job was saved:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo incrontab -l\n/var/log/vault/audit.log        IN_MODIFY       rsync -a /var/log/vault/audit.log root@192.168.2.111:/opt/vault/audit.log\n")),(0,r.kt)("h4",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"It works... I just had a typo in my cron job... I keep the debugging section below ~ it lead me to the issue.")),(0,r.kt)("p",null,"This did not work at first. So I checked the configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat /etc/incron.conf\n")),(0,r.kt)("p",null,"The allowed users were set correctly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"# Parameter:   allowed_users\n# Meaning:     allowed users list file\n# Description: This file contains users allowed to use incron.\n# Default:     /etc/incron.allow\n")),(0,r.kt)("p",null,"I read that you have to create an empty file with your user name as file name in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/incron/allow")," but this seems to be happening automatically when you added your username to ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/incron.allow"),"."),(0,r.kt)("p",null,"Then I re-checked the service status:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"service incrond status\n\nSep 18 16:28:13 consul-master systemd[1]: Starting Inotify System Scheduler...\nSep 18 16:28:13 consul-master incrond[64272]: loading system tables\nSep 18 16:28:13 consul-master systemd[1]: Started Inotify System Scheduler.\nSep 18 16:28:13 consul-master incrond[64272]: loading user tables\nSep 18 16:28:13 consul-master incrond[64272]: loading table for user root\nSep 18 16:28:13 consul-master incrond[64272]: access denied on /var/log/vault_audit.log - events will be discarded silently\nSep 18 16:28:13 consul-master incrond[64272]: cannot create watch for user root: (2) No such file or directory\nSep 18 16:28:13 consul-master incrond[64272]: ready to process filesystem events\n")),(0,r.kt)("p",null,"And saw that the access to ",(0,r.kt)("inlineCode",{parentName:"p"},"/var/log/vault_audit.log")," was denied. I made sure that the root user had access to this file and even set it to ",(0,r.kt)("inlineCode",{parentName:"p"},"mode 777")," - no chance."),(0,r.kt)("p",null,"So I created a second job for the ",(0,r.kt)("inlineCode",{parentName:"p"},"test.txt")," file from earlier ",(0,r.kt)("inlineCode",{parentName:"p"},"sudo incrontab -e"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/home/myuser/test.txt   IN_MODIFY    rsync -a /home/myuser/test.txt root@192.168.2.111:/opt/test.txt\n")),(0,r.kt)("p",null,"After restarting the service ",(0,r.kt)("inlineCode",{parentName:"p"},"service incrond restart")," I was able to edit this file and see the changes in ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/test.txt")," on my logging server - so it is working after all."),(0,r.kt)("p",null,"So I decided to change the log folder for Vault:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vault audit disable file\nSuccess! Disabled audit device (if it was enabled) at: file/\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /opt/vault\nvault audit enable file file_path=/opt/vault/audit.log\nSuccess! Enabled the file audit device at: file/\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo incrontab -l\n/opt/vault/audit.log        IN_MODIFY       sudo rsync -a /opt/vault/audit.log root@192.168.2.111:/opt/vault/audit.log\n")))}u.isMDXComponent=!0},55065:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-d0a359bd3026ecf28cc169f54ea98351.jpg"}}]);