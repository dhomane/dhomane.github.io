"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[64012],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>d});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},g=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=i,f=p["".concat(o,".").concat(d)]||p[d]||c[d]||l;return t?a.createElement(f,r(r({ref:n},g),{},{components:t})):a.createElement(f,r({ref:n},g))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var u=2;u<l;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},73369:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=t(87462),i=(t(67294),t(3905));const l={sidebar_position:9020,slug:"2020-06-22",title:"NGINX Salt State",authors:"mpolinowski",tags:["LINUX","Salt"]},r=void 0,s={unversionedId:"DevOps/Salt/2020-06-22--salt-nginx-state/index",id:"DevOps/Salt/2020-06-22--salt-nginx-state/index",title:"NGINX Salt State",description:"TST, Hong Kong",source:"@site/docs/DevOps/Salt/2020-06-22--salt-nginx-state/index.md",sourceDirName:"DevOps/Salt/2020-06-22--salt-nginx-state",slug:"/DevOps/Salt/2020-06-22--salt-nginx-state/2020-06-22",permalink:"/docs/DevOps/Salt/2020-06-22--salt-nginx-state/2020-06-22",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-22--salt-nginx-state/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2020-06-22",title:"NGINX Salt State",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Saltstack Refresh Course 1: Setup",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-1-setup/2020-06-23"},next:{title:"Salt Beacons Module",permalink:"/docs/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/2020-06-21"}},o={},u=[{value:"Nginx State File",id:"nginx-state-file",level:2},{value:"Nginx Package and Service States",id:"nginx-package-and-service-states",level:3},{value:"Nginx Configuration File States",id:"nginx-configuration-file-states",level:3},{value:"Creating the Master Files",id:"creating-the-master-files",level:2},{value:"NGINX Config",id:"nginx-config",level:3},{value:"NGINX Default Server",id:"nginx-default-server",level:3},{value:"NGINX Default Frontpage Template",id:"nginx-default-frontpage-template",level:3},{value:"Testing the Nginx State File",id:"testing-the-nginx-state-file",level:2}],g={toc:u};function c(e){let{components:n,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},g,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"TST, Hong Kong",src:t(56372).Z,width:"1500",height:"640"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#nginx-state-file"},"Nginx State File"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#nginx-package-and-service-states"},"Nginx Package and Service States")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#creating-the-master-files"},"Creating the Master Files"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#nginx-config"},"NGINX Config")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#nginx-default-server"},"NGINX Default Server")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#nginx-default-frontpage-template"},"NGINX Default Frontpage Template")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#testing-the-nginx-state-file"},"Testing the Nginx State File"))),(0,i.kt)("p",null,"Configuration management with Salt State for an NGINX web proxy."),(0,i.kt)("h2",{id:"nginx-state-file"},"Nginx State File"),(0,i.kt)("p",null,"To start off our Nginx configuration, we\u2019ll create a directory in this location specific to the software we are configuring. Then create an ",(0,i.kt)("inlineCode",{parentName:"p"},"init.sls")," file within this directory to get started::"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /srv/salt/nginx\nnano /srv/salt/nginx/init.sls\n")),(0,i.kt)("h3",{id:"nginx-package-and-service-states"},"Nginx Package and Service States"),(0,i.kt)("p",null,"First we want to make sure that NGINX is installed on our Minion and the service is running:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"nginx/init.sls")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"nginx:\n  pkg:\n    - installed\n  service.running:\n    - watch:\n        - pkg: nginx\n        - file: /etc/nginx/nginx.conf\n        - file: /etc/nginx/sites-available/default\n")),(0,i.kt)("p",null,"Nginx should automatically reload when the package is updated, when the main configuration file has been changed, or when the default server block file is modified. We can tell Salt to restart the Nginx service when these conditions occur by using ",(0,i.kt)("inlineCode",{parentName:"p"},"watch"),"."),(0,i.kt)("h3",{id:"nginx-configuration-file-states"},"Nginx Configuration File States"),(0,i.kt)("p",null,"We now want to define the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/nginx/nginx.conf")," file on the master server and upload it to each minion who needs it. ",(0,i.kt)("a",{parentName:"p",href:"#creating-the-master-files"},"We will later create this default configuration file")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"/srv/salt/nginx/files/etc/nginx"),":"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"nginx/init.sls")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"nginx:\n  pkg:\n    - installed\n  service.running:\n    - watch:\n        - pkg: nginx\n        - file: /etc/nginx/nginx.conf\n        - file: /etc/nginx/sites-available/default\n\n/etc/nginx/nginx.conf:\n  file.managed:\n    - source: salt://nginx/files/etc/nginx/nginx.conf\n    - user: root\n    - group: root\n    - mode: 640\n")),(0,i.kt)("p",null,"Additionally we need to define the server block that controls how our content will be served with the ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/nginx/sites-available/default")," file. The difference here is that this file has to be a ",(0,i.kt)("strong",{parentName:"p"},"Jinja")," template. This means that we can pull information from each host and construct an appropriate, customized version of the file for each of our web servers:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"nginx/init.sls")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"nginx:\n  pkg:\n    - installed\n  service.running:\n    - watch:\n        - pkg: nginx\n        - file: /etc/nginx/nginx.conf\n        - file: /etc/nginx/sites-available/default\n\n/etc/nginx/nginx.conf:\n  file.managed:\n    - source: salt://nginx/files/etc/nginx/nginx.conf\n    - user: root\n    - group: root\n    - mode: 640\n\n/etc/nginx/sites-available/default:\n  file.managed:\n    - source: salt://nginx/files/etc/nginx/sites-available/default.jinja\n    - template: jinja\n    - user: root\n    - group: root\n    - mode: 640\n")),(0,i.kt)("p",null,"Now, we just need to create a state for our ",(0,i.kt)("inlineCode",{parentName:"p"},"index.html")," file which will be the frontpage for our site:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"nginx/init.sls")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"nginx:\n  pkg:\n    - installed\n  service.running:\n    - watch:\n        - pkg: nginx\n        - file: /etc/nginx/nginx.conf\n        - file: /etc/nginx/sites-available/default\n\n/etc/nginx/nginx.conf:\n  file.managed:\n    - source: salt://nginx/files/etc/nginx/nginx.conf\n    - user: root\n    - group: root\n    - mode: 640\n\n/etc/nginx/sites-available/default:\n  file.managed:\n    - source: salt://nginx/files/etc/nginx/sites-available/default.jinja\n    - template: jinja\n    - user: root\n    - group: root\n    - mode: 640\n\n/usr/share/nginx/html/index.html:\n  file.managed:\n    - source: salt://nginx/files/usr/share/nginx/html/index.html.jinja\n    - template: jinja\n    - user: root\n    - group: root\n    - mode: 644\n")),(0,i.kt)("h2",{id:"creating-the-master-files"},"Creating the Master Files"),(0,i.kt)("p",null,"To get the default NGINX configuration files we can install it manually on our Minion using Salt:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"salt ubuntuMaster pkg.install nginx\n")),(0,i.kt)("p",null,"We can now configure our master to allow file transfers from Minions ",(0,i.kt)("inlineCode",{parentName:"p"},"nano /etc/salt/master.d/local.conf"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"# Allow minions to push files to the master. This is disabled by default, for\n# security purposes.\nfile_recv: True\n")),(0,i.kt)("p",null,"Save and ",(0,i.kt)("inlineCode",{parentName:"p"},"systemctl restart salt-master")," your master. We can now grab the default versions of the files we\u2019ll be managing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"salt ubuntuMaster cp.push /etc/nginx/nginx.conf\nsalt ubuntuMaster cp.push /etc/nginx/sites-available/default\nsalt ubuntuMaster cp.push /usr/share/nginx/html/index.html\n")),(0,i.kt)("p",null,"These files should now be available on the master. The path to these files is recreated within the ",(0,i.kt)("inlineCode",{parentName:"p"},"/var/cache/salt/master/minions/minion_id/files directory"),". We can copy the directories beneath this location, which represents the file paths on the minion, to our Salt state directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cp -r /var/cache/salt/master/minions/ubuntuMaster/files /srv/salt/nginx\n\nfind /srv/salt/nginx -printf "%P\\n"\n\n  init.sls\n  files\n  files/etc\n  files/etc/nginx\n  files/etc/nginx/sites-available\n  files/etc/nginx/sites-available/default\n  files/etc/nginx/nginx.conf\n  files/usr\n  files/usr/share\n  files/usr/share/nginx\n  files/usr/share/nginx/html\n  files/usr/share/nginx/html/index.html\n')),(0,i.kt)("h3",{id:"nginx-config"},"NGINX Config"),(0,i.kt)("p",null,"Start by creating a backup of the original configuration and adjust the conf file according to your needs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd /srv/salt/nginx/files/etc/nginx\ncp nginx.conf nginx.conf.ori\ndiff nginx.conf nginx.conf.ori\n")),(0,i.kt)("h3",{id:"nginx-default-server"},"NGINX Default Server"),(0,i.kt)("p",null,"Next, let\u2019s take a look at our default server block template. Start with making a copy of the original file and rename the file to ",(0,i.kt)("inlineCode",{parentName:"p"},".jinja"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd /srv/salt/nginx/files/etc/nginx/sites-available\ncp default default.ori\nmv default default.jinja\n")),(0,i.kt)("p",null,"Now, we can open the template file to make some changes ",(0,i.kt)("inlineCode",{parentName:"p"},"nano default.jinja"),". We\u2019ll then use the grains.get execution module function to grab the address associated with the selected interface and use that as the value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"addr")," variable. We will add this to the very top of the file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cfg"},"# Set interface to load balancer in production - change interface before using\n{%- set interface = 'enp3s0' if salt['grains.get']('env') == 'dev' else 'enp3s0' -%}\n{%- set addr = salt['network.interface_ip'](interface) -%}\n##\n# You should look at the following URL's in order to grasp a solid understanding\n")),(0,i.kt)("p",null,"Next, we can edit the server block further down in the file. We can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"addr")," variable we set at the top in the listen and ",(0,i.kt)("inlineCode",{parentName:"p"},"server_name")," directives. We\u2019ve removed the IPv6 and default server portions to restrict what this block serves:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cfg"},"server {\n    listen {{ addr }}:80;\n\n    root /usr/share/nginx/html;\n    index index.html index.htm;\n\n    server_name {{ addr }};\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n")),(0,i.kt)("p",null,"Save and close the file when you are finished."),(0,i.kt)("h3",{id:"nginx-default-frontpage-template"},"NGINX Default Frontpage Template"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd /srv/salt/nginx/files/usr/share/nginx/html\n\ncp index.html index.html.ori\nmv index.html index.html.jinja\n\nnano index.html.jinja\n")),(0,i.kt)("p",null,"At the top, we\u2019ll set another variable using Jinja. We\u2019ll use the ",(0,i.kt)("inlineCode",{parentName:"p"},"grains.get")," execution module function to grab the minion\u2019s hostname. We\u2019ll store this in the host variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"{% set host = salt['grains.get']('os-family') -%}\n{% set os = salt['grains.get']('os') -%}\n\n<!DOCTYPE html>\n<html>\n  <head>\n  <title>Welcome from {{ host }}</title>\n    <body>\n    <h1>This is NGINX!</h1>\n    <p>{{ os }} Rocks!</p>\n    </body>\n</html>\n")),(0,i.kt)("h2",{id:"testing-the-nginx-state-file"},"Testing the Nginx State File"),(0,i.kt)("p",null,"First, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"state.show_sls")," execution module function to view how Salt will interpret our Nginx state file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"salt ubuntuMaster state.show_sls nginx\n\nubuntuMaster:\n    ----------\n    /etc/nginx/nginx.conf:\n        ----------\n        __env__:\n            base\n        __sls__:\n            nginx\n        file:\n            |_\n              ----------\n              source:\n                  salt://nginx/files/etc/nginx/nginx.conf\n            |_\n              ----------\n              user:\n                  root\n            |_\n              ----------\n              group:\n                  root\n            |_\n              ----------\n              mode:\n                  640\n            - managed\n            |_\n              ----------\n              order:\n                  10002\n    /etc/nginx/sites-available/default:\n        ----------\n        __env__:\n            base\n        __sls__:\n            nginx\n        file:\n            |_\n              ----------\n              source:\n                  salt://nginx/files/etc/nginx/sites-available/default.jinja\n            |_\n              ----------\n              template:\n                  jinja\n            |_\n              ----------\n              user:\n                  root\n            |_\n              ----------\n              group:\n                  root\n            |_\n              ----------\n              mode:\n                  640\n            - managed\n            |_\n              ----------\n              order:\n                  10003\n    /usr/share/nginx/html/index.html:\n        ----------\n        __env__:\n            base\n        __sls__:\n            nginx\n        file:\n            |_\n              ----------\n              source:\n                  salt://nginx/files/usr/share/nginx/html/index.html.jinja\n            |_\n              ----------\n              template:\n                  jinja\n            |_\n              ----------\n              user:\n                  root\n            |_\n              ----------\n              group:\n                  root\n            |_\n              ----------\n              mode:\n                  644\n            - managed\n            |_\n              ----------\n              order:\n                  10004\n    nginx:\n        ----------\n        __env__:\n            base\n        __sls__:\n            nginx\n        pkg:\n            - installed\n            |_\n              ----------\n              order:\n                  10000\n        service:\n            |_\n              ----------\n              watch:\n                  |_\n                    ----------\n                    pkg:\n                        nginx\n                  |_\n                    ----------\n                    file:\n                        /etc/nginx/nginx.conf\n                  |_\n                    ----------\n                    file:\n                        /etc/nginx/sites-available/default\n            - running\n            |_\n              ----------\n              order:\n                  10001\n")),(0,i.kt)("p",null,"Next, we can do a ",(0,i.kt)("strong",{parentName:"p"},"dry-run")," of applying our state file. We can do this with the ",(0,i.kt)("inlineCode",{parentName:"p"},"state.apply")," function with the ",(0,i.kt)("inlineCode",{parentName:"p"},"test=True")," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"salt ubuntuMaster state.apply nginx test=True\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'ubuntuMaster:\n----------\n          ID: nginx\n    Function: pkg.installed\n      Result: True\n     Comment: All specified packages are already installed\n     Started: 11:14:33.183423\n    Duration: 21.944 ms\n     Changes:\n----------\n          ID: /etc/nginx/nginx.conf\n    Function: file.managed\n      Result: None\n     Comment: The file /etc/nginx/nginx.conf is set to be changed\n              Note: No changes made, actual changes may\n              be different due to other states.\n     Started: 11:14:33.209030\n    Duration: 10.764 ms\n     Changes:\n              ----------\n              mode:\n                  0640\n----------\n          ID: /etc/nginx/sites-available/default\n    Function: file.managed\n      Result: None\n     Comment: The file /etc/nginx/sites-available/default is set to be changed\n              Note: No changes made, actual changes may\n              be different due to other states.\n     Started: 11:14:33.219892\n    Duration: 70.677 ms\n     Changes:\n              ----------\n              diff:\n                  ---\n                  +++\n                  @@ -1,4 +1,4 @@\n                  -##\n                  +# Set interface to load balancer in production - change interface before using##\n                   # You should look at the following URL\'s in order to grasp a solid understanding\n                   # of Nginx configuration files in order to fully unleash the power of Nginx.\n                   # https://www.nginx.com/resources/wiki/start/\n                  @@ -19,8 +19,7 @@\n                   # Default server configuration\n                   #\n                   server {\n                  -     listen 80 default_server;\n                  -     listen [::]:80 default_server;\n                  +     listen 192.168.2.110 80 default_server;\n\n                        # SSL configuration\n                        #\n                  @@ -38,12 +37,12 @@\n                        #\n                        # include snippets/snakeoil.conf;\n\n                  -     root /var/www/html;\n                  +     root /usr/share/nginx/html/;\n\n                        # Add index.php to the list if you are using PHP\n                        index index.html index.htm index.nginx-debian.html;\n\n                  -     server_name _;\n                  +     server_name 192.168.2.110;\n\n                        location / {\n                                # First attempt to serve request as file, then\n              mode:\n                  0640\n----------\n          ID: nginx\n    Function: service.running\n      Result: None\n     Comment: Service is set to be started\n     Started: 11:14:33.330309\n    Duration: 12.555 ms\n     Changes:\n----------\n          ID: /usr/share/nginx/html/index.html\n    Function: file.managed\n      Result: None\n     Comment: The file /usr/share/nginx/html/index.html is set to be changed\n              Note: No changes made, actual changes may\n              be different due to other states.\n     Started: 11:14:33.343135\n    Duration: 18.835 ms\n     Changes:\n              ----------\n              diff:\n                  ---\n                  +++\n                  @@ -1,25 +1,9 @@\n                   <!DOCTYPE html>\n                   <html>\n                  -<head>\n                  -<title>Welcome to nginx!</title>\n                  -<style>\n                  -    body {\n                  -        width: 35em;\n                  -        margin: 0 auto;\n                  -        font-family: Tahoma, Verdana, Arial, sans-serif;\n                  -    }\n                  -</style>\n                  -</head>\n                  -<body>\n                  -<h1>Welcome to nginx!</h1>\n                  -<p>If you see this page, the nginx web server is successfully installed and\n                  -working. Further configuration is required.</p>\n                  -\n                  -<p>For online documentation and support please refer to\n                  -<a href="http://nginx.org/">nginx.org</a>.<br/>\n                  -Commercial support is available at\n                  -<a href="http://nginx.com/">nginx.com</a>.</p>\n                  -\n                  -<p><em>Thank you for using nginx.</em></p>\n                  -</body>\n                  +  <head>\n                  +  <title>Welcome from </title>\n                  +    <body>\n                  +    <h1>This is NGINX!</h1>\n                  +    <p>Ubuntu Rocks!</p>\n                  +    </body>\n                   </html>\n\nSummary for ubuntuMaster\n------------\nSucceeded: 5 (unchanged=4, changed=3)\nFailed:    0\n------------\nTotal states run:     5\nTotal run time: 134.775 ms\n')),(0,i.kt)("p",null,"If the dry-run did not reveal any problems, you can try to apply the state to all of your available web servers by typing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"salt ubuntuMaster state.apply nginx\n")),(0,i.kt)("p",null,"You can check that the Page is actually running on your Minions IP address:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl 192.168.2.110\n\n<!DOCTYPE html>\n<html>\n  <head>\n  <title>Welcome from </title>\n    <body>\n    <h1>This is NGINX!</h1>\n    <p>Ubuntu Rocks!</p>\n    </body>\n</html>\n")))}c.isMDXComponent=!0},56372:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-445649b262fc86c20c60ee46511b372b.jpg"}}]);