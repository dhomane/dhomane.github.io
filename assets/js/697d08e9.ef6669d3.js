"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[19190],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=l,g=c["".concat(i,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:l,s[1]=o;for(var u=2;u<r;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},61754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(87462),l=(n(67294),n(3905));const r={sidebar_position:1e4,slug:"2020-06-14",title:"Install Salt on Ubuntu Server 20.04",authors:"mpolinowski",tags:["LINUX","Salt"]},s=void 0,o={unversionedId:"DevOps/Salt/2020-06-14--install-salt-on-ubuntu-20-04/index",id:"DevOps/Salt/2020-06-14--install-salt-on-ubuntu-20-04/index",title:"Install Salt on Ubuntu Server 20.04",description:"Battambang, Cambodia",source:"@site/docs/DevOps/Salt/2020-06-14--install-salt-on-ubuntu-20-04/index.mdx",sourceDirName:"DevOps/Salt/2020-06-14--install-salt-on-ubuntu-20-04",slug:"/DevOps/Salt/2020-06-14--install-salt-on-ubuntu-20-04/2020-06-14",permalink:"/docs/DevOps/Salt/2020-06-14--install-salt-on-ubuntu-20-04/2020-06-14",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-14--install-salt-on-ubuntu-20-04/index.mdx",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:1e4,frontMatter:{sidebar_position:1e4,slug:"2020-06-14",title:"Install Salt on Ubuntu Server 20.04",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salty DevOps",permalink:"/docs/DevOps/Salt/2020-06-15--salty-devops/2020-06-15"},next:{title:"Internet-of-Things & Machine Learning",permalink:"/docs/category/internet-of-things--machine-learning"}},i={},u=[{value:"Install Salt",id:"install-salt",level:2},{value:"Python 3.7 on Ubuntu 20.04",id:"python-37-on-ubuntu-2004",level:3},{value:"Salt Bootstrap",id:"salt-bootstrap",level:3},{value:"Network Addressing",id:"network-addressing",level:3},{value:"Authenticate Minions",id:"authenticate-minions",level:3},{value:"Test Connection",id:"test-connection",level:2},{value:"Grains",id:"grains",level:2}],p={toc:u};function d(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Battambang, Cambodia",src:n(35152).Z,width:"1500",height:"609"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#install-salt"},"Install Salt"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#python-37-on-ubuntu-2004"},"Python 3.7 on Ubuntu 20.04")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#salt-bootstrap"},"Salt Bootstrap")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#network-addressing"},"Network Addressing")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#authenticate-minions"},"Authenticate Minions")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#test-connection"},"Test Connection")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#grains"},"Grains"))),(0,l.kt)("h2",{id:"install-salt"},"Install Salt"),(0,l.kt)("h3",{id:"python-37-on-ubuntu-2004"},"Python 3.7 on Ubuntu 20.04"),(0,l.kt)("p",null,"If this is still an issue (Salt not supporting Python 3.8) - install the older version from ",(0,l.kt)("a",{parentName:"p",href:"https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa"},"deadsnakes PPA"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt-get update\nsudo apt-get install python3.7\n")),(0,l.kt)("h3",{id:"salt-bootstrap"},"Salt Bootstrap"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://repo.saltstack.com/#bootstrap"},"Salt Bootstrap")," is a configuration script which automatically detects the operating system it\u2019s running on, sets the correct repositories, and installs Salt. The install script is intended to be run on the Salt master and all minion machines."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Salt Master")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -L https://bootstrap.saltstack.com -o install_salt.sh\nsudo sh install_salt.sh -P -M -N\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Salt Minion")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl -L https://bootstrap.saltstack.com -o install_salt.sh\nsudo sh install_salt.sh -P\n")),(0,l.kt)("h3",{id:"network-addressing"},"Network Addressing"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Salt Master")),(0,l.kt)("p",null,"You can find the master configuration file here ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/master"),". Here we now want to define the interface our server is wirking on. You can uncomment the ",(0,l.kt)("inlineCode",{parentName:"p"},"#interface:")," line near the top of the ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/master")," file and replace the address placeholder with the address of your Salt master\u2019s IP. If all your nodes are located in the same data center, you can use the private IP address."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# The address of the interface to bind to:\ninterface: 192.168.2.110\n")),(0,l.kt)("p",null,"The 'cleaner' way to handle this, is to leave the default config unchanged and add your own configuration files to ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/master.d"),". All ",(0,l.kt)("inlineCode",{parentName:"p"},"*.conf")," files inside this directory will be used by Salt automatically - you can name them according to your needs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/salt/master.d/local.conf\n")),(0,l.kt)("p",null,"And add the lines that you need to configure Salt:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cfg"},"# The address of the interface to bind to:\ninterface: 192.168.2.110\n")),(0,l.kt)("p",null,"Then restart Salt:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl restart salt-master\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Salt Minions")),(0,l.kt)("p",null,"To assign a master to your minions you can again uncomment ",(0,l.kt)("inlineCode",{parentName:"p"},"#master: salt")," near the top of ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/minion"),", and replace ",(0,l.kt)("inlineCode",{parentName:"p"},"salt")," with your Salt master\u2019s IP address. Or add your own config file to ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/minion.d")," to override the default settings:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/salt/minion.d/local.conf\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cfg"},"# Set the location of the salt master server. If the master server cannot be\n# resolved, then the minion will fail to start.\nmaster: 192.168.2.110\n")),(0,l.kt)("h3",{id:"authenticate-minions"},"Authenticate Minions"),(0,l.kt)("p",null,"From the Salt master, list its key fingerprint, and all Minions linked to it with their key fingerprints:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt-key --finger-all\n\nLocal Keys:\nmaster.pem:  f1:d3:52:eb:f4:52...\nmaster.pub:  64:12:61:93:3e:09...\n")),(0,l.kt)("p",null,"Add the Salt Master\u2019s master.pub fingerprint to ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/salt/minion"),", between the single quotes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cfg"},"# Fingerprint of the master public key to validate the identity of your Salt master\n# before the initial key exchange. The master fingerprint can be found by running\n# 'salt-key -f master.pub' on the Salt master.\nmaster_finger: '64:12:61:93:3e:09...'\n")),(0,l.kt)("p",null,"And while we are at it - let's give our minion a name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cfg"},"# Explicitly declare the id for this minion to use, if left commented the id\n# will be the hostname as returned by the python call: socket.getfqdn()\n# Since salt uses detached ids it is possible to run multiple minions on the\n# same machine but with different ids, this can be useful for salt compute\n# clusters.\nid: ubuntuAsus\n")),(0,l.kt)("p",null,"Then restart Salt:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl restart salt-minion\n")),(0,l.kt)("h2",{id:"test-connection"},"Test Connection"),(0,l.kt)("p",null,"List the Minion\u2019s fingerprint hash:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt-call key.finger --local\n\nlocal:\n    6a:1f:19:8e:78:0f:2d...\n")),(0,l.kt)("p",null,"and verify it with what\u2019s reported by the Salt Master:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt-key --finger-all\nLocal Keys:\nmaster.pem:  f1:d3:52:eb:f4:52...\nmaster.pub:  64:12:61:93:3e:09...\nUnaccepted Keys:\ncentos8.localdomain:  6a:1f:19:8e:78:0f:2d...\n")),(0,l.kt)("p",null,"Once each Minion ID has been verified, accept them all from the Salt Master:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt-key -a centos8.localdomain  // or accept all: sudo salt-key -A\n\nThe following keys are going to be accepted:\nUnaccepted Keys:\ncentos8.localdomain\nProceed? [n/Y] y\nKey for minion centos8.localdomain accepted.\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Unaccepted keys can be deleted with ",(0,l.kt)("inlineCode",{parentName:"p"},"salt-key -d 'minionname'"),". To get rid of all Keys from currently disconnected Minions run ",(0,l.kt)("inlineCode",{parentName:"p"},"salt-run manage.down removekeys=True"))),(0,l.kt)("p",null,"Verify the status of accepted minions. The command below should return the hostname or IP address of each Minion which has been verified and is running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt-run manage.up\n\n- ubuntuAsus\n")),(0,l.kt)("p",null,"Ping all Minions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt '*' test.ping\n\nubuntuAsus:\n    True\n")),(0,l.kt)("p",null,"By using ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," you target all accepted Minions on your Salt network. You can also target a specific Minion ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo salt -L ubuntuAsus,ubuntuBrix test.ping"),"."),(0,l.kt)("p",null,"Target selection options:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-H, --hosts"),(0,l.kt)("td",{parentName:"tr",align:null},"List all known hosts to currently visible or other specified rosters")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-E, --pcre"),(0,l.kt)("td",{parentName:"tr",align:null},"Instead of using shell globs to evaluate the target servers, use pcre regular expressions.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-L, --list"),(0,l.kt)("td",{parentName:"tr",align:null},"Instead of using shell globs to evaluate the target servers, take a comma or whitespace delimited list of servers.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-G, --grain"),(0,l.kt)("td",{parentName:"tr",align:null},"Instead of using shell globs to evaluate the target use a grain value to identify targets, the syntax for the target is the grain key followed by a globexpression: 'os:Arch","*","'.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-P, --grain-pcre"),(0,l.kt)("td",{parentName:"tr",align:null},"Instead of using shell globs to evaluate the target use a grain value to identify targets, the syntax for the target is the grain key followed by a pcre regular expression: 'os:Arch.","*","'.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-N, --nodegroup"),(0,l.kt)("td",{parentName:"tr",align:null},"Instead of using shell globs to evaluate the target use one of the predefined nodegroups to identify a list of targets.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-R, --range"),(0,l.kt)("td",{parentName:"tr",align:null},"Instead of using shell globs to evaluate the target use a range expression to identify targets. Range expressions look like %cluster.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-C, --compound"),(0,l.kt)("td",{parentName:"tr",align:null},"The compound target option allows for multiple target types to be evaluated, allowing for greater granularity in target matching. The compound target is space delimited, targets other than globs are preceded with an identifier matching the specific targets argument type: salt 'G@os:RedHat and webser",(0,l.kt)("em",{parentName:"td"}," or E@database."),"'.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-I, --pillar"),(0,l.kt)("td",{parentName:"tr",align:null},"Instead of using shell globs to evaluate the target use a pillar value to identify targets, the syntax for the target is the pillar key followed by a glob expression: 'role:production","*","'.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-J, --pillar-pcre"),(0,l.kt)("td",{parentName:"tr",align:null},"Instead of using shell globs to evaluate the target use a pillar value to identify targets, the syntax for the target is the pillar key followed by a pcre regular expression: 'role:prod.","*","'.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-S, --ipcidr"),(0,l.kt)("td",{parentName:"tr",align:null},"Match based on Subnet (CIDR notation) or IP address.")))),(0,l.kt)("h2",{id:"grains"},"Grains"),(0,l.kt)("p",null,"Salt comes with an interface to derive information about the underlying system. This is called the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/latest/topics/grains/index.html"},"Grains Interface"),", because it presents salt with grains of information. Grains are collected for the operating system, domain name, IP address, kernel, OS type, memory, and many other system properties."),(0,l.kt)("p",null,"You can list all available grains by running ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo salt '*' grains.ls"),". Or get all available grains for your connected Minions with ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo salt '*' grains.items"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"ubuntuAsus:\n    ----------\n    biosreleasedate:\n        07/31/2018\n    biosversion:\n        0407\n    cpu_model:\n        Intel(R) Core(TM) i3-8130U CPU @ 2.20GHz\n    cpuarch:\n        x86_64\n    kernelrelease:\n        5.4.0-42-generic\n    kernelversion:\n        #46-Ubuntu SMP Fri Jul 10 00:24:02 UTC 2020\n    locale_info:\n        ----------\n        defaultencoding:\n            UTF-8\n        defaultlanguage:\n            en_US\n        detectedencoding:\n            utf-8\n        timezone:\n            UTC\n    localhost:\n        ubuntubrix\n    lsb_distrib_codename:\n        focal\n    lsb_distrib_description:\n        Ubuntu 20.04.1 LTS\n    lsb_distrib_id:\n        Ubuntu\n    lsb_distrib_release:\n        20.04\n    machine_id:\n        b783c83a285f4d4bac05fda96aa96a90\n    manufacturer:\n        ASUSTeK COMPUTER INC.\n    master:\n        192.168.2.110\n    mdadm:\n    mem_total:\n        7834\n    nodename:\n        ubuntubrix\n    num_cpus:\n        4\n    num_gpus:\n        1\n    os:\n        Ubuntu\n    os_family:\n        Debian\n    osarch:\n        amd64\n    oscodename:\n        focal\n    osfinger:\n        Ubuntu-20.04\n    osfullname:\n        Ubuntu\n    osmajorrelease:\n        20\n    osrelease:\n        20.04\n    osrelease_info:\n        - 20\n        - 4\n    username:\n        root\n    virtual:\n        physical\n    zfs_feature_flags:\n        False\n    zfs_support:\n        False\n    zmqversion:\n        4.3.2\n")),(0,l.kt)("p",null,"To target Minions by grains use the ",(0,l.kt)("inlineCode",{parentName:"p"},"-G")," flag:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt -G os:Ubuntu test.ping\nubuntuAsus:\n    True\n")),(0,l.kt)("p",null,"We can also build this request as a compound command with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-C")," flag - ping all Minions that run Ubuntu and have an ID that starts with ",(0,l.kt)("inlineCode",{parentName:"p"},"ubuntu"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo salt -C 'G@os:Ubuntu and ubuntu*' test.ping\nubuntuAsus:\n    True\n")))}d.isMDXComponent=!0},35152:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-789d224a92b3ec0f0c42e5f025e25dee.jpg"}}]);