"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[77542],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=l,g=u["".concat(i,".").concat(d)]||u[d]||c[d]||r;return a?n.createElement(g,s(s({ref:t},m),{},{components:a})):n.createElement(g,s({ref:t},m))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,s=new Array(r);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:l,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5573:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(87462),l=(a(67294),a(3905));const r={sidebar_position:9040,slug:"2018-11-10",title:"Getting started with PostgreSQL in Windows 10",authors:"mpolinowski",tags:["Databases","PostgreSQL"]},s=void 0,o={unversionedId:"DevOps/Provisioning/2018-11-10--postgresql-getting-started/index",id:"DevOps/Provisioning/2018-11-10--postgresql-getting-started/index",title:"Getting started with PostgreSQL in Windows 10",description:"Muktinath, Nepal",source:"@site/docs/DevOps/Provisioning/2018-11-10--postgresql-getting-started/index.mdx",sourceDirName:"DevOps/Provisioning/2018-11-10--postgresql-getting-started",slug:"/DevOps/Provisioning/2018-11-10--postgresql-getting-started/2018-11-10",permalink:"/docs/DevOps/Provisioning/2018-11-10--postgresql-getting-started/2018-11-10",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2018-11-10--postgresql-getting-started/index.mdx",tags:[{label:"Databases",permalink:"/docs/tags/databases"},{label:"PostgreSQL",permalink:"/docs/tags/postgre-sql"}],version:"current",sidebarPosition:9040,frontMatter:{sidebar_position:9040,slug:"2018-11-10",title:"Getting started with PostgreSQL in Windows 10",authors:"mpolinowski",tags:["Databases","PostgreSQL"]},sidebar:"tutorialSidebar",previous:{title:"Red Hat Certified Specialist in Containerized Application Development",permalink:"/docs/DevOps/Provisioning/2018-12-27--red-hat-containerized-application-development-rhcs/2018-12-27"},next:{title:"How to wrap your Source Code into a Docker Container",permalink:"/docs/DevOps/Provisioning/2018-01-28--express-generator-dockerrized/2018-01-28"}},i={},p=[{value:"Installation",id:"installation",level:2},{value:"Adding some Dummy Data to work with",id:"adding-some-dummy-data-to-work-with",level:2},{value:"SELECT Queries",id:"select-queries",level:3},{value:"ORDER BY",id:"order-by",level:4},{value:"WHERE",id:"where",level:4},{value:"OR",id:"or",level:4},{value:"AND",id:"and",level:4},{value:"LIKE &amp; LOWER",id:"like--lower",level:4},{value:"LIKE &amp; UPPER",id:"like--upper",level:4},{value:"Working with numbers",id:"working-with-numbers",level:4},{value:"Adding a another Dataset",id:"adding-a-another-dataset",level:2},{value:"ALTER TABLE &amp; ADD COLUMN",id:"alter-table--add-column",level:3},{value:"UPDATE &amp; SET",id:"update--set",level:3},{value:"VARCHARS",id:"varchars",level:3},{value:"length",id:"length",level:4},{value:"left &amp; right",id:"left--right",level:4},{value:"reverse",id:"reverse",level:4},{value:"Working with Dates",id:"working-with-dates",level:3},{value:"AS",id:"as",level:4},{value:"AGE",id:"age",level:4},{value:"DATE_PART &amp; COUNT",id:"date_part--count",level:4},{value:"Changing the Data Type",id:"changing-the-data-type",level:3},{value:"CAST",id:"cast",level:4},{value:"to_date",id:"to_date",level:5},{value:"IS null",id:"is-null",level:3}],m={toc:p};function c(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Muktinath, Nepal",src:a(45708).Z,width:"1500",height:"610"})),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#adding-some-dummy-data-to-work-with"},"Adding some Dummy Data to work with"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#select-queries"},"SELECT Queries"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#order-by"},"ORDER BY")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#where"},"WHERE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#or"},"OR")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#and"},"AND")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#like--lower"},"LIKE & LOWER")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#like--upper"},"LIKE & UPPER")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#working-with-numbers"},"Working with numbers")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#adding-a-another-dataset"},"Adding a another Dataset"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#alter-table--add-column"},"ALTER TABLE & ADD COLUMN")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#update--set"},"UPDATE & SET")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#varchars"},"VARCHARS"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#length"},"length")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#left--right"},"left & right")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#reverse"},"reverse")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#working-with-dates"},"Working with Dates"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#as"},"AS")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#age"},"AGE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#datepart--count"},"DATE_PART & COUNT")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#changing-the-data-type"},"Changing the Data Type"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#cast"},"CAST"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#todate"},"to_date")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#is-null"},"IS null"))))),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/download/"},"Download the Version")," of PostgreSQL that suits your OS. In my case I will choose the installer certified by EnterpriseDB for Windows 64bit."),(0,l.kt)("p",null,"Start the installer and accept the defaults - only add ",(0,l.kt)("strong",{parentName:"p"},"your own password")," that you will be able to use with the ",(0,l.kt)("strong",{parentName:"p"},"username: postgres")," to log in to the pgAdmin Control Panel."),(0,l.kt)("h2",{id:"adding-some-dummy-data-to-work-with"},"Adding some Dummy Data to work with"),(0,l.kt)("p",null,"We are going to use the free available ",(0,l.kt)("a",{parentName:"p",href:"https://www.consumerfinance.gov/data-research/consumer-complaints/"},"Consumer Complaint Database")," from the Consumer Financial Protection Bureau."),(0,l.kt)("p",null,"Start the ",(0,l.kt)("strong",{parentName:"p"},"pgAdmin4")," Admin Panel and right-click ",(0,l.kt)("strong",{parentName:"p"},"Databases")," to create a new db. Give it a name, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"consumer complaints"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"PostgrSQL",src:a(19988).Z,width:"950",height:"286"})),(0,l.kt)("p",null,"Now right-click the newly created Database and selct the ",(0,l.kt)("strong",{parentName:"p"},"Query Tool"),". Paste the following in and click on ",(0,l.kt)("strong",{parentName:"p"},"Execute")," to create the ",(0,l.kt)("inlineCode",{parentName:"p"},"consumer_complaint")," table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE consumer_complaints (\n    date_received varchar,\n    product_name varchar,\n    sub_product varchar,\n    issue varchar,\n    sub_issue varchar,\n    consumer_complaint_narrative varchar,\n    company_public_response varchar,\n    company varchar,\n    state_name varchar,\n    zip_code varchar,\n    tags varchar,\n    consumer_consent_provided varchar,\n    submitted_via varchar,\n    date_sent varchar,\n    company_response_to_consumer varchar,\n    timely_response varchar,\n    consumer_disputed varchar,\n    complaint_id integer\n);\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: If you are running the Astrill VPN client on your System, this will block access to the Query Tool. Add pgAdmin4 to the list of allowed programs that are not forced through the VPN tunnel.")),(0,l.kt)("p",null,"Now we can add the data from the earlier downloaded ",(0,l.kt)("em",{parentName:"p"},"ConsumerComplaints.csv")," file, by executing the following query (change the path-to-file according to your download folder)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"COPY consumer_complaints FROM 'E:\\postgresql-getting-started\\ConsumerComplaints.csv' DELIMITER ',' CSV HEADER;\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"PostgrSQL",src:a(65397).Z,width:"950",height:"619"})),(0,l.kt)("p",null,"We have now created our schema with 18 columns and copied 65499 data entries from the CSV file into our table. We can check our data by running the following query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM consumer_complaints;\n")),(0,l.kt)("h3",{id:"select-queries"},"SELECT Queries"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT *")," allows you to grab the content of ",(0,l.kt)("em",{parentName:"p"},"all columns")," of your table. If you want to select specific columns you can string them together, separated by commas - e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT date_received, issue, state_name, tags"),"."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"PostgrSQL",src:a(61305).Z,width:"950",height:"652"})),(0,l.kt)("h4",{id:"order-by"},"ORDER BY"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM consumer_complaints\nORDER BY company;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM consumer_complaints\nORDER BY zip_code ASC;\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM consumer_complaints\nORDER BY zip_code, date_received DESC;\n")),(0,l.kt)("h4",{id:"where"},"WHERE"),(0,l.kt)("p",null,"To Filter your results, by adding a condition with the ",(0,l.kt)("strong",{parentName:"p"},"Where")," statement:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name, issue\nFROM consumer_complaints\nWHERE state_name = 'NY';\n")),(0,l.kt)("p",null,"This query only displays results from the two selected columns inside the referenced table where the ",(0,l.kt)("em",{parentName:"p"},"state_name")," equals New York. We can also add some logic to our queries - e.g. if we want to know how many complaints weren't answered on the same day we can write the following SQL query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT company, product_name, issue\nFROM consumer_complaints\nWHERE date_sent != date_received;\n")),(0,l.kt)("h4",{id:"or"},"OR"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT company, product_name, issue\nFROM consumer_complaints\nWHERE state_name = 'NY' OR state_name = 'CA';\n")),(0,l.kt)("h4",{id:"and"},"AND"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT company, product_name\nFROM consumer_complaints\nWHERE tags = 'Servicemember' AND timely_response = 'Yes';\n")),(0,l.kt)("h4",{id:"like--lower"},"LIKE & LOWER"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT product_name\nFROM consumer_complaints\nWHERE LOWER(product_name) LIKE '%credit%';\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"LIKE")," condition allows us to use %-wildcards to search for every value of ",(0,l.kt)("em",{parentName:"p"},"product","_","name")," that contains the word ",(0,l.kt)("em",{parentName:"p"},"credit"),". The Select query is case sensitive - by adding ",(0,l.kt)("strong",{parentName:"p"},"LOWER")," we transform all ",(0,l.kt)("em",{parentName:"p"},"product","_","name")," values to lower-case and then compare it against a lower-case search query. The same can be achieved with using ",(0,l.kt)("strong",{parentName:"p"},"UPPER")," instead:"),(0,l.kt)("h4",{id:"like--upper"},"LIKE & UPPER"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT company\nFROM consumer_complaints\nWHERE UPPER(issue) LIKE '%LATE%';\n")),(0,l.kt)("h4",{id:"working-with-numbers"},"Working with numbers"),(0,l.kt)("p",null,"Display all companies that are in an area that zip-code starts with ",(0,l.kt)("inlineCode",{parentName:"p"},"12*"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT company, product_name\nFROM consumer_complaints\nWHERE zip_code LIKE '12___';\n")),(0,l.kt)("p",null," All zip-codes have 5 digits - we signify the position of our search number by adding underscore for every digit that is a wildcard - e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"__1__")," would hit all zip-codes that have a 1 in the middle. Alternatively, you can also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"%")," syntax to get the same result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT company, product_name\nFROM consumer_complaints\nWHERE zip_code LIKE '12%';\n")),(0,l.kt)("p",null,"Using ",(0,l.kt)("inlineCode",{parentName:"p"},"%1%")," instead would give you all the zip-codes that have a number 1 in ",(0,l.kt)("strong",{parentName:"p"},"any position"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"COUNT")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(company)\nFROM consumer_complaints\nWHERE LOWER(company) LIKE '%bell%';\n")),(0,l.kt)("p",null,"Count all instances where a company with the word ",(0,l.kt)("em",{parentName:"p"},"bell")," in its name filed a complaint."),(0,l.kt)("h2",{id:"adding-a-another-dataset"},"Adding a another Dataset"),(0,l.kt)("p",null,"The .csv files used here can be downloaded from here (",(0,l.kt)("a",{parentName:"p",href:"https://www.superdatascience.com/sql/"},"Section 5"),"). Right-click ",(0,l.kt)("strong",{parentName:"p"},"Databases")," to add a new db and name it ",(0,l.kt)("inlineCode",{parentName:"p"},"console games"),". Then create the following tables with the 2 .csv files you just downloaded:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE console_games (\n    game_rank integer,\n    game_name varchar(1200),\n    platform varchar(1200),\n    game_year integer,\n    genre varchar(20),\n    publisher varchar(1200),\n    na_sales float8,\n    eu_sales float8,\n    jp_sales float8,\n    other_sales float8\n);\n\nCOPY console_games FROM 'E:\\postgresql-getting-started\\ConsoleGames.csv' DELIMITER ',' CSV HEADER;\n")),(0,l.kt)("p",null,"and"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE console_dates (\n    platform_name char(120),\n    first_retail_availability date,\n    discontinued date,\n    units_sold_mill float8,\n    platform_comment varchar(120)    \n);\n\nCOPY console_dates FROM 'E:\\postgresql-getting-started\\ConsoleDates.csv' DELIMITER ',' CSV HEADER;\n")),(0,l.kt)("p",null,"Lets work with our data and add all NA, EU and JP sales together to get a new colum with ",(0,l.kt)("inlineCode",{parentName:"p"},"global_sales"),":"),(0,l.kt)("h3",{id:"alter-table--add-column"},"ALTER TABLE & ADD COLUMN"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE console_games\nADD COLUMN global_sales float8;\n")),(0,l.kt)("p",null,"This will alternate the table ",(0,l.kt)("em",{parentName:"p"},"console","_","games"),"  and add a column named ",(0,l.kt)("em",{parentName:"p"},"global","_","sales")," that will receive a number with decimal point. We can now fill in the value by a simple addition:"),(0,l.kt)("h3",{id:"update--set"},"UPDATE & SET"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"UPDATE console_games\nSET global_sales = na_sales + eu_sales + jp_sales;\n")),(0,l.kt)("p",null,"Now we can calculate the percentage of the North-American sales from the global sales:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE console_games\nADD COLUMN na_sales_percent float8;\n\nUPDATE console_games\nSET na_sales_percent = na_sales / global_sales * 100\nWHERE global_sales > 0;\n")),(0,l.kt)("h3",{id:"varchars"},"VARCHARS"),(0,l.kt)("p",null,"Working with ",(0,l.kt)("strong",{parentName:"p"},"String Functions")),(0,l.kt)("h4",{id:"length"},"length"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT game_name, length(game_name)\nFROM console_games\nORDER BY length(game_name) DESC;\n")),(0,l.kt)("p",null,"Will give us a column with the count of characters inside the name of the game:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"PostgrSQL",src:a(52233).Z,width:"950",height:"757"})),(0,l.kt)("h4",{id:"left--right"},"left & right"),(0,l.kt)("p",null,"To only grab the first 4 letters of the publisher name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT left(publisher, 4)\nFROM console_games\nORDER BY left(publisher, 1) DESC;\n")),(0,l.kt)("h4",{id:"reverse"},"reverse"),(0,l.kt)("p",null,"Will reverse the order of the characters or numbers of the values of the selected column:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT reverse(genre)\nFROM console_games;\n")),(0,l.kt)("h3",{id:"working-with-dates"},"Working with Dates"),(0,l.kt)("h4",{id:"as"},"AS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *, discontinued - first_retail_availability AS days_existed\nFROM console_dates;\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"AS")," will create a ",(0,l.kt)("strong",{parentName:"p"},"temporary column")," (we need to use ALTER TABLE add it permanently) with the number of days a console system was available on the market:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"PostgrSQL",src:a(31536).Z,width:"950",height:"422"})),(0,l.kt)("p",null,"This can help you to get a quick overview over your data - but isn't very precise e.g.:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *, (discontinued - first_retail_availability)/365 AS years_existed\nFROM console_dates\nORDER BY years_existed DESC;\n")),(0,l.kt)("h4",{id:"age"},"AGE"),(0,l.kt)("p",null,"The more accurate way to calculate it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *, AGE(discontinued, first_retail_availability) AS platform_alive\nFROM console_dates\nORDER BY platform_alive DESC;\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"PostgrSQL",src:a(99502).Z,width:"950",height:"683"})),(0,l.kt)("h4",{id:"date_part--count"},"DATE_PART & COUNT"),(0,l.kt)("p",null,"The PostgreSQL DATE_PART() function, that allows you to retrieve subfields e.g., year, month, week from a date or time value. E.g. DATE_PART(month) will only subtract the subfield month of a date - you have one date in November and the second in December this will be ",(0,l.kt)("inlineCode",{parentName:"p"},"11 - 12 = -1"),". One use case of this function is to check how many entries are from a specific month of the year:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(platform_name)\nFROM console_dates\nWHERE DATE_PART('month', first_retail_availability) - 11 = 0 OR DATE_PART('month', first_retail_availability) - 12 = 0;\n")),(0,l.kt)("p",null,"This query will ",(0,l.kt)("strong",{parentName:"p"},"COUNT")," all the console systems that were released in November ",(0,l.kt)("strong",{parentName:"p"},"OR")," December - just in time for the X-mas present madness."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"PostgrSQL",src:a(10501).Z,width:"950",height:"334"})),(0,l.kt)("p",null,"Or you can check what consoles where released in a specific year:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM console_dates\nWHERE DATE_PART('year', first_retail_availability) - 1990 = 0;\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"PostgrSQL",src:a(20074).Z,width:"950",height:"404"})),(0,l.kt)("p",null,"The values of the field must be in a list of permitted values mentioned below:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"century"),(0,l.kt)("li",{parentName:"ul"},"decade"),(0,l.kt)("li",{parentName:"ul"},"year"),(0,l.kt)("li",{parentName:"ul"},"month"),(0,l.kt)("li",{parentName:"ul"},"day"),(0,l.kt)("li",{parentName:"ul"},"hour"),(0,l.kt)("li",{parentName:"ul"},"minute"),(0,l.kt)("li",{parentName:"ul"},"second"),(0,l.kt)("li",{parentName:"ul"},"microseconds"),(0,l.kt)("li",{parentName:"ul"},"milliseconds"),(0,l.kt)("li",{parentName:"ul"},"dow"),(0,l.kt)("li",{parentName:"ul"},"doy"),(0,l.kt)("li",{parentName:"ul"},"epoch"),(0,l.kt)("li",{parentName:"ul"},"isodow"),(0,l.kt)("li",{parentName:"ul"},"isoyear"),(0,l.kt)("li",{parentName:"ul"},"timezone"),(0,l.kt)("li",{parentName:"ul"},"timezone_hour"),(0,l.kt)("li",{parentName:"ul"},"timezone_minute")),(0,l.kt)("h3",{id:"changing-the-data-type"},"Changing the Data Type"),(0,l.kt)("h4",{id:"cast"},"CAST"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST(game_year as varchar(4))\nFROM console_games\nORDER BY game_year;\n")),(0,l.kt)("p",null,"A shortcut is that will do the same:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT game_year::varchar(4)\nFROM console_games\nORDER BY game_year;\n")),(0,l.kt)("h5",{id:"to_date"},"to_date"),(0,l.kt)("p",null,"More useful is the conversion to a date data type:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT to_date(CAST(game_year as varchar(4)), 'yyyy')\nFROM console_games\nORDER BY game_year;\n")),(0,l.kt)("h3",{id:"is-null"},"IS null"),(0,l.kt)("p",null,"Finding undefined fields (notice: we have to use ",(0,l.kt)("strong",{parentName:"p"},"IS")," instead of an equal sign when working with ",(0,l.kt)("em",{parentName:"p"},"null")," :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM console_games\nWHERE game_name IS NULL;\n")),(0,l.kt)("p",null,"Adding a value to an undefined field:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"UPDATE console_games\nSET jp_sales = round((na_sales + eu_sales + other_sales) / 3)\nWHERE jp_sales IS null;\n")))}c.isMDXComponent=!0},45708:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-15328454698_e5687fc21d_o-d380cbcaca6d6cc21a6566ea950a293f.png"},19988:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/postgresql_01-2d93c86d465ee7c2ebbf333e0cc2ebcc.png"},65397:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/postgresql_02-6a256b1dce40e0855df436017c54d03d.png"},61305:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/postgresql_03-94872712253fc37ee3cf3b8e54fd4540.png"},52233:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/postgresql_04-64a575ded006681bebfb4e4c74312f61.png"},31536:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/postgresql_05-0dceb68d14049101a60038e6794b5dce.png"},99502:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/postgresql_06-ff52eb0984c887aa37d64126210d55f6.png"},10501:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/postgresql_07-e8758e6cc4c4714e4390f8aeb910851e.png"},20074:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/postgresql_08-4b816b51ffbe4b4842d8db11ad6f8ac9.png"}}]);