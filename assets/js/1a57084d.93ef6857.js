"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[13677],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(t),u=r,m=h["".concat(o,".").concat(u)]||h[u]||d[u]||i;return t?a.createElement(m,s(s({ref:n},p),{},{components:t})):a.createElement(m,s({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=h;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<i;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},77440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={sidebar_position:9020,slug:"2021-03-20",title:"Elasticsearch 7 Refresher",authors:"mpolinowski",tags:["LINUX","Elasticsearch"]},s=void 0,l={unversionedId:"DevOps/Elasticsearch/2021-03-20-elasticsearch-7-refresher/index",id:"DevOps/Elasticsearch/2021-03-20-elasticsearch-7-refresher/index",title:"Elasticsearch 7 Refresher",description:"Hongkong, TST",source:"@site/docs/DevOps/Elasticsearch/2021-03-20-elasticsearch-7-refresher/index.md",sourceDirName:"DevOps/Elasticsearch/2021-03-20-elasticsearch-7-refresher",slug:"/DevOps/Elasticsearch/2021-03-20-elasticsearch-7-refresher/2021-03-20",permalink:"/docs/DevOps/Elasticsearch/2021-03-20-elasticsearch-7-refresher/2021-03-20",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Elasticsearch/2021-03-20-elasticsearch-7-refresher/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Elasticsearch",permalink:"/docs/tags/elasticsearch"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2021-03-20",title:"Elasticsearch 7 Refresher",authors:"mpolinowski",tags:["LINUX","Elasticsearch"]},sidebar:"tutorialSidebar",previous:{title:"Logstash 7 Digesting Webserver Logs",permalink:"/docs/DevOps/Elasticsearch/2021-03-21-logstash-digesting-data/2021-03-21"},next:{title:"Elasticsearch in Docker",permalink:"/docs/DevOps/Elasticsearch/2020-06-01--elasticsearch-docker/2020-06-01"}},o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Advanced Mappings",id:"advanced-mappings",level:2},{value:"Types and Analyzer",id:"types-and-analyzer",level:3},{value:"Relationships",id:"relationships",level:3},{value:"Delete Documents by Query",id:"delete-documents-by-query",level:2},{value:"A Few More Search Examples",id:"a-few-more-search-examples",level:2},{value:"Simple Search",id:"simple-search",level:3},{value:"Paginate",id:"paginate",level:3},{value:"Weighted Multi-Match",id:"weighted-multi-match",level:3},{value:"Illegal Characters",id:"illegal-characters",level:3}],p={toc:c};function d(e){let{components:n,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Hongkong, TST",src:t(76616).Z,width:"1500",height:"641"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#advanced-mappings"},"Advanced Mappings"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#types-and-analyzer"},"Types and Analyzer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#relationships"},"Relationships")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#delete-documents-by-query"},"Delete Documents by Query")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#a-few-more-search-examples"},"A Few More Search Examples"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#simple-search"},"Simple Search")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#paginate"},"Paginate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#weighted-multi-match"},"Weighted Multi-Match")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#illegal-characters"},"Illegal Characters"))))),(0,r.kt)("p",null,"I did not have a chance to work with Elasticsearch a lot these days. I want to dive in to a few online courses and refresh my knowledge. Hoping that I can find something that I can plug in to a work project."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Ok, I spun up a ",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Elasticsearch/2019-09-08--elasticsearch_7-5_docker/2019-09-08"},"Docker ELK Stack")," version ",(0,r.kt)("strong",{parentName:"p"},"7.13.3"),". I now have to login to Kibana and create a simple mapping with the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "mappings" : {\n        "properties" : {\n            "speaker" : {"type": "keyword" },\n            "play_name" : {"type": "keyword" },\n            "line_id" : { "type" : "integer" },\n            "speech_number" : { "type" : "integer" }\n        }\n    }\n}\n')),(0,r.kt)("p",null,"And load it into Elasticsearch:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Elasticsearch 7 Refresher",src:t(96858).Z,width:"896",height:"337"})),(0,r.kt)("p",null,"The Data that I am going to work with is ",(0,r.kt)("a",{parentName:"p",href:"http://media.sundog-soft.com/es7/shakespeare_7.0.json"},"available for download here"),". Just download the file, copy it's content and add it to the index you created - in my case the ",(0,r.kt)("inlineCode",{parentName:"p"},"test123"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Elasticsearch 7 Refresher",src:t(42409).Z,width:"1095",height:"496"})),(0,r.kt)("p",null,"The JSON file contains to many entries - either break them up by plays or ",(0,r.kt)("a",{parentName:"p",href:"/docs/DevOps/Elasticsearch/2021-03-21-logstash-digesting-data/2021-03-21#use-curl-to-upload-data"},"check out the CURL way later on"),"!"),(0,r.kt)("p",null,"Now I will create an index pattern based on the index I just created:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Elasticsearch 7 Refresher",src:t(83764).Z,width:"1224",height:"398"})),(0,r.kt)("p",null,"And can test it with a search query - what play is the quote ",(0,r.kt)("inlineCode",{parentName:"p"},"It is the east, and Juliet is the sun.")," from?"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Elasticsearch 7 Refresher",src:t(30333).Z,width:"1224",height:"786"})),(0,r.kt)("h2",{id:"advanced-mappings"},"Advanced Mappings"),(0,r.kt)("h3",{id:"types-and-analyzer"},"Types and Analyzer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Type")," = ",(0,r.kt)("inlineCode",{parentName:"li"},"keyword"),": Value will not be analysed. Only exact matches will be a hit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Analyzer")," = ",(0,r.kt)("inlineCode",{parentName:"li"},"english"),": Defining a language analyzer will help you clean up your full text search by removing stop words and reducing words to their root form:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'PUT /television\n{\n    "mappings": {\n        "properties": {\n            "id": {\n                "type": "integer"\n            },\n            "year": {\n                "type": "date"\n            },\n            "genre": {\n                "type": "keyword"\n            },\n            "title": {\n                "type": "text",\n                "analyzer": "english"\n            }\n        }\n    }\n}\n')),(0,r.kt)("p",null,"We can add some data from imdb.com and format it to conform with the mapping above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'PUT _bulk\n{ "create" : { "_index" : "television", "_id" : "band-of-brothers" } }\n{ "id": "135569", "title" : "Band of Brothers", "year":2001 , "genre":["Action", "Drama", "History", "War"] }\n{ "create" : { "_index" : "television", "_id" : "chernobyl" } }\n{ "id": "122886", "title" : "Chernobyl", "year":2019 , "genre":["Drama", "History", "Thriller"] }\n{ "create" : { "_index" : "television", "_id" : "firefly" } }\n{ "id": "109487", "title" : "Firefly", "year":2002 , "genre":["Sci-Fi", "Adventure", "Drama"] }\n{ "create" : { "_index" : "television", "_id" : "battlestar-galactica" } }\n{ "id": "58559", "title" : "Battlestar Galactica", "year":2004 , "genre":["Action", "Adventure", "Drama", "Sci-Fi"] }\n{ "create" : { "_index" : "television", "_id" : "top-gear" } }\n{ "id": "1924", "title" : "Top Gear", "year":2002 , "genre":["Talk Show", "Adventure", "Travel"] }\n')),(0,r.kt)("p",null,"We can now search for a TV Series in Kibana:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'GET /television/_search\n{\n  "query": {\n    "match": {\n      "title": "galactica"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"I am only using a partial title and the wrong case - still I am getting the correct response from Elasticsearch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "took" : 1,\n  "timed_out" : false,\n  "_shards" : {\n    "total" : 1,\n    "successful" : 1,\n    "skipped" : 0,\n    "failed" : 0\n  },\n  "hits" : {\n    "total" : {\n      "value" : 1,\n      "relation" : "eq"\n    },\n    "max_score" : 1.2576691,\n    "hits" : [\n      {\n        "_index" : "television",\n        "_type" : "_doc",\n        "_id" : "battlestar-galactica",\n        "_score" : 1.2576691,\n        "_source" : {\n          "id" : "58559",\n          "title" : "Battlestar Galactica",\n          "year" : 2004,\n          "genre" : [\n            "Action",\n            "Adventure",\n            "Drama",\n            "Sci-Fi"\n          ]\n        }\n      }\n    ]\n  }\n}\n')),(0,r.kt)("p",null,"And since we are using the ",(0,r.kt)("strong",{parentName:"p"},"English Analyzer")," we can even use ",(0,r.kt)("inlineCode",{parentName:"p"},"brother")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"Brothers")," and get a correct hit:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'GET /television/_search\n{\n  "query": {\n    "match": {\n      "title": "brother"\n    }\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "took" : 0,\n  "timed_out" : false,\n  "_shards" : {\n    "total" : 1,\n    "successful" : 1,\n    "skipped" : 0,\n    "failed" : 0\n  },\n  "hits" : {\n    "total" : {\n      "value" : 1,\n      "relation" : "eq"\n    },\n    "max_score" : 1.2576691,\n    "hits" : [\n      {\n        "_index" : "television",\n        "_type" : "_doc",\n        "_id" : "band-of-brothers",\n        "_score" : 1.2576691,\n        "_source" : {\n          "id" : "135569",\n          "title" : "Band of Brothers",\n          "year" : 2001,\n          "genre" : [\n            "Action",\n            "Drama",\n            "History",\n            "War"\n          ]\n        }\n      }\n    ]\n  }\n}\n')),(0,r.kt)("p",null,"But searching for the ",(0,r.kt)("strong",{parentName:"p"},"Genre")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Talk")," (nor ",(0,r.kt)("inlineCode",{parentName:"p"},"talk show"),") will not get you any hits as we mapped this value as a ",(0,r.kt)("strong",{parentName:"p"},"Keyword")," that is not going to be analysed - only the entire value ",(0,r.kt)("inlineCode",{parentName:"p"},"Talk Show")," will work:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'GET /television/_search\n{\n  "query": {\n    "match": {\n      "genre": "Talk"\n    }\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "took" : 0,\n  "timed_out" : false,\n  "_shards" : {\n    "total" : 1,\n    "successful" : 1,\n    "skipped" : 0,\n    "failed" : 0\n  },\n  "hits" : {\n    "total" : {\n      "value" : 0,\n      "relation" : "eq"\n    },\n    "max_score" : null,\n    "hits" : [ ]\n  }\n}\n')),(0,r.kt)("h3",{id:"relationships"},"Relationships"),(0,r.kt)("p",null,"Elasticsearch allows us to join documents in a ",(0,r.kt)("strong",{parentName:"p"},"Parent / Child")," relationship. E.g. joining all episodes of a season into a group:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'PUT /the-expanse\n{\n    "mappings": {\n        "properties": {\n            "id": {\n                "type": "keyword"\n            },\n            "air-date": {\n                "type": "date"\n            },\n            "title": {\n                "type": "text",\n                "analyzer": "english"\n            },\n            "abstract": {\n                "type": "text",\n                "analyzer": "english"\n            },\n            "imdb-rating": {\n              "type": "float"\n            },\n            "filming-season": {\n                "type": "join",\n                "relations": {"season": "episode"}\n            }\n        }\n    }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'POST _bulk\n{ "create" : { "_index" : "the-expanse", "_id" : "the-expanse", "routing" : 1} }\n{ "id": "the-expanse", "filming-season": {"name": "season"}, "title" : "Season 01" }\n{ "create" : { "_index" : "the-expanse", "_id" : "dulcinea", "routing" : 1} }\n{ "id": "dulcinea", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "Dulcinea", "imdb-rating":"7.7", "air-date": "2015-11-23", "abstract":"In the asteroid belt near Saturn, James Holden and the crew of the ice freighter Canterbury, on its way to Ceres Station, investigate a distress call from an unknown derelict ship, the Scopuli." }\n{ "create" : { "_index" : "the-expanse", "_id" : "the-big-empty", "routing" : 1} }\n{ "id": "the-big-empty", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "The Big Empty", "imdb-rating":"7.7", "air-date": "2015-12-15", "abstract":"Holden and crew are trapped in a badly damaged shuttle. On Ceres, Miller uncovers clues about Julie Mao. On Earth, Chrisjen Avasarala questions a terrorist. " }\n{ "create" : { "_index" : "the-expanse", "_id" : "remember-the-cant", "routing" : 1} }\n{ "id": "remember-the-cant", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "Remember the Cant", "imdb-rating":"8.0", "air-date": "2015-12-16", "abstract":"While Avasarala plays a dangerous game of politics, Holden and his crew are forced to turn on one another while held captive by the Martian Navy." }\n{ "create" : { "_index" : "the-expanse", "_id" : "cqb", "routing" : 1} }\n{ "id": "cqb", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "CQB", "imdb-rating":"8.7", "air-date": "2015-12-16", "abstract":"Holden and crew are caught in the middle of a desperate battle as mysterious war ships attack and board the Donnager. As Miller continues to investigate Julie Mao, his partner Havelock continues to go missing." }\n{ "create" : { "_index" : "the-expanse",  "_id" : "back-to-the-butcher", "routing" : 1} }\n{ "id": "back-to-the-butcher", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "Back to the Butcher", "imdb-rating":"7.8", "air-date": "2016-01-05", "abstract":"The crew has survived the loss of the Canterbury and the Donnager and are contacted by an unlikely ally. Miller, on Ceres, continues his investigation and his thoughts of a conspiracy grow." }\n{ "create" : { "_index" : "the-expanse", "_id" : "rock-bottom", "routing" : 1} }\n{ "id": "rock-bottom", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "Rock Bottom", "imdb-rating":"8.0", "air-date": "2016-01-12", "abstract":"Holden\'s team makes an uneasy alliance with Fred Johnson while Miller fights for his life against Anderson Dawe\'s thugs." }\n{ "create" : { "_index" : "the-expanse", "_id" : "windmills", "routing" : 1} }\n{ "id": "windmills", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "Windmills", "imdb-rating":"7.9", "air-date": "2016-01-19", "abstract":"Holden and crew realize that they\'re not alone on the Rocinante and find themselves up against a Martian Marine blockade. Miller\'s dark night of the soul, believing all is lost, finds a new reason to keep going. Avasarala visits Holden\'s family in Montana." }\n{ "create" : { "_index" : "the-expanse", "_id" : "salvage", "routing" : 1} }\n{ "id": "salvage", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "Salvage", "imdb-rating":"8.7", "air-date": "2016-01-26", "abstract":"A derelict vessel holds a potentially devastating secret. Holden and his crew cross paths with Miller on Eros. Avasarala receives bad news. " }\n{ "create" : { "_index" : "the-expanse", "_id" : "critical-mass", "routing" : 1} }\n{ "id": "critical-mass", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "Critical Mass", "imdb-rating":"8.7", "air-date": "2016-02-02", "abstract":"A flashback to Julie\'s origin story reveals her trajectory. Holden and Miller finally meet and team up to get to the bottom of the strange emergency situation happening on Eros. As the true horror of the events on Eros is revealed, an ailing Holden and Miller must overcome incredible odds if they hope to live to fight another day. Part 1 of 2" }\n{ "create" : { "_index" : "the-expanse", "_id" : "leviathan-wakes", "routing" : 1} }\n{ "id": "leviathan-wakes", "filming-season": {"name": "episode", "parent": "the-expanse"}, "title" : "Leviathan Wakes", "imdb-rating":"8.7", "air-date": "2016-02-02", "abstract":"A flashback to Julie\'s origin story reveals her trajectory. Holden and Miller finally meet and team up to get to the bottom of the strange emergency situation happening on Eros. As the true horror of the events on Eros is revealed, an ailing Holden and Miller must overcome incredible odds if they hope to live to fight another day. Part 2 of 2" }\n')),(0,r.kt)("p",null,"We can now run a search query that returns to us all the episodes of season one of the TV series ",(0,r.kt)("strong",{parentName:"p"},"The Expanse"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'GET /the-expanse/_search\n{\n  "query": {\n    "has_parent": {\n      "parent_type": "season",\n      "query": {\n          "match": {\n              "title": "Season 01"\n          }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Find out which ",(0,r.kt)("strong",{parentName:"p"},"Season")," the ",(0,r.kt)("strong",{parentName:"p"},"Episode")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Leviathan Wakes")," belonged to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'GET /the-expanse/_search\n{\n  "query": {\n    "has_child": {\n      "type": "episode",\n      "query": {\n          "match": {\n              "title": "Leviathan Wakes"\n          }\n      }\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"delete-documents-by-query"},"Delete Documents by Query"),(0,r.kt)("p",null,"I just wanted to delete a couple of documents from an index and noticed that you cannot use regular expressions to do so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"DELETE /wiki_de_prefix_2021_06_07/_doc/yt-*\n")),(0,r.kt)("p",null,"Instead you have to use a query like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'GET /wiki_de_prefix_2021_06_07/_search\n{\n  "query": {\n    "match": {\n      "tags": "Youtube"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"And instead of directing it to ",(0,r.kt)("inlineCode",{parentName:"p"},"_search")," select ",(0,r.kt)("inlineCode",{parentName:"p"},"_delete_by_query")," to delete all documents that matched to search query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'POST wiki_de_prefix_2021_06_07/_delete_by_query\n{\n  "query": { \n    "match": {\n      "tags": "Youtube"\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"a-few-more-search-examples"},"A Few More Search Examples"),(0,r.kt)("h3",{id:"simple-search"},"Simple Search"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XGET 'https://my.domain.com/my_index/_search?q=avm'\n")),(0,r.kt)("h3",{id:"paginate"},"Paginate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XGET 'https://my.domain.com/my_index/_search?q=avm&size=5&from=0'\ncurl -XGET 'https://my.domain.com/my_index/_search?q=avm&size=5&from=5'\ncurl -XGET 'https://my.domain.com/my_index/_search?q=avm&size=5&from=10'\n")),(0,r.kt)("h3",{id:"weighted-multi-match"},"Weighted Multi-Match"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XGET \'https://my.domain.com/my_index/_search?pretty=true\' -H \'Content-Type: application/json\' -d \'{\n  "query": {\n    "multi_match" : {\n      "query": "IN-9020 Full HD Cameras", \n      "fields": ["title^8", "tags^10", "abstract^5", "description^3"]\n    }\n  }\n}\'\n')),(0,r.kt)("h3",{id:"illegal-characters"},"Illegal Characters"),(0,r.kt)("p",null,"I found out that Elasticsearch does not like it when you use the colon character ",(0,r.kt)("inlineCode",{parentName:"p"},":"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XGET \'https://my.domain.com/my_index/_search?pretty=true&q=FAQ+::+9020+Full+HD\'\n\n{\n  "error" : {\n    "root_cause" : [\n      {\n        "type" : "query_shard_exception",\n        "reason" : "Failed to parse query [FAQ :: 9020 Full HD]",\n        "index_uuid" : "XwBTMA_jS0G1CaEK7we_3Q",\n        "index" : "my_index"\n      }\n    ],\n    "type" : "search_phase_execution_exception",\n    "reason" : "all shards failed",\n    "phase" : "query",\n    "grouped" : true,\n    "failed_shards" : [\n      {\n        "shard" : 0,\n        "index" : "my_index",\n        "node" : "bFc0o2JrTBqG0zf9Wydh3g",\n        "reason" : {\n          "type" : "query_shard_exception",\n          "reason" : "Failed to parse query [FAQ :: 9020 Full HD]",\n          "index_uuid" : "XwBTMA_jS0G1CaEK7we_3Q",\n          "index" : "my_index",\n          "caused_by" : {\n            "type" : "parse_exception",\n            "reason" : "Cannot parse \'FAQ :: 9020 Full HD\': Encountered \\" \\":\\" \\": \\"\\" at line 1, column 5.\\nWas expecting one of:\\n    <BAREOPER> ...\\n    \\"(\\" ...\\n    \\"*\\" ...\\n    <QUOTED> ...\\n    <TERM> ...\\n    <PREFIXTERM> ...\\n    <WILDTERM> ...\\n    <REGEXPTERM> ...\\n    \\"[\\" ...\\n    \\"{\\" ...\\n    <NUMBER> ...\\n    ",\n            "caused_by" : {\n              "type" : "parse_exception",\n              "reason" : "Encountered \\" \\":\\" \\": \\"\\" at line 1, column 5.\\nWas expecting one of:\\n    <BAREOPER> ...\\n    \\"(\\" ...\\n    \\"*\\" ...\\n    <QUOTED> ...\\n    <TERM> ...\\n    <PREFIXTERM> ...\\n    <WILDTERM> ...\\n    <REGEXPTERM> ...\\n    \\"[\\" ...\\n    \\"{\\" ...\\n    <NUMBER> ...\\n    "\n            }\n          }\n        }\n      }\n    ]\n  },\n  "status" : 400\n}\n')),(0,r.kt)("p",null,"I can see the same in Kibana:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Elasticsearch 7 Refresher",src:t(91360).Z,width:"1247",height:"334"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'__Search Error: Expected "(", "{", value, whitespace but ":" found. FAQ :: 9020 Full HD -----^ KQLSyntaxError: Expected "(", "{", value, whitespace but ":" found. FAQ :: 9020 Full HD')),(0,r.kt)("p",null,"Here I can simply escape the offending characters with a slash:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Elasticsearch 7 Refresher",src:t(87409).Z,width:"1249",height:"259"})),(0,r.kt)("p",null,"Transferring this to my ",(0,r.kt)("em",{parentName:"p"},"Curl")," command I first need to escape:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"FAQ \\:\\: 9020 Full HD\n")),(0,r.kt)("p",null,"and then add the ",(0,r.kt)("a",{parentName:"p",href:"https://www.freeformatter.com/url-encoder.html"},"URL Encoding"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"FAQ+%5C%3A%5C%3A+9020+Full+HD\n")),(0,r.kt)("p",null,"Now it is possible to use URL query params as before:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XGET 'https://my.domain.com/my_index/_search/_search?pretty=true&q=FAQ+%5C%3A%5C%3A+9020+Full+HD'\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Alternatively"),", I can use the JSON format in my request to begin with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XGET \'https://my.domain.com/my_index/_search/_search?pretty=true\' -H \'Content-Type: application/json\' -d \'{\n  "query": {\n    "multi_match" : {\n      "query": "FAQ :: 9020", \n      "fields": ["title^8", "tags^10", "abstract^5", "description^3"]\n    }\n  }\n}\'\n')))}d.isMDXComponent=!0},96858:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Elasticsearch7_01-bbf3c72c0ad7d8ebdf0d21fcbe64cc9c.png"},42409:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Elasticsearch7_02-7d01f0c73b1e3f00b0a8d74754b2745b.png"},83764:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Elasticsearch7_03-274f845de6f6ef162ce85295e4ea9e04.png"},30333:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Elasticsearch7_04-4a7300729b7e27adfe534805438ee03f.png"},91360:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Elasticsearch7_05-0083f11be5061b5ed7e028c0803ad58a.png"},87409:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Elasticsearch7_06-fa3354e740f0468ea86ec8fcfae8a412.png"},76616:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-56c87802993aca6118d8d52d3a612a15.jpg"}}]);