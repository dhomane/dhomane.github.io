"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[15161],{3905:(e,t,r)=>{r.d(t,{Zo:()=>b,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},b=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,m=u["".concat(p,".").concat(d)]||u[d]||c[d]||o;return r?n.createElement(m,i(i({ref:t},b),{},{components:r})):n.createElement(m,i({ref:t},b))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},42322:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:8090,slug:"2021-10-13",title:"Zabbix Docker-Compose Setup",authors:"mpolinowski",tags:["Linux","Zabbix","Docker"]},i=void 0,s={unversionedId:"DevOps/Zabbix/2021-10-13--zabbix-compose-setup/index",id:"DevOps/Zabbix/2021-10-13--zabbix-compose-setup/index",title:"Zabbix Docker-Compose Setup",description:"Guangzhou, China",source:"@site/docs/DevOps/Zabbix/2021-10-13--zabbix-compose-setup/index.md",sourceDirName:"DevOps/Zabbix/2021-10-13--zabbix-compose-setup",slug:"/DevOps/Zabbix/2021-10-13--zabbix-compose-setup/2021-10-13",permalink:"/docs/DevOps/Zabbix/2021-10-13--zabbix-compose-setup/2021-10-13",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Zabbix/2021-10-13--zabbix-compose-setup/index.md",tags:[{label:"Linux",permalink:"/docs/tags/linux"},{label:"Zabbix",permalink:"/docs/tags/zabbix"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:8090,frontMatter:{sidebar_position:8090,slug:"2021-10-13",title:"Zabbix Docker-Compose Setup",authors:"mpolinowski",tags:["Linux","Zabbix","Docker"]},sidebar:"tutorialSidebar",previous:{title:"Testing the Zabbix API with Postman",permalink:"/docs/DevOps/Zabbix/2022-01-13--zabbix-api-testing/2022-01-13"},next:{title:"Zabbix Apache 2 Monitor",permalink:"/docs/DevOps/Zabbix/2021-01-14--zabbix-apache2-monitor/2021-10-14"}},p={},l=[{value:"Zabbix Server 5.4",id:"zabbix-server-54",level:2},{value:"Docker Compose Setup",id:"docker-compose-setup",level:3},{value:"Run",id:"run",level:3}],b={toc:l};function c(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},b,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Guangzhou, China",src:r(6227).Z,width:"1500",height:"377"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#zabbix-server-54"},"Zabbix Server 5.4"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#docker-compose-setup"},"Docker Compose Setup")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#run"},"Run"))))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/DevOps/Zabbix/2022-01-13--zabbix-server-v6/2022-01-13"},"Update to Version 6")),(0,a.kt)("h2",{id:"zabbix-server-54"},"Zabbix Server 5.4"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/zabbix-server-compose"},"Github Repository")),(0,a.kt)("h3",{id:"docker-compose-setup"},"Docker Compose Setup"),(0,a.kt)("p",null,"This article is based on a fork of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/zabbix/zabbix-docker"},"official Zabbix Server Repo")," with a few changes for a production setup:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Changes"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Removed everything I don't need - this file only sets up the Zabbix Server with a ",(0,a.kt)("strong",{parentName:"li"},"Postgres")," backend, the Zabbix Server Dashboard frontend using ",(0,a.kt)("strong",{parentName:"li"},"NGINX")," and an Zabbix Agent 1 to monitor the server itself."),(0,a.kt)("li",{parentName:"ol"},"Added container names, container restart policies and fixed IP addresses (The Zabbix Agent Container IP is set to ",(0,a.kt)("inlineCode",{parentName:"li"},"172.16.239.106")," - ",(0,a.kt)("strong",{parentName:"li"},"MAKE SURE")," to change the agent address from default ",(0,a.kt)("inlineCode",{parentName:"li"},"127.0.0.1")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"172.16.239.106")," inside the Server Dashboard! see below)."),(0,a.kt)("li",{parentName:"ol"},"Added an additional external network ",(0,a.kt)("inlineCode",{parentName:"li"},"ingress_gateway")," that will be used by the system ingress to direct traffic to Zabbix. The web frontend container opens both port ",(0,a.kt)("inlineCode",{parentName:"li"},"8080")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"8443")," to debug the initial setup (SSL will be handled by the Ingress and is not configured on port ",(0,a.kt)("inlineCode",{parentName:"li"},"8443"),"). The ports can be commented out later. Make sure to either remove the ",(0,a.kt)("inlineCode",{parentName:"li"},"ingress_gateway")," from the configuration file or add it manually ",(0,a.kt)("inlineCode",{parentName:"li"},"docker network create ingress_gateway")," before starting the containers.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Zabbix Agent Config",src:r(87247).Z,width:"1136",height:"458"})),(0,a.kt)("h3",{id:"run"},"Run"),(0,a.kt)("p",null,"Before running the compose file, check the ",(0,a.kt)("inlineCode",{parentName:"p"},"./env_vars")," files and change what needs to be changed (passwords!)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker network create ingress_gateway\ndocker-compose up\n")),(0,a.kt)("p",null,"Check the console output for errors and visit the Zabbix Dashboard on your server IP on port ",(0,a.kt)("inlineCode",{parentName:"p"},":8081"),"."))}c.isMDXComponent=!0},87247:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/Zabbix_Agent_Configuration_01-bc81b4211355a169a2291c833af363aa.png"},6227:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4f0fde65e04cafca8ab4f458db4fec43.jpg"}}]);