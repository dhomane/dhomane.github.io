"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[10744],{3905:(n,t,e)=>{e.d(t,{Zo:()=>p,kt:()=>d});var a=e(67294);function s(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function r(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function u(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){s(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function l(n,t){if(null==n)return{};var e,a,s=function(n,t){if(null==n)return{};var e,a,s={},r=Object.keys(n);for(a=0;a<r.length;a++)e=r[a],t.indexOf(e)>=0||(s[e]=n[e]);return s}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)e=r[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(s[e]=n[e])}return s}var o=a.createContext({}),i=function(n){var t=a.useContext(o),e=t;return n&&(e="function"==typeof n?n(t):u(u({},t),n)),e},p=function(n){var t=i(n.components);return a.createElement(o.Provider,{value:t},n.children)},c={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(n,t){var e=n.components,s=n.mdxType,r=n.originalType,o=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),m=i(e),d=s,_=m["".concat(o,".").concat(d)]||m[d]||c[d]||r;return e?a.createElement(_,u(u({ref:t},p),{},{components:e})):a.createElement(_,u({ref:t},p))}));function d(n,t){var e=arguments,s=t&&t.mdxType;if("string"==typeof n||s){var r=e.length,u=new Array(r);u[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=n,l.mdxType="string"==typeof n?n:s,u[1]=l;for(var i=2;i<r;i++)u[i]=e[i];return a.createElement.apply(null,u)}return a.createElement.apply(null,e)}m.displayName="MDXCreateElement"},38268:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>o,contentTitle:()=>u,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var a=e(87462),s=(e(67294),e(3905));const r={sidebar_position:9040,slug:"2020-06-20",title:"Salt Reactor and System Events",authors:"mpolinowski",tags:["LINUX","Salt"]},u=void 0,l={unversionedId:"DevOps/Salt/2020-06-20--salt-reactor-events/index",id:"DevOps/Salt/2020-06-20--salt-reactor-events/index",title:"Salt Reactor and System Events",description:"Victoria Harbour, Hong Kong",source:"@site/docs/DevOps/Salt/2020-06-20--salt-reactor-events/index.md",sourceDirName:"DevOps/Salt/2020-06-20--salt-reactor-events",slug:"/DevOps/Salt/2020-06-20--salt-reactor-events/2020-06-20",permalink:"/docs/DevOps/Salt/2020-06-20--salt-reactor-events/2020-06-20",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-20--salt-reactor-events/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9040,frontMatter:{sidebar_position:9040,slug:"2020-06-20",title:"Salt Reactor and System Events",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salt Beacons Module",permalink:"/docs/DevOps/Salt/2020-06-21--salt-events-and-thirdparty-apps/2020-06-21"},next:{title:"Salt Mine & Orchestrate",permalink:"/docs/DevOps/Salt/2020-06-19--salt-mine-orchestrate/2020-06-19"}},o={},i=[{value:"Salt Master Events",id:"salt-master-events",level:2},{value:"Custom Events",id:"custom-events",level:2},{value:"event.send",id:"eventsend",level:3},{value:"Reactor",id:"reactor",level:2},{value:"Invoking a Minion State by Event",id:"invoking-a-minion-state-by-event",level:3},{value:"Forwarding Pillar Data",id:"forwarding-pillar-data",level:3}],p={toc:i};function c(n){let{components:t,...r}=n;return(0,s.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Victoria Harbour, Hong Kong",src:e(33594).Z,width:"1500",height:"561"})),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#salt-master-events"},"Salt Master Events")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#custom-events"},"Custom Events"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#eventsend"},"event.send")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#reactor"},"Reactor"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#invoking-a-minion-state-by-event"},"Invoking a Minion State by Event")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#forwarding-pillar-data"},"Forwarding Pillar Data"))))),(0,s.kt)("h2",{id:"salt-master-events"},"Salt Master Events"),(0,s.kt)("p",null,"These events are fired on the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/topics/event/master_events.html"},"Salt Master event bus"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Salt Master Events"),(0,s.kt)("li",{parentName:"ul"},"Authentication events"),(0,s.kt)("li",{parentName:"ul"},"Start events"),(0,s.kt)("li",{parentName:"ul"},"Key events"),(0,s.kt)("li",{parentName:"ul"},"Job events"),(0,s.kt)("li",{parentName:"ul"},"Runner Events"),(0,s.kt)("li",{parentName:"ul"},"Presence Events"),(0,s.kt)("li",{parentName:"ul"},"Cloud Events")),(0,s.kt)("p",null,"To view events run the following command on your master:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt-run state.event pretty=true\n")),(0,s.kt)("p",null,"Or this on your minion:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt-call state.event pretty=true\n")),(0,s.kt)("p",null,"If you now run a ",(0,s.kt)("inlineCode",{parentName:"p"},"salt ubuntuAsus test.ping")," you will start to see an event log like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'20200807165432241482    {\n    "_stamp": "2020-08-07T16:54:32.241679",\n    "minions": [\n        "ubuntuAsus"\n    ]\n}\nsalt/job/20200807165432241482/new       {\n    "_stamp": "2020-08-07T16:54:32.242042",\n    "arg": [],\n    "fun": "test.ping",\n    "jid": "20200807165432241482",\n    "minions": [\n        "ubuntuAsus"\n    ],\n    "missing": [],\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob",\n    "user": "root"\n}\nsalt/job/20200807165432241482/ret/ubuntuAsus    {\n    "_stamp": "2020-08-07T16:54:32.295023",\n    "cmd": "_return",\n    "fun": "test.ping",\n    "fun_args": [],\n    "id": "ubuntuAsus",\n    "jid": "20200807165432241482",\n    "retcode": 0,\n    "return": true,\n    "success": true\n}\n')),(0,s.kt)("p",null,"You can see the timestamped event going out from the master and the return from your minion."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"salt.runners.state")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/runners/all/salt.runners.state.html#salt.runners.state.event"},"Watch Salt's event bus and block until the given tag is matched"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Reboot a minion and run highstate when it comes back online\nsalt 'ubuntuAsus' system.reboot && \\\\\n    salt-run state.event 'salt/minion/ubuntuAsus/start' count=1 quiet=True && \\\\\n    salt 'ubuntuAsus' state.highstate\n\n# Reboot multiple minions and run highstate when all are back online\nsalt -L 'ubuntuAsus,ubuntuMaster' system.reboot && \\\\\n    salt-run state.event 'salt/minion/*/start' count=3 quiet=True && \\\\\n    salt -L 'ubuntuAsus,ubuntuMaster' state.highstate\n")),(0,s.kt)("h2",{id:"custom-events"},"Custom Events"),(0,s.kt)("p",null,"Use the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.event.html#salt.modules.event.send"},"Salt Event System")," to fire events from the master to the minion and vice-versa."),(0,s.kt)("h3",{id:"eventsend"},"event.send"),(0,s.kt)("p",null,"Start the event listener on your master ",(0,s.kt)("inlineCode",{parentName:"p"},"salt-run state.event pretty=true")," and send a custom event from your minion:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt-call event.send instar/custom/event\n")),(0,s.kt)("p",null,"You will see the incoming event on your master:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'salt/auth       {\n    "_stamp": "2020-08-07T17:44:14.155523",\n    "act": "accept",\n    "id": "ubuntuAsus",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-07T17:44:14.242055"\n}\ninstar/custom/event     {\n    "_stamp": "2020-08-07T17:44:14.294823",\n    "cmd": "_minion_event",\n    "data": {\n        "__pub_fun": "event.send",\n        "__pub_jid": "20200807174414296024",\n        "__pub_pid": 85669,\n        "__pub_tgt": "salt-call"\n    },\n    "id": "ubuntuAsus",\n    "tag": "instar/custom/event"\n}\nsalt/job/20200807174414299104/ret/ubuntuAsus    {\n    "_stamp": "2020-08-07T17:44:14.299934",\n    "arg": [\n        "instar/custom/event"\n    ],\n    "cmd": "_return",\n    "fun": "event.send",\n    "fun_args": [\n        "instar/custom/event"\n    ],\n    "id": "ubuntuAsus",\n    "jid": "20200807174414299104",\n    "retcode": 0,\n    "return": true,\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob"\n}\n')),(0,s.kt)("p",null,"You can also send JSON formatted data with your event:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'salt-call event.send instar/custom/event \'{"what": "something happened", "is it serious": true}\'\n')),(0,s.kt)("p",null,"You will see the incoming event on your master:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'salt/auth       {\n    "_stamp": "2020-08-07T18:22:48.152369",\n    "act": "accept",\n    "id": "ubuntuAsus",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-07T18:22:48.242329"\n}\ninstar/custom/event     {\n    "_stamp": "2020-08-07T18:22:48.296609",\n    "cmd": "_minion_event",\n    "data": {\n        "__pub_fun": "event.send",\n        "__pub_jid": "20200807182248298801",\n        "__pub_pid": 85938,\n        "__pub_tgt": "salt-call",\n        "is it serious": true,\n        "what": "something happened"\n    },\n    "id": "ubuntuAsus",\n    "tag": "instar/custom/event"\n}\nsalt/job/20200807182248300952/ret/ubuntuAsus    {\n    "_stamp": "2020-08-07T18:22:48.302004",\n    "arg": [\n        "instar/custom/event",\n        "{\\"what\\": \\"something happened\\", \\"is it serious\\": true}"\n    ],\n    "cmd": "_return",\n    "fun": "event.send",\n    "fun_args": [\n        "instar/custom/event",\n        "{\\"what\\": \\"something happened\\", \\"is it serious\\": true}"\n    ],\n    "id": "ubuntuAsus",\n    "jid": "20200807182248300952",\n    "retcode": 0,\n    "return": true,\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob"\n}\n')),(0,s.kt)("p",null,"You can also add environment variables, grains or pillar data with your event:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt-call event.send instar/custom/event with_grains=true  //send all grains\n\nsalt-call event.send instar/custom/event with_grains='[os]'\n")),(0,s.kt)("p",null,"You will see the incoming event on your master:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'salt/auth       {\n    "_stamp": "2020-08-07T18:35:38.536997",\n    "act": "accept",\n    "id": "ubuntuAsus",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-07T18:35:38.622552"\n}\ninstar/custom/event     {\n    "_stamp": "2020-08-07T18:35:38.669904",\n    "cmd": "_minion_event",\n    "data": {\n        "__pub_fun": "event.send",\n        "__pub_jid": "20200807183538672084",\n        "__pub_pid": 86062,\n        "__pub_tgt": "salt-call",\n        "grains": {\n            "os": "Ubuntu"\n        }\n    },\n    "id": "ubuntuAsus",\n    "tag": "instar/custom/event"\n}\nsalt/job/20200807183538673638/ret/ubuntuAsus    {\n    "_stamp": "2020-08-07T18:35:38.674478",\n    "arg": [\n        "instar/custom/event",\n        "with_grains=[os]"\n    ],\n    "cmd": "_return",\n    "fun": "event.send",\n    "fun_args": [\n        "instar/custom/event",\n        "with_grains=[os]"\n    ],\n    "id": "ubuntuAsus",\n    "jid": "20200807183538673638",\n    "retcode": 0,\n    "return": true,\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob"\n}\n')),(0,s.kt)("h2",{id:"reactor"},"Reactor"),(0,s.kt)("h3",{id:"invoking-a-minion-state-by-event"},"Invoking a Minion State by Event"),(0,s.kt)("p",null,"The Salt Reactor can be configured to listen to ",(0,s.kt)("inlineCode",{parentName:"p"},"salt.events")," and execute SLS files when triggered. We can configure Reactor by adding the following lines to our local Master config ",(0,s.kt)("inlineCode",{parentName:"p"},"/etc/salt/master.d/local.conf ")," :"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"reactor:\n  - 'instar/custom/*':\n    - /srv/reactor/highstate.sls\n")),(0,s.kt)("p",null,"And create the ",(0,s.kt)("inlineCode",{parentName:"p"},"nano /srv/reactor/highstate.sls")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"run_highstate:\n  cmd.state.highstate:\n    - tgt: 'ubuntuAsus'\n")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"(Reactor equivalent to ",(0,s.kt)("inlineCode",{parentName:"em"},"salt ubuntuAsus state.highstate"),")")),(0,s.kt)("p",null,"And restart the master:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl restart salt-master\n")),(0,s.kt)("p",null,"We can now trigger an event on our minion that matches ",(0,s.kt)("inlineCode",{parentName:"p"},"instar/custom/*")," to see our Reactor spring into action:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt-call event.send instar/custom/event\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'salt/auth       {\n    "_stamp": "2020-08-07T19:33:47.014561",\n    "act": "accept",\n    "id": "ubuntuAsus",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-07T19:33:47.119011"\n}\ninstar/custom/event     {\n    "_stamp": "2020-08-07T19:33:47.221573",\n    "cmd": "_minion_event",\n    "data": {\n        "__pub_fun": "event.send",\n        "__pub_jid": "20200807193347220371",\n        "__pub_pid": 86296,\n        "__pub_tgt": "salt-call"\n    },\n    "id": "ubuntuAsus",\n    "tag": "instar/custom/event"\n}\nsalt/job/20200807193347229445/ret/ubuntuAsus    {\n    "_stamp": "2020-08-07T19:33:47.231956",\n    "arg": [\n        "instar/custom/event"\n    ],\n    "cmd": "_return",\n    "fun": "event.send",\n    "fun_args": [\n        "instar/custom/event"\n    ],\n    "id": "ubuntuAsus",\n    "jid": "20200807193347229445",\n    "retcode": 0,\n    "return": true,\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob"\n}\n20200807193349446458    {\n    "_stamp": "2020-08-07T19:33:49.447265",\n    "minions": [\n        "ubuntuAsus"\n    ]\n}\nsalt/job/20200807193349446458/new       {\n    "_stamp": "2020-08-07T19:33:49.447548",\n    "arg": [],\n    "fun": "state.highstate",\n    "jid": "20200807193349446458",\n    "minions": [\n        "ubuntuAsus"\n    ],\n    "missing": [],\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob",\n    "user": "root"\n}\nsalt/auth       {\n    "_stamp": "2020-08-07T19:33:49.464831",\n    "act": "accept",\n    "id": "ubuntuMaster",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nsalt/auth       {\n    "_stamp": "2020-08-07T19:33:49.469238",\n    "act": "accept",\n    "id": "ubuntuAsus",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----",\n    "result": true\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-07T19:33:49.625946"\n}\nsalt/job/20200807193349446458/ret/ubuntuAsus    {\n    "_stamp": "2020-08-07T19:33:49.773631",\n    "cmd": "_return",\n    "fun": "state.highstate",\n    "fun_args": [],\n    "id": "ubuntuAsus",\n    "jid": "20200807193349446458",\n    "out": "highstate",\n    "retcode": 2,\n    "return": {\n        "no_|-states_|-states_|-None": {\n            "__run_num__": 0,\n            "changes": {},\n            "comment": "No Top file or master_tops data matches found. Please see master log for details.",\n            "name": "No States",\n            "result": false\n        }\n    },\n    "success": false\n}\nno.None {\n    "__run_num__": 0,\n    "_stamp": "2020-08-07T19:33:49.773962",\n    "changes": {},\n    "comment": "No Top file or master_tops data matches found. Please see master log for details.",\n    "name": "No States",\n    "result": false,\n    "retcode": 2\n}\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"The highstate event was successfully triggered by the Reactor - have to check why the top file for it was not found.")),(0,s.kt)("h3",{id:"forwarding-pillar-data"},"Forwarding Pillar Data"),(0,s.kt)("p",null,"We previously created a file that downloaded source code from Github: ",(0,s.kt)("inlineCode",{parentName:"p"},"nano /srv/salt/apptest.sls"),". Here we hardcoded the repository branch ",(0,s.kt)("inlineCode",{parentName:"p"},"rev: master"),". We can use Reactor to forward this information for us:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"{% from \"apache/map.sls\" import apache with context %}\n\n{% set version = salt.pillar.get('version', 'master') %}\n\ninclude:\n  - apache\n\napptest:\n  git.latest:\n    - name: https://github.com/mpolinowski/docker-elk.git\n    - rev: {{ version }}\n    - target: /opt/apptest\n    - watch_in:\n      - service: enable_apache\n\n...\n\n")),(0,s.kt)("p",null,"Query ",(0,s.kt)("inlineCode",{parentName:"p"},"salt.pillar.get('version')")," to set Git branch or default to ",(0,s.kt)("inlineCode",{parentName:"p"},"master"),". So we are now able to inject the branch by adding the respective pillar data to our state command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' state.sls apptest pillar='{version: development}'\n")),(0,s.kt)("p",null,"We can now add an event to our Reactor config that should trigger this state - ",(0,s.kt)("inlineCode",{parentName:"p"},"nano /etc/salt/master.d/local.conf "),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"reactor:\n  - 'instar/custom/*':\n    - /srv/reactor/highstate.sls\n  - 'instar/deploy/testapp':\n    - /srv/reactor/deploy_testapp.sls\n")),(0,s.kt)("p",null,"Now we can add the Reactor script ",(0,s.kt)("inlineCode",{parentName:"p"},"nano /srv/reactor/deploy_testapp.sls"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"deploy_testapp:\n  cmd.state.sls:\n    - tgt: {{ data.id }}\n    - kwarg:\n        mods: apptest\n        pillar:\n            version: {{ data.data.version }}\n")),(0,s.kt)("p",null,"Which is the equivalent of running ",(0,s.kt)("inlineCode",{parentName:"p"},"salt '*' state.sls mods=apptest")," manually - the version has to be injected by the event that triggers our Reactor script. We can now listen to the event bus on our master ",(0,s.kt)("inlineCode",{parentName:"p"},"salt-run state.event pretty=true")," and manually trigger the ",(0,s.kt)("inlineCode",{parentName:"p"},"instar/deploy/testapp")," event on our minion:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"salt-call event.send instar/deploy/testapp version=master\n")),(0,s.kt)("p",null,"The event will be registered on our master:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'salt/auth       {\n    "_stamp": "2020-08-08T10:58:42.732432",\n    "act": "accept",\n    "id": "ubuntuAsus",\n    "pub": "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w=AQAB\\n-----END PUBLIC KEY-----"\n    "result": true\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-08T10:58:42.822297"\n}\ninstar/deploy/testapp   {\n    "_stamp": "2020-08-08T10:58:42.876885",\n    "cmd": "_minion_event",\n    "data": {\n        "__pub_fun": "event.send",\n        "__pub_jid": "20200808105842881554",\n        "__pub_pid": 3292,\n        "__pub_tgt": "salt-call",\n        "version": "master"\n    },\n    "id": "ubuntuAsus",\n    "tag": "instar/deploy/testapp"\n}\nsalt/job/20200808105842880875/ret/ubuntuAsus    {\n    "_stamp": "2020-08-08T10:58:42.881836",\n    "arg": [\n        "instar/deploy/testapp",\n        "version=master"\n    ],\n    "cmd": "_return",\n    "fun": "event.send",\n    "fun_args": [\n        "instar/deploy/testapp",\n        "version=master"\n    ],\n    "id": "ubuntuAsus",\n    "jid": "20200808105842880875",\n    "retcode": 0,\n    "return": true,\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob"\n}\n20200808105842909103    {\n    "_stamp": "2020-08-08T10:58:42.909751",\n    "minions": [\n        "ubuntuAsus"\n    ]\n}\nsalt/job/20200808105842909103/new       {\n    "_stamp": "2020-08-08T10:58:42.909976",\n    "arg": [\n        {\n            "__kwarg__": true,\n            "mods": "apptest",\n            "pillar": {\n                "version": "master"\n            }\n        }\n    ],\n    "fun": "state.sls",\n    "jid": "20200808105842909103",\n    "minions": [\n        "ubuntuAsus"\n    ],\n    "missing": [],\n    "tgt": "ubuntuAsus",\n    "tgt_type": "glob",\n    "user": "root"\n}\nminion/refresh/ubuntuAsus       {\n    "Minion data cache refresh": "ubuntuAsus",\n    "_stamp": "2020-08-08T10:58:43.041467"\n}\nsalt/job/20200808105842909103/ret/ubuntuAsus    {\n    "_stamp": "2020-08-08T10:58:49.734560",\n    "cmd": "_return",\n    "fun": "state.sls",\n    "fun_args": [\n        {\n            "mods": "apptest",\n            "pillar": {\n                "version": "master"\n            }\n        }\n    ],\n    "id": "ubuntuAsus",\n    "jid": "20200808105842909103",\n    "out": "highstate",\n    "retcode": 0,\n    "return": {\n        "event_|-notify_of_fail_|-apptest/failed_|-send": {\n            "__run_num__": 4,\n            "__sls__": "apptest",\n            "__state_ran__": false,\n            "changes": {},\n            "comment": "State was not run because onfail req did not change",\n            "duration": 0.004,\n            "result": true,\n            "start_time": "10:58:49.740913"\n        },\n        "git_|-apptest_|-https://github.com/mpolinowski/docker-elk.git_|-latest": {\n            "__id__": "apptest",\n            "__run_num__": 2,\n            "__sls__": "apptest",\n            "changes": {},\n            "comment": "Repository /opt/apptest is up-to-date",\n            "duration": 3184.049,\n            "name": "https://github.com/mpolinowski/docker-elk.git",\n            "result": true,\n            "start_time": "10:58:46.510959"\n        },\n        "module_|-reload_apache_|-service.stop_|-run": {\n            "__run_num__": 1,\n            "__sls__": "apptest",\n            "changes": {},\n            "comment": "No changes detected",\n            "duration": 0.006,\n            "result": true,\n            "start_time": "10:58:46.510837"\n        },\n        "pkg_|-install_apache_|-apache2_|-installed": {\n            "__id__": "install_apache",\n            "__run_num__": 0,\n            "__sls__": "apache",\n            "changes": {},\n            "comment": "All specified packages are already installed",\n            "duration": 22.176,\n            "name": "apache2",\n            "result": true,\n            "start_time": "10:58:44.051565"\n        },\n        "service_|-enable_apache_|-apache2_|-running": {\n            "__id__": "enable_apache",\n            "__run_num__": 3,\n            "__sls__": "apache",\n            "changes": {},\n            "comment": "The service apache2 is already running",\n            "duration": 43.795,\n            "name": "apache2",\n            "result": true,\n            "start_time": "10:58:49.695390"\n        }\n    },\n    "success": true\n}\n')))}c.isMDXComponent=!0},33594:(n,t,e)=>{e.d(t,{Z:()=>a});const a=e.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-0e827efd0efa56c96e223c481d0c2c45.jpg"}}]);