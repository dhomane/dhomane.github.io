"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[10988],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(k,s(s({ref:t},p),{},{components:n})):a.createElement(k,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},88835:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:6030,slug:"2021-09-10",title:"Reconnecting Websockets",authors:"mpolinowski",tags:["Javascript"]},s=void 0,i={unversionedId:"Development/Javascript/2021-09-10--websocket-recconects/index",id:"Development/Javascript/2021-09-10--websocket-recconects/index",title:"Reconnecting Websockets",description:"Shenzhen, China",source:"@site/docs/Development/Javascript/2021-09-10--websocket-recconects/index.md",sourceDirName:"Development/Javascript/2021-09-10--websocket-recconects",slug:"/Development/Javascript/2021-09-10--websocket-recconects/2021-09-10",permalink:"/docs/Development/Javascript/2021-09-10--websocket-recconects/2021-09-10",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2021-09-10--websocket-recconects/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:6030,frontMatter:{sidebar_position:6030,slug:"2021-09-10",title:"Reconnecting Websockets",authors:"mpolinowski",tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Working with JSON APIs",permalink:"/docs/Development/Javascript/2022-03-01--json-apis-training/2022-03-01"},next:{title:"Convert Alerts into Toasts",permalink:"/docs/Development/Javascript/2021-09-10--notifications-alerts-as-toast/2021-09-10"}},c={},l=[{value:"Usage",id:"usage",level:2},{value:"Serve Static Files",id:"serve-static-files",level:3},{value:"Importing the Script",id:"importing-the-script",level:3},{value:"Using the Script",id:"using-the-script",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Display the Connection Status",id:"display-the-connection-status",level:2}],p={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Shenzhen, China",src:n(46447).Z,width:"1500",height:"385"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#usage"},"Usage"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#serve-static-files"},"Serve Static Files")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#importing-the-script"},"Importing the Script")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#using-the-script"},"Using the Script"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#parameters"},"Parameters")))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#display-the-connection-status"},"Display the Connection Status"))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/joewalnes/reconnecting-websocket"},"ReconnectingWebSocket"),": A small JavaScript library that decorates the WebSocket API to provide a WebSocket connection that will automatically reconnect if the connection is dropped."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/go_gorilla_websockets/blob/master/html/home.jet"},"Github Repository"))),(0,o.kt)("p",null,"Download the minified JS file to your static directory ",(0,o.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/joewalnes/reconnecting-websocket/master/reconnecting-websocket.min.js"},"Download"),"."),(0,o.kt)("h3",{id:"serve-static-files"},"Serve Static Files"),(0,o.kt)("p",null,"Prepare your app to serve static files from the ",(0,o.kt)("inlineCode",{parentName:"p"},"static")," directory - e.g. in a Go app using ",(0,o.kt)("a",{parentName:"p",href:"https://golang.hotexamples.com/examples/github.com.bmizerany.pat/-/New/golang-new-function-examples.html#0x73832a4a85086717d10b81f4f000d8d18bfaa11765bb899269e6f405254749ba-81,,109,"},"pat")," add the following to your routing file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "go_gorilla_websocket/internal/handlers"\n    "net/http"\n\n    "github.com/bmizerany/pat"\n)\n\nfunc routes() http.Handler {\n    m := pat.New()\n\n    m.Get("/", http.HandlerFunc(handlers.Home))\n    m.Get("/ws", http.HandlerFunc(handlers.WsEndpoint))\n\n    fileServer := http.FileServer(http.Dir("./static/"))\n    m.Get("/static/", http.StripPrefix("/static", fileServer))\n\n    return m\n}\n')),(0,o.kt)("p",null,"Or in ",(0,o.kt)("a",{parentName:"p",href:"https://expressjs.com/en/starter/static-files.html"},"Express.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const path = require('path')\napp.use('/static', express.static(path.join(__dirname, '/static')))\n")),(0,o.kt)("h3",{id:"importing-the-script"},"Importing the Script"),(0,o.kt)("p",null,"Just add a script tag to the HTML landing page of your application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<script src="/static/reconnecting-websocket.min.js"><\/script>\n')),(0,o.kt)("h3",{id:"using-the-script"},"Using the Script"),(0,o.kt)("p",null,"The script allows us to simply replace our client side Websocket JS code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'document.addEventListener("DOMContentLoaded", function() {\n    socket = new WebSocket("ws://127.0.0.1:8080/ws");\n\n    socket.onopen = () => {\n        console.log("Websocket connection established")\n    }\n\n    socket.onclose = () => {\n        console.log("Websocket connection closed")\n    }\n\n    socket.onerror = error => {\n        console.log(error)\n    }\n}\n')),(0,o.kt)("p",null,"Instead of using ",(0,o.kt)("inlineCode",{parentName:"p"},'new WebSocket("ws://127.0.0.1:8080/ws")')," we can now use ",(0,o.kt)("inlineCode",{parentName:"p"},'new ReconnectingWebSocket("ws://127.0.0.1:8080/ws")'),":"),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"var socket = new ReconnectingWebSocket(url, protocols, options);\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"url"),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("a",{parentName:"td",href:"https://html.spec.whatwg.org/multipage/comms.html#network"},"URL")," you are connecting to.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"protocols"),(0,o.kt)("td",{parentName:"tr",align:null},"Optional string or array of ",(0,o.kt)("a",{parentName:"td",href:"https://tools.ietf.org/html/rfc6455"},"protocols")," per the WebSocket spec.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/joewalnes/reconnecting-websocket#options-1"},"Options"))))),(0,o.kt)("p",null,"Options can either be passed as the 3rd parameter upon instantiation or set directly on the object after instantiation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var socket = new ReconnectingWebSocket(url, null, {debug: true, reconnectInterval: 3000});\n")),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var socket = new ReconnectingWebSocket(url);\nsocket.debug = true;\nsocket.timeoutInterval = 3000;\n")),(0,o.kt)("p",null,"The result then looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'document.addEventListener("DOMContentLoaded", function() {\n    socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws");\n    socket.debug = true;\n    socket.timeoutInterval = 3000;\n\n    socket.onopen = () => {\n        console.log("Websocket connection established")\n    }\n\n    socket.onclose = () => {\n        console.log("Websocket connection closed")\n    }\n\n    socket.onerror = error => {\n        console.log(error)\n    }\n}\n')),(0,o.kt)("p",null,"If you stop your WS server now your app will continue to try to reconnect every ",(0,o.kt)("inlineCode",{parentName:"p"},"3000ms")," until you start the server back up and a connection can be re-established:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Reconnecting Websockets",src:n(47911).Z,width:"1521",height:"393"})),(0,o.kt)("h2",{id:"display-the-connection-status"},"Display the Connection Status"),(0,o.kt)("p",null,"We can now use the status of our ws connection to display either a red or green batch - depending on whether or not we are connected to our server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div class="d-flex justify-content-between">\n    <h3>Who is online?</h3>\n    <div id="status"></div>\n</div>\n')),(0,o.kt)("p",null,"The inner HTML of this container with ID ",(0,o.kt)("inlineCode",{parentName:"p"},"status")," will be set by the connection state:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'document.addEventListener("DOMContentLoaded", function() {\n    socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws");\n    socket.debug = true;\n    socket.timeoutInterval = 3000;\n\n    const offline = `<span class="badge rounded-pill bg-danger">Disconnected</span>`\n    const online = `<span class="badge rounded-pill bg-primary">Connected</span>`\n    let statusBadge = document.getElementById("status");\n    \n    socket.onopen = () => {\n        console.log("Websocket connection established")\n        statusBadge.innerHTML = online\n    }\n\n    socket.onclose = () => {\n        console.log("Websocket connection closed")\n        statusBadge.innerHTML = offline\n    }\n\n    socket.onerror = error => {\n        console.log(error)\n        statusBadge.innerHTML = offline\n    }\n}\n')))}u.isMDXComponent=!0},47911:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Reconnecting_Websocket_01-87d6e62156efc5cf6eb5bb331e250504.png"},46447:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-a074e88afd2103a14684a3454129e7d0.jpg"}}]);