"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[37728],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>d});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(o),d=a,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return o?n.createElement(h,i(i({ref:t},c),{},{components:o})):n.createElement(h,i({ref:t},c))}));function d(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<r;u++)i[u]=o[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},43569:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var n=o(87462),a=(o(67294),o(3905));const r={sidebar_position:6060,slug:"2022-07-24",title:"Mosquitto Broker Docker Cross-Compile",authors:"mpolinowski",tags:["IoT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system"},i=void 0,s={unversionedId:"IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index",id:"IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index",title:"Mosquitto Broker Docker Cross-Compile",description:"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system",source:"@site/docs/IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index.md",sourceDirName:"IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation",slug:"/IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/2022-07-24",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/2022-07-24",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/MQTT/2022-07-24-mosquitto-broker-cross-compilation/index.md",tags:[{label:"IoT",permalink:"/docs/tags/io-t"}],version:"current",sidebarPosition:6060,frontMatter:{sidebar_position:6060,slug:"2022-07-24",title:"Mosquitto Broker Docker Cross-Compile",authors:"mpolinowski",tags:["IoT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system"},sidebar:"tutorialSidebar",previous:{title:"MQTT",permalink:"/docs/category/mqtt"},next:{title:"Mosquitto Broker from Source",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-07-23-mosquitto-broker-compilation/2022-07-23"}},l={},u=[{value:"Preparation",id:"preparation",level:2},{value:"Compiling Mosquitto for ARM",id:"compiling-mosquitto-for-arm",level:2},{value:"Preparation",id:"preparation-1",level:3},{value:"Download the Source Code",id:"download-the-source-code",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Build",id:"build",level:3},{value:"Installation",id:"installation",level:3}],c={toc:u};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Guangzhou, China",src:o(69978).Z,width:"2385",height:"962"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#preparation"},"Preparation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#compiling-mosquitto-for-arm"},"Compiling Mosquitto for ARM"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#preparation-1"},"Preparation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#download-the-source-code"},"Download the Source Code")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#configuration"},"Configuration")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#build"},"Build")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#installation"},"Installation"))))),(0,a.kt)("p",null,"In the previous article I compiled the Mosquitto broker on Arch Linux and was able to get it to work with Websocket support. The target system - an INSTAR IP camera - uses an ARM processor which means that I have to find a way to cross-compile a binary that I can run on that system:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"uname -m\narmv7l\n")),(0,a.kt)("p",null,"There are several guides on how to install special compilers on your system. But I would prefer to run the compiler inside a docker container instead."),(0,a.kt)("h2",{id:"preparation"},"Preparation"),(0,a.kt)("p",null,"Download the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dockcross/dockcross"},"dockcross repository"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/dockcross/dockcross.git\ncd dockcross\n")),(0,a.kt)("p",null,"The repository offers containers for a variety of environments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"android-arm                 linux-armv5-musl    linux-riscv32          README.md\nandroid-arm64               linux-armv5-uclibc  linux-riscv64          test\nandroid-x86                 linux-armv6         linux-s390x            tools\nandroid-x86_64              linux-armv6-lts     linux-x64              web-wasi\nbare-armv7emhf-nano_newlib  linux-armv6-musl    linux-x64-clang        web-wasm\ncommon                      linux-armv7         linux-x64-tinycc       windows-arm64\nCONTRIBUTING.md             linux-armv7a        linux-x86              windows-armv7\nDockerfile.in               linux-armv7a-lts    linux-x86_64-full      windows-shared-x64\nimagefiles                  linux-armv7l-musl   linux-xtensa-uclibc    windows-shared-x64-posix\nLICENSE                     linux-armv7-lts     Makefile               windows-shared-x86\nlinux-arm64                 linux-m68k-uclibc   manylinux2014-aarch64  windows-static-x64\nlinux-arm64-full            linux-mips          manylinux2014-x64      windows-static-x64-posix\nlinux-arm64-lts             linux-mipsel-lts    manylinux2014-x86      windows-static-x86\nlinux-arm64-musl            linux-mips-lts      manylinux_2_28-x64\nlinux-armv5                 linux-ppc64le       manylinux-common\n")),(0,a.kt)("p",null,"You are now supposed to just run the included scripts to download the correct docker image and run an compiler script inside the container:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm dockcross/linux-armv7l-musl > ./dockcross-linux-armv7l-musl\nchmod +x ./dockcross-linux-armv7l-musl\n./dockcross-linux-armv7l-musl bash -c '$CC test/C/hello.c -o hello_arm'\n")),(0,a.kt)("p",null,"The test C code is a simple hello world:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint main(int argc, char *argv[])\n{\n  printf("Hello cross-compilation world!\\n");\n  return 0;\n}\n')),(0,a.kt)("p",null,"Running the command generates a binary inside the root dir that is ",(0,a.kt)("em",{parentName:"p"},"ARM'ed"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"file hello_arm\nhello_arm: ELF 32-bit LSB pie executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-armhf.so.1, not stripped\n")),(0,a.kt)("h2",{id:"compiling-mosquitto-for-arm"},"Compiling Mosquitto for ARM"),(0,a.kt)("p",null,"Using an ARM platform to compile your binaries."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Platform used"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Linux kali-raspberry-pi 5.15.44-Re4son-v7+ #1 SMP Debian kali-pi (2022-07-03) armv7l"))),(0,a.kt)("h3",{id:"preparation-1"},"Preparation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get update && apt-get upgrade\nsudo apt-get install build-essential quilt python-setuptools python3\nsudo apt-get install libssl-dev\nsudo apt-get install cmake\nsudo apt-get install libc-ares-dev\nsudo apt-get install uuid-dev\nsudo apt-get install daemon\nsudo apt-get install libwebsockets-dev\nsudo apt install libcjson1 libcjson-dev\nsudo apt autoremove\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo adduser mosquitto\n")),(0,a.kt)("h3",{id:"download-the-source-code"},"Download the Source Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://mosquitto.org/files/source/mosquitto-2.0.15.tar.gz\ntar -xvf mosquitto-2.0.15.tar.gz\nrm -rf mosquitto-2.0.15.tar.gz\ncd ./mosquitto-2.0.15\n")),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano config.mk\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"WITH_TLS:=yes\nWITH_WEBSOCKETS:=yes\nWITH_STATIC_LIBRARIES:=yes\nWITH_SHARED_LIBRARIES:=no\nWITH_BUNDLED_DEPS:=yes\nWITH_CJSON:=yes\nWITH_DOCS=no\n")),(0,a.kt)("h3",{id:"build"},"Build"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"make\n")),(0,a.kt)("p",null,"The Build process now ran through without a hitch and returned a ARM'ed version of Mosquitto:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"file src/mosquitto\nsrc/mosquitto: ELF 32-bit LSB pie executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, BuildID[sha1]=43039f3446c03a8e22c3ca0c2378ca6bffa5ccd0, for GNU/Linux 3.2.0, with debug_info, not stripped\n")),(0,a.kt)("h3",{id:"installation"},"Installation"),(0,a.kt)("p",null,"To install the broker run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo make install\n")),(0,a.kt)("p",null,"Configure the Broker with a default configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/mosquitto/mosquitto.conf\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},"auto_id_prefix zeroid-\npersistent_client_expiration 1d\nqueue_qos0_messages true\nuser mosquitto\nlistener 1883\nprotocol mqtt\nlistener 1885\nprotocol websockets\nsocket_domain ipv4\nautosave_interval 7200\npersistence true\npersistence_file mosquitto.db\npersistence_location /etc/mosquitto\nlog_dest file /etc/mosquitto/mosquitto.log\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\nconnection_messages true\nlog_timestamp true\nlog_timestamp_format %Y-%m-%dT%H:%M:%S\nallow_anonymous false\npassword_file /etc/mosquitto/passwordfile\n")),(0,a.kt)("p",null,"Now we need to add the ",(0,a.kt)("inlineCode",{parentName:"p"},"passwordfile")," defined above using the password tool:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ./apps/mosquitto_passwd/mosquitto_passwd -H sha512-pbkdf2 -b -c /etc/mosquitto/passwordfile admin instar\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo touch /etc/mosquitto/mosquitto.log\nsudo touch /etc/mosquitto/mosquitto.db\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo chown mosquitto:mosquitto /etc/mosquitto\nsudo chown mosquitto:mosquitto /etc/mosquitto/*\nsudo chmod 777 /etc/mosquitto/*\n")),(0,a.kt)("p",null,"And now I should be able to execute the broker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mosquitto -c /etc/mosquitto/mosquitto.conf\n")),(0,a.kt)("p",null,"./mosquitto -c /home/ipc/mosquitto.conf"))}p.isMDXComponent=!0},69978:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4dda98a4eb3b498839926e0b6a5039aa.jpg"}}]);