"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[10894],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=m(a),u=r,g=d["".concat(s,".").concat(u)]||d[u]||c[u]||l;return a?n.createElement(g,o(o({ref:t},p),{},{components:a})):n.createElement(g,o({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},70258:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:7060,slug:"2021-11-12",title:"Tensorflow2 Crash Course - Part V",authors:"mpolinowski",tags:["Machine Learning","Python","Tensorflow"]},o=void 0,i={unversionedId:"IoT-and-Machine-Learning/ML/2021-11-12--tensorflow-crash-course-part-v/index",id:"IoT-and-Machine-Learning/ML/2021-11-12--tensorflow-crash-course-part-v/index",title:"Tensorflow2 Crash Course - Part V",description:"Mong Kok, Hongkong",source:"@site/docs/IoT-and-Machine-Learning/ML/2021-11-12--tensorflow-crash-course-part-v/index.md",sourceDirName:"IoT-and-Machine-Learning/ML/2021-11-12--tensorflow-crash-course-part-v",slug:"/IoT-and-Machine-Learning/ML/2021-11-12--tensorflow-crash-course-part-v/2021-11-12",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-11-12--tensorflow-crash-course-part-v/2021-11-12",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/ML/2021-11-12--tensorflow-crash-course-part-v/index.md",tags:[{label:"Machine Learning",permalink:"/docs/tags/machine-learning"},{label:"Python",permalink:"/docs/tags/python"},{label:"Tensorflow",permalink:"/docs/tags/tensorflow"}],version:"current",sidebarPosition:7060,frontMatter:{sidebar_position:7060,slug:"2021-11-12",title:"Tensorflow2 Crash Course - Part V",authors:"mpolinowski",tags:["Machine Learning","Python","Tensorflow"]},sidebar:"tutorialSidebar",previous:{title:"Tensorflow2 Model Zoo",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-11-13--tensorflow-model-zoo/2021-11-13"},next:{title:"Tensorflow2 Crash Course - Part IV",permalink:"/docs/IoT-and-Machine-Learning/ML/2021-11-11--tensorflow-crash-course-part-iv/2021-11-11"}},s={},m=[{value:"Performance Tuning",id:"performance-tuning",level:2},{value:"Adding more Images for low performing Classes",id:"adding-more-images-for-low-performing-classes",level:3},{value:"Rerun Training with more Steps",id:"rerun-training-with-more-steps",level:3},{value:"Changing model architecture using a different pre-trained model as a starting point",id:"changing-model-architecture-using-a-different-pre-trained-model-as-a-starting-point",level:3},{value:"Results",id:"results",level:2},{value:"&#39;SSD MobileNet V2 FPNLite 320x320&#39; vs &#39;SSD MobileNet V2 FPNLite 640x640&#39;",id:"ssd-mobilenet-v2-fpnlite-320x320-vs-ssd-mobilenet-v2-fpnlite-640x640",level:3}],p={toc:m};function c(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Mong Kok, Hongkong",src:a(15171).Z,width:"1500",height:"544"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#performance-tuning"},"Performance Tuning"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#adding-more-images-for-low-performing-classes"},"Adding more Images for low performing Classes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rerun-training-with-more-steps"},"Rerun Training with more Steps")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#changing-model-architecture-using-a-different-pre-trained-model-as-a-starting-point"},"Changing model architecture using a different pre-trained model as a starting point")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#results"},"Results"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ssd-mobilenet-v2-fpnlite-320x320-vs-ssd-mobilenet-v2-fpnlite-640x640"},"'SSD MobileNet V2 FPNLite 320x320' vs 'SSD MobileNet V2 FPNLite 640x640'"))))),(0,r.kt)("p",null,"This set of Notebooks provides a complete set of code to be able to train and leverage your own custom object detection model using the Tensorflow Object Detection API."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This article is based on a ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/channel/UCHXa4OpASJEwrHrLeIzw7Yg"},"Tutorial")," by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nicknochnack"},"@nicknochnack"),".")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2021-11-08--tensorflow-crash-course-part-i/2021-11-08"},"Tensorflow2 Crash Course Part I")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2021-11-09--tensorflow-crash-course-part-ii/2021-11-09"},"Tensorflow2 Crash Course Part II")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2021-11-10--tensorflow-crash-course-part-iii/2021-11-10"},"Tensorflow2 Crash Course Part III")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2021-11-11--tensorflow-crash-course-part-iv/2021-11-11"},"Tensorflow2 Crash Course Part IV")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/IoT-and-Machine-Learning/ML/2021-11-12--tensorflow-crash-course-part-v/2021-11-12"},"Tensorflow2 Crash Course Part V"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/tensorflow2-starter"},"Github Repository")),(0,r.kt)("h2",{id:"performance-tuning"},"Performance Tuning"),(0,r.kt)("h3",{id:"adding-more-images-for-low-performing-classes"},"Adding more Images for low performing Classes"),(0,r.kt)("p",null,"Add and label new images, copy them into the ",(0,r.kt)("inlineCode",{parentName:"p"},"training")," folder then re-run the training:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"source tfod/bin/activate \npython 02_training_the_model.py\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Running per image evaluation...\nEvaluate annotation type *bbox*\nDONE (t=0.03s).\nAccumulating evaluation results...\nDONE (t=0.02s).\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.706\n Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 1.000\n Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.881\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.706\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.713\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.725\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.744\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.744\n")),(0,r.kt)("p",null,"Interestingly, the evaluation remained ",(0,r.kt)("strong",{parentName:"p"},"identical")," to what I had before ?"),(0,r.kt)("h3",{id:"rerun-training-with-more-steps"},"Rerun Training with more Steps"),(0,r.kt)("p",null,"The training script contains the training command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"training_command = \"python {} --model_dir={} --pipeline_config_path={} --num_train_steps=2000\".format(TRAINING_SCRIPT, paths['CHECKPOINT_PATH'],files['PIPELINE_CONFIG'])\n")),(0,r.kt)("p",null,"Increase the number training steps to the desired value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"--num_train_steps=10000\n")),(0,r.kt)("p",null,"The run takes about approx. ",(0,r.kt)("strong",{parentName:"p"},"20 Minutes"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"INFO:tensorflow:Step 7000 per-step time 0.124s\n")),(0,r.kt)("p",null,"After ",(0,r.kt)("strong",{parentName:"p"},"10.000")," steps I got the following metrics (",(0,r.kt)("inlineCode",{parentName:"p"},"0.759"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"0.781"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Accumulating evaluation results...\nDONE (t=0.02s).\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.759\n Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 1.000\n Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.851\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.759\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.775\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.781\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.781\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.781\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Precision"),": True Positive / (True Positive + False Positive)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Recall"),": True Positive / (True Positive + False Negative)")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Eval"),(0,r.kt)("th",{parentName:"tr",align:null},"2000 steps"),(0,r.kt)("th",{parentName:"tr",align:null},"10000 steps"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Average Precision"),(0,r.kt)("td",{parentName:"tr",align:null},"0.706"),(0,r.kt)("td",{parentName:"tr",align:null},"0.759")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Average Recall"),(0,r.kt)("td",{parentName:"tr",align:null},"0.744"),(0,r.kt)("td",{parentName:"tr",align:null},"0.781")))),(0,r.kt)("h3",{id:"changing-model-architecture-using-a-different-pre-trained-model-as-a-starting-point"},"Changing model architecture using a different pre-trained model as a starting point"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md"},"Detection Models"),": Tensorflow provides a collection of detection models pre-trained on the COCO 2017 dataset. So far I have been using the ",(0,r.kt)("a",{parentName:"p",href:"http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8.tar.gz"},"SSD MobileNet V2 FPNLite 320x320"),". I will now replace it with the slightly slower but more accurate ",(0,r.kt)("a",{parentName:"p",href:"http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8.tar.gz"},"SSD MobileNet V2 FPNLite 640x640"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Model name"),(0,r.kt)("th",{parentName:"tr",align:null},"Speed (ms)"),(0,r.kt)("th",{parentName:"tr",align:null},"COCO mAP"),(0,r.kt)("th",{parentName:"tr",align:null},"Outputs"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SSD MobileNet V2 FPNLite 320x320"),(0,r.kt)("td",{parentName:"tr",align:null},"22"),(0,r.kt)("td",{parentName:"tr",align:null},"22.2"),(0,r.kt)("td",{parentName:"tr",align:null},"Boxes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SSD MobileNet V2 FPNLite 640x640"),(0,r.kt)("td",{parentName:"tr",align:null},"39"),(0,r.kt)("td",{parentName:"tr",align:null},"28.2"),(0,r.kt)("td",{parentName:"tr",align:null},"Boxes")))),(0,r.kt)("p",null,"How do I have to proceed from here? I added the model to my trainings script and re-run it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"PRETRAINED_MODEL_NAME = 'ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8'\nPRETRAINED_MODEL_URL = 'http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8.tar.gz'\n")),(0,r.kt)("p",null,"I can see that the model was downloaded and the pipeline file updated. But it seems that the training was not executed - but the evaluation (precision/recall) dropped to ",(0,r.kt)("inlineCode",{parentName:"p"},"0.478"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"0.550"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.478\n Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.664\n Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.530\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.478\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.512\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.550\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.550\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.550\n")),(0,r.kt)("p",null," I deleted the entire content of ",(0,r.kt)("inlineCode",{parentName:"p"},"Tensorflow/workspace/models/my_ssd_mobnet")," to get rid of all the checkpoint data from the old model and re-run the training script. Ok this seems to work - I can see the trainings steps again. This time a lot slower than with the old model - as expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"INFO:tensorflow:Step 4000 per-step time 0.446s\n")),(0,r.kt)("p",null," This would get you a trainings time of about ",(0,r.kt)("strong",{parentName:"p"},"75 Minutes"),". The result is (",(0,r.kt)("inlineCode",{parentName:"p"},"0.752"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"0.769"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Accumulating evaluation results...\nDONE (t=0.02s).\nAverage Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.752\nAverage Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 1.000\nAverage Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.876\nAverage Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000\nAverage Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000\nAverage Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.752\nAverage Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.762\nAverage Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.762\nAverage Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.769\nAverage Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000\nAverage Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000\nAverage Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.769\n")),(0,r.kt)("h2",{id:"results"},"Results"),(0,r.kt)("p",null," The results I am getting are a bit confusing. At first the 320 model performed slightly worse than the 640 - as expected. I then deleted the trainings data for it and re-run the 320. This time I am getting the opposite results as presented above. Is Tensorflow storing trainings data outside of the designated trainings folder? Or is the training in general so inconsistent and needs to be run for a much longer time? Right now I am getting a lot better results after the 20 minute training of the 320 model compared to the 75 minutes for the 640..."),(0,r.kt)("h3",{id:"ssd-mobilenet-v2-fpnlite-320x320-vs-ssd-mobilenet-v2-fpnlite-640x640"},"'SSD MobileNet V2 FPNLite 320x320' vs 'SSD MobileNet V2 FPNLite 640x640'"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Model name"),(0,r.kt)("th",{parentName:"tr",align:null},"Speed (ms)"),(0,r.kt)("th",{parentName:"tr",align:null},"COCO mAP"),(0,r.kt)("th",{parentName:"tr",align:null},"Outputs"),(0,r.kt)("th",{parentName:"tr",align:null},"Average Precision"),(0,r.kt)("th",{parentName:"tr",align:null},"Average Recall"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SSD MobileNet V2 FPNLite 320x320"),(0,r.kt)("td",{parentName:"tr",align:null},"22"),(0,r.kt)("td",{parentName:"tr",align:null},"22.2"),(0,r.kt)("td",{parentName:"tr",align:null},"Boxes"),(0,r.kt)("td",{parentName:"tr",align:null},"0.759"),(0,r.kt)("td",{parentName:"tr",align:null},"0.781")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SSD MobileNet V2 FPNLite 640x640"),(0,r.kt)("td",{parentName:"tr",align:null},"39"),(0,r.kt)("td",{parentName:"tr",align:null},"28.2"),(0,r.kt)("td",{parentName:"tr",align:null},"Boxes"),(0,r.kt)("td",{parentName:"tr",align:null},"0.752"),(0,r.kt)("td",{parentName:"tr",align:null},"0.769")))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Spock",src:a(53550).Z,width:"245",height:"170"})),(0,r.kt)("p",null,"The test run makes it even more confusing - the 640 seems to perform better here. But there actually a miss there at the end :-?"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"SSD MobileNet V2 FPNLite 320x320",src:a(71597).Z,width:"1993",height:"564"}),"\n",(0,r.kt)("em",{parentName:"p"},"SSD MobileNet V2 FPNLite 320x320")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"SSD MobileNet V2 FPNLite 640x640",src:a(42720).Z,width:"1680",height:"492"}),"\n",(0,r.kt)("em",{parentName:"p"},"SSD MobileNet V2 FPNLite 640x640")))}c.isMDXComponent=!0},53550:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/fascinating-4800c0ec46c5f6db588613ed9789d8c0.gif"},15171:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-8629210580d5b66cf728356357923b9f.jpg"},71597:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8-3171d5f1f6af32b05d6dc167f20c1802.png"},42720:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ssd_mobilenet_v2_fpnlite_640x640_coco17_tpu-8-5d669ad6e88a4bbeae1d7b9e925bfe58.png"}}]);