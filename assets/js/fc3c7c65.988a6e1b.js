"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[79588],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),h=a,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||o;return t?i.createElement(m,r(r({ref:n},p),{},{components:t})):i.createElement(m,r({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=t[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},90767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(87462),a=(t(67294),t(3905));const o={sidebar_position:7080,slug:"2021-08-12",title:"Hashicorp Consul Refresher - Service Mesh",authors:"mpolinowski",tags:["Consul","Linux"]},r=void 0,s={unversionedId:"DevOps/Hashicorp/2021-08-12--hashicorp-consul-service-mesh/index",id:"DevOps/Hashicorp/2021-08-12--hashicorp-consul-service-mesh/index",title:"Hashicorp Consul Refresher - Service Mesh",description:"Wan Chai, Hongkong",source:"@site/docs/DevOps/Hashicorp/2021-08-12--hashicorp-consul-service-mesh/index.md",sourceDirName:"DevOps/Hashicorp/2021-08-12--hashicorp-consul-service-mesh",slug:"/DevOps/Hashicorp/2021-08-12--hashicorp-consul-service-mesh/2021-08-12",permalink:"/docs/DevOps/Hashicorp/2021-08-12--hashicorp-consul-service-mesh/2021-08-12",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2021-08-12--hashicorp-consul-service-mesh/index.md",tags:[{label:"Consul",permalink:"/docs/tags/consul"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:7080,frontMatter:{sidebar_position:7080,slug:"2021-08-12",title:"Hashicorp Consul Refresher - Service Mesh",authors:"mpolinowski",tags:["Consul","Linux"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Consul Refresher - Access Control Lists",permalink:"/docs/DevOps/Hashicorp/2021-08-13--hashicorp-consul-access-control-lists/2021-08-13"},next:{title:"Hashicorp Consul Refresher - Backups",permalink:"/docs/DevOps/Hashicorp/2021-08-11--hashicorp-consul-backups/2021-08-11"}},c={},l=[{value:"Consul Connect",id:"consul-connect",level:2},{value:"Application Security",id:"application-security",level:3},{value:"Observability",id:"observability",level:3},{value:"Sidecar Service Registration",id:"sidecar-service-registration",level:2},{value:"Intentions",id:"intentions",level:2},{value:"Wildcard Intentions",id:"wildcard-intentions",level:3},{value:"Load Balancing Services with Envoy",id:"load-balancing-services-with-envoy",level:2}],p={toc:l};function u(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Wan Chai, Hongkong",src:t(14508).Z,width:"1500",height:"557"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#consul-connect"},"Consul Connect"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#application-security"},"Application Security")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#observability"},"Observability")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#sidecar-service-registration"},"Sidecar Service Registration")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#intentions"},"Intentions"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#wildcard-intentions"},"Wildcard Intentions")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#load-balancing-services-with-envoy"},"Load Balancing Services with Envoy"))),(0,a.kt)("h2",{id:"consul-connect"},"Consul Connect"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/connect"},"Consul Connect")," provides service-to-service connection authorization and encryption using mutual Transport Layer Security (TLS). Applications can use ",(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/connect/proxies/built-in"},"Sidecar Proxies")," in a service mesh configuration to establish TLS connections for inbound and outbound connections without being aware of Connect at all."),(0,a.kt)("p",null,"The first step to use Connect is to enable Connect for your Consul cluster. By default, Connect is disabled. Enabling Connect requires changing the configuration of only your Consul servers (",(0,a.kt)("strong",{parentName:"p"},"not client agents"),"). To enable Connect, add the following to a new or existing server configuration file. In an existing cluster, this configuration change requires a Consul server restart:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/consul.d/consul.hcl\n")),(0,a.kt)("p",null,"Add the following lines to the end of the file and ",(0,a.kt)("inlineCode",{parentName:"p"},"service consul restart"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"connect {\n  enabled = true\n}\n")),(0,a.kt)("h3",{id:"application-security"},"Application Security"),(0,a.kt)("p",null,"Connect enables secure deployment best-practices with automatic service-to-service encryption, and identity-based authorization. Connect uses the registered service identity (rather than IP addresses) to enforce access control with intentions."),(0,a.kt)("h3",{id:"observability"},"Observability"),(0,a.kt)("p",null,'One of the key benefits of Consul Connect is the uniform and consistent view it can provide of all the services on your network, irrespective of their different programming languages and frameworks. When you configure Consul Connect to use sidecar proxies, those proxies "see" all service-to-service traffic and can collect data about it.'),(0,a.kt)("h2",{id:"sidecar-service-registration"},"Sidecar Service Registration"),(0,a.kt)("p",null,"To make Connect aware of proxies you will need to register them in a ",(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/agent/services"},"Service Definition"),", just like you would register any other service with Consul. To reduce the amount of boilerplate needed for a sidecar proxy, application service definitions may define an inline sidecar service block."),(0,a.kt)("p",null,"Connect proxies are typically deployed as ",(0,a.kt)("strong",{parentName:"p"},"Sidecars")," that run on the same node as the single service instance that they handle traffic for:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "service": {\n    "name": "web",\n    "port": 8080,\n    "connect": { "sidecar_service": {} }\n  }\n}\n')),(0,a.kt)("p",null,"This will register the web service as normal, but will also register another ",(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/connect/registration/service-registration"},"Proxy Service")," with defaults values used. The above expands out to be equivalent to the following explicit service definitions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "service": {\n    "name": "web",\n    "port": 8080,\n  }\n}\n{\n  "name": "web-sidecar-proxy",\n  "port": 20000,\n  "kind": "connect-proxy",\n  "checks": [\n    {\n      "Name": "Connect Sidecar Listening",\n      "TCP": "127.0.0.1:20000",\n      "Interval": "10s"\n    },\n    {\n      "name": "Connect Sidecar Aliasing web",\n      "alias_service": "web"\n    }\n  ],\n  "proxy": {\n    "destination_service_name": "web",\n    "destination_service_id": "web",\n    "local_service_address": "127.0.0.1",\n    "local_service_port": 8080,\n  }\n}\n')),(0,a.kt)("h2",{id:"intentions"},"Intentions"),(0,a.kt)("p",null,"Intentions define access control for services via Connect and are used to control which services may establish connections or make requests. Intentions can be managed via the API, CLI, or UI. Intentions are managed primarily via service-intentions config entries or the UI. Some simpler tasks can also be achieved with the older ",(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/api-docs/connect/intentions"},"API")," or ",(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/commands/intention"},"CLI"),"."),(0,a.kt)("p",null,"A basic ",(0,a.kt)("inlineCode",{parentName:"p"},"service-intentions")," config entry representing two simple intentions looks like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'Kind = "service-intentions"\nName = "db"\nSources = [\n  {\n    Name   = "web"\n    Action = "deny"\n  },\n  {\n    Name   = "api"\n    Action = "allow"\n  }\n]\n')),(0,a.kt)("p",null,"This config entry defines two intentions with a common destination of ",(0,a.kt)("inlineCode",{parentName:"p"},"db"),". The first intention above is a deny intention with a source of ",(0,a.kt)("inlineCode",{parentName:"p"},"web"),". This says that connections from web to ",(0,a.kt)("inlineCode",{parentName:"p"},"db")," are not allowed and the connection will be rejected. The second intention is an allow intention with a source of ",(0,a.kt)("inlineCode",{parentName:"p"},"api"),". This says that connections from api to db are allowed and connections will be accepted."),(0,a.kt)("h3",{id:"wildcard-intentions"},"Wildcard Intentions"),(0,a.kt)("p",null,"An intention source or destination may also be the special wildcard value ",(0,a.kt)("inlineCode",{parentName:"p"},"*"),". This matches any value and is used as a catch-all. This example says that the ",(0,a.kt)("inlineCode",{parentName:"p"},"web")," service cannot connect to any service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'Kind = "service-intentions"\nName = "*"\nSources = [\n  {\n    Name   = "web"\n    Action = "deny"\n  }\n]\n')),(0,a.kt)("p",null,"And this example says that no service can connect to the ",(0,a.kt)("inlineCode",{parentName:"p"},"db")," service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'Kind = "service-intentions"\nName = "db"\nSources = [\n  {\n    Name   = "*"\n    Action = "deny"\n  }\n]\n')),(0,a.kt)("p",null,"Intentions are matched in an implicit order ",(0,a.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/connect/intentions#precedence-and-match-order"},"based on specificity"),", preferring deny over allow. Specificity is determined by whether a value is an exact specified value or is the wildcard value *. "),(0,a.kt)("h2",{id:"load-balancing-services-with-envoy"},"Load Balancing Services with Envoy"),(0,a.kt)("p",null,"Consul 1.9.0 introduces the ",(0,a.kt)("a",{parentName:"p",href:"https://learn.hashicorp.com/tutorials/consul/load-balancing-envoy?in=consul/service-mesh-traffic-management"},"ability to change the load balancing policy used by the Envoy data plane proxy")," by specifying the desired algorithm with Consul configuration entries."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WIP")))}u.isMDXComponent=!0},14508:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-a2980141250edbaa2e8933107deb9f60.jpg"}}]);