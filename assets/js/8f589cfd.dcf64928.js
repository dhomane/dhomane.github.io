"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[86434],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>m});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=r.createContext({}),p=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},c=function(n){var e=p(n.components);return r.createElement(l.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,c=i(n,["components","mdxType","originalType","parentName"]),u=p(t),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(h,s(s({ref:e},c),{},{components:t})):r.createElement(h,s({ref:e},c))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=n,i.mdxType="string"==typeof n?n:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},61368:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={sidebar_position:9050,slug:"2021-09-11",title:"Golang Refresher :: url & http",authors:"mpolinowski",tags:["Go"]},s=void 0,i={unversionedId:"Development/Go/2021-09-11--golang-refresher-network/index",id:"Development/Go/2021-09-11--golang-refresher-network/index",title:"Golang Refresher :: url & http",description:"Guangzhou, China",source:"@site/docs/Development/Go/2021-09-11--golang-refresher-network/index.md",sourceDirName:"Development/Go/2021-09-11--golang-refresher-network",slug:"/Development/Go/2021-09-11--golang-refresher-network/2021-09-11",permalink:"/docs/Development/Go/2021-09-11--golang-refresher-network/2021-09-11",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2021-09-11--golang-refresher-network/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:9050,frontMatter:{sidebar_position:9050,slug:"2021-09-11",title:"Golang Refresher :: url & http",authors:"mpolinowski",tags:["Go"]},sidebar:"tutorialSidebar",previous:{title:"Getting started with Go and React - Webservice, Routing and Status Log",permalink:"/docs/Development/Go/2021-09-21--golang-react-starter-part-i/2021-09-21"},next:{title:"Golang Refresher :: math & os",permalink:"/docs/Development/Go/2021-09-11--golang-refresher-math-os/2021-09-11"}},l={},p=[{value:"The Go Standard Library",id:"the-go-standard-library",level:2},{value:"url|http|encoding-json|encoding-xml :: Networking and data processing",id:"urlhttpencoding-jsonencoding-xml--networking-and-data-processing",level:3},{value:"Working with URLs",id:"working-with-urls",level:4},{value:"HTTP GET",id:"http-get",level:4},{value:"HTTP POST with Basic Auth",id:"http-post-with-basic-auth",level:4},{value:"HTTP POST with JSON Request Body",id:"http-post-with-json-request-body",level:4},{value:"Encode Go Sructs to JSON",id:"encode-go-sructs-to-json",level:4},{value:"Decode JSON",id:"decode-json",level:4}],c={toc:p};function d(n){let{components:e,...o}=n;return(0,a.kt)("wrapper",(0,r.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Guangzhou, China",src:t(58370).Z,width:"1500",height:"560"})),(0,a.kt)("h2",{id:"the-go-standard-library"},"The Go Standard Library"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Development/Go/2021-09-11--golang-refresher-fmt-strings/2021-09-11"},"Part I")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Development/Go/2021-09-11--golang-refresher-math-os/2021-09-11"},"Part II")),(0,a.kt)("li",{parentName:"ul"},"Part III")),(0,a.kt)("h3",{id:"urlhttpencoding-jsonencoding-xml--networking-and-data-processing"},"url|http|encoding-json|encoding-xml :: Networking and data processing"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://pkg.go.dev/net/url"},"Package url")," parses URLs and implements query escaping."),(0,a.kt)("h4",{id:"working-with-urls"},"Working with URLs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "net/url"\n)\n\nfunc main() {\n    \n    // Define a url\n    u := "https://mpolinowski.github.io:80/?chapter_filter=%22Dev+Notes%22&type_filter=%22Note%22&q=%22Golang%22&tag_filter=%5B%22Golang%22%5D"\n\n    // Parse url into it\'s parts\n    result, _ := url.Parse(u)\n    fmt.Println(result.Scheme)\n    fmt.Println(result.Host)\n    fmt.Println(result.Path)\n    fmt.Println(result.Port())\n    fmt.Println(result.RawQuery)\n\n    // Extract query\'s into variables\n    val := result.Query()\n    fmt.Println("Search:", val["q"])\n    fmt.Println("Tags:", val["tag_filter"])\n    fmt.Println("Types:", val["type_filter"])\n    fmt.Println("Chapters:", val["chapter_filter"])\n\n    // Create URL from components\n    newURL := &url.URL {\n        Scheme: "https",\n        Host: "mpolinowski.github.io",\n        Path: "/devnotes",\n        RawQuery: "usr=admin&pwd=password",\n    }\n\n    // Print created url\n    s := newURL.String()\n    fmt.Println(s)\n    // Modify url\n    newURL.RawQuery = "usr=user&pwd=1234"\n    s = newURL.String()\n    fmt.Println(s)\n\n    // Generate new url queries\n    newvals := url.Values{}\n    newvals.Add("pwd", "nopwd")\n    newvals.Add("usr", "visitor")\n\n    newURL.RawQuery = newvals.Encode()\n    s = newURL.String()\n    fmt.Println(s)\n    \n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'go run .\\main.go\nhttps\nmpolinowski.github.io:80\n/\n80\nchapter_filter=%22Dev+Notes%22&type_filter=%22Note%22&q=%22Golang%22&tag_filter=%5B%22Golang%22%5D\nSearch: ["Golang"]\nTags: [["Golang"]]\nTypes: ["Note"]\nChapters: ["Dev Notes"]\nhttps://mpolinowski.github.io/devnotes?usr=admin&pwd=password\nhttps://mpolinowski.github.io/devnotes?usr=user&pwd=1234\nhttps://mpolinowski.github.io/devnotes?pwd=nopwd&usr=visitor\n')),(0,a.kt)("h4",{id:"http-get"},"HTTP GET"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://pkg.go.dev/net/http"},"Package http")," provides HTTP client and server implementations. Get, Head, Post, and PostForm make HTTP (or HTTPS) requests."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": Read the INSTAR IP camera state through it's HTTP REST API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "io/ioutil"\n    "net/http"\n    "strings"\n)\n\nfunc main() {\n    \n    // Define API endpoint - get the PIR motion sensor state:\n    const cameraAPI = "http://192.168.2.77:8090/param.cgi?cmd=getpirattr&usr=admin&pwd=instar"\n\n    // Make GET request\n    resp, err := http.Get(cameraAPI)\n    if err != nil {\n        return\n    }\n\n    // Closing response\n    defer resp.Body.Close()\n\n    // Splitting up the response\n    fmt.Println("Status:", resp.Status)\n    fmt.Println("Status Code:", resp.StatusCode)\n    fmt.Println("Protocol:", resp.Proto)\n    fmt.Println("Content Length:", resp.ContentLength)\n\n    // Build content from received bytes\n    var sb strings.Builder\n    content, _ := ioutil.ReadAll(resp.Body)\n    bytecount, _ := sb.Write(content)\n    // Format the output\n    fmt.Println(bytecount, sb.String())\n\n    \n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'go run .\\main.go\nStatus: 200 OK\nStatus Code: 200\nProtocol: HTTP/1.1\nContent Length: 40\n40 var pir_enable="1";\nvar pir_flag="0";\n')),(0,a.kt)("h4",{id:"http-post-with-basic-auth"},"HTTP POST with Basic Auth"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),": Send a post request with basic authentication to switch on your INSTAR IP cameras PIR sensor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "net/http"\n    "time"\n)\n\nvar (\n    // Camera admin login\n    username = "admin"\n    password = "instar"\n    // API endpoint to activate the PIR sensor\n    cameraAPI = "http://192.168.2.77:8090/param.cgi?cmd=setpirattr&-pir_enable=1"\n)\n\nfunc main() {\n    postCommand(cameraAPI, "POST")\n}\n\nfunc postCommand(url, method string) error {\n    // Send request and catch error\n    client := &http.Client{\n        Timeout: time.Second * 10,\n    }\n    req, err := http.NewRequest(method, url, nil)\n    if err != nil {\n        return fmt.Errorf("Got error %s", err.Error())\n    }\n    // Authenticate and catch error\n    req.SetBasicAuth(username, password)\n    response, err := client.Do(req)\n    if err != nil {\n        return fmt.Errorf("Got error %s", err.Error())\n    }\n    defer response.Body.Close()\n    return nil\n}\n')),(0,a.kt)("h4",{id:"http-post-with-json-request-body"},"HTTP POST with JSON Request Body"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "io/ioutil"\n    "net/http"\n    "net/url"\n    "strings"\n)\n\nfunc main() {\n    \n    // Define API endpoint - activate the PIR sensor\n    const httpbin = "https://httpbin.org/post"\n\n    // Make a POST request\n    // creat the JSON request body:\n    reqBody := strings.NewReader(`\n        {\n            "val": "this is a value",\n            "num": 42\n        }\n    `)\n\n    // post the generated request body to the camera API\n    resp, err := http.Post(httpbin, "application/json", reqBody)\n    if err != nil {\n        return\n    }\n\n    // Read the response\n    content, _ := ioutil.ReadAll(resp.Body)\n    // Format the output\n    fmt.Printf("%s\\n", content)\n\n\n    // Closing response\n    defer resp.Body.Close()\n\n    // Post form data\n    data := url.Values{}\n    data.Add("formField1", "Content of form field 1")\n    data.Add("formField2", "Content of form field 2")\n    respForm, err := http.PostForm(httpbin, data)\n    contentForm, _ := ioutil.ReadAll(respForm.Body)\n    defer respForm.Body.Close()\n    fmt.Printf("%s\\n", contentForm)\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'go run .\\main.go\n{\n  "args": {},\n  "data": "\\n\\t\\t{\\n\\t\\t\\t\\"val\\": \\"this is a value\\",\\n\\t\\t\\t\\"num\\": 42\\n\\t\\t}\\n\\t", \n  "files": {},\n  "form": {},\n  "headers": {\n    "Accept-Encoding": "gzip",\n    "Content-Length": "52",\n    "Content-Type": "application/json",\n    "Host": "httpbin.org",\n    "User-Agent": "Go-http-client/2.0",\n    "X-Amzn-Trace-Id": "Root=1-615bcc9f-17ca354f4b8b8ec705a75dcf"\n  },\n  "json": {\n    "num": 42,\n    "val": "this is a value"\n  },\n  "origin": "103.125.234.111",\n  "url": "https://httpbin.org/post"\n}\n\n{\n  "args": {},\n  "data": "",\n  "files": {},\n  "form": {\n    "formField1": "Content of form field 1",\n    "formField2": "Content of form field 2"\n  },\n  "headers": {\n    "Accept-Encoding": "gzip",\n    "Content-Length": "69",\n    "Content-Type": "application/x-www-form-urlencoded",\n    "Host": "httpbin.org",\n    "User-Agent": "Go-http-client/2.0",\n    "X-Amzn-Trace-Id": "Root=1-615bcc9f-71f982c9376e6bef4abb92b7"\n  },\n  "json": null,\n  "origin": "103.125.234.111",\n  "url": "https://httpbin.org/post"\n}\n')),(0,a.kt)("h4",{id:"encode-go-sructs-to-json"},"Encode Go Sructs to JSON"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "encoding/json"\n    "fmt"\n)\n\n// Set types and assign the keys that should be used e.g. Characters -> char\n// Omit empty fields and don\'t use actor names\ntype person struct {\n    Character       string  `json:"char"`\n    Actor           string  `json:"-"`\n    PlaceOfBirth    string  `json:"loc"`\n    Seasons         []int   `json:"s,omitempty"`\n}\n\nfunc encodeJSON() {\n    // Create JSON data\n    people := []person {\n        {"Joe Miller", "Thomas Jane", "Ceres", []int{1,2,3,4} },\n        {"James Holden", "Steven Strait", "Earth", []int{1,2,3,4,5,6} },\n        {"Bobbie Draper", "Frankie Adams", "Mars", []int{2,3,4,5,6} },\n        {"Camina Drummer", "Cara Gee", "Tycho Station", []int{4,5,6} },\n        {"Jean-Luc Picard", "Patrick Stewart", "Earth", nil },\n    }\n\n    // Use Marshal to convert data structure to JSON\n    result, err := json.Marshal(people)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf("%s\\n", result)\n\n    // Use MarshalIndent to convert data structure to formatted JSON\n    resultFormatted, err := json.MarshalIndent(people, "", "\\t")\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf("%s\\n", resultFormatted)\n\n}\n\nfunc main() {\n    \n    encodeJSON()\n\n    \n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'go run .\\main.go\n[{"char":"Joe Miller","loc":"Ceres","s":[1,2,3,4]},{"char":"James Holden","loc":"Earth","s":[1,2,3,4,5,6]},{"char":"Bobbie Draper","loc":"Mars","s":[2,3,4,5,6]},{"char":"Camina Drummer","loc":"Tycho Station","s":[4,5,6]},{"char":"Jean Luc Picard","loc":"Earth"}]\n[\n        {\n                "char": "Joe Miller",\n                "loc": "Ceres",      \n                "s": [\n                        1,\n                        2,\n                        3,\n                        4\n                ]\n        },\n        {\n                "char": "James Holden",\n                "loc": "Earth",\n                "s": [\n                        1,\n                        2,\n                        3,\n                        4,\n                        5,\n                        6\n                ]\n        },\n        {\n                "char": "Bobbie Draper",\n                "loc": "Mars",\n                "s": [\n                        2,\n                        3,\n                        4,\n                        5,\n                        6\n                ]\n        },\n        {\n                "char": "Camina Drummer",\n                "loc": "Tycho Station",\n                "s": [\n                        4,\n                        5,\n                        6\n                ]\n        },\n        {\n                "char": "Jean Luc Picard",\n                "loc": "Earth"\n        }\n]\n')),(0,a.kt)("h4",{id:"decode-json"},"Decode JSON"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "encoding/json"\n    "fmt"\n)\n\n// Set types and assign the keys that should be used e.g. Characters -> char\n// Omit empty fields and don\'t use actor names\ntype person struct {\n    Character       string  `json:"char"`\n    Actor           string  `json:"-"`\n    PlaceOfBirth    string  `json:"loc"`\n    Seasons         []int   `json:"s,omitempty"`\n}\n\nfunc decodeJSON() {\n    // Declare JSON data to decode\n    data := []byte(`\n        {\n            "char": "Joe Miller",\n            "actor": "Thomas Jane",\n            "loc": "Ceres",\n            "s": [1,2,3,4]\n        }\n    `)\n\n    // Declare person struct of type person for the JSON data\n    var p person\n    // Check if JSON is valid and un-marshal\n    valid := json.Valid(data)\n    if valid {\n        json.Unmarshal(data, &p)\n        fmt.Printf("%#v\\n", p)\n    }\n\n}\n\nfunc mapJSON() {\n\n    // Declare JSON data to decode\n    dataMap := []byte(`\n        {\n            "char": "Camina Drummer",\n            "actor": "Cara Gee",\n            "loc": "Tycho Station",\n            "s": [4,5,6]\n        }\n    `)\n    // Decode JSON into a map structure\n    var m map[string]interface{}\n    json.Unmarshal(dataMap, &m)\n    fmt.Printf("%#v\\n", m)\n\n    // Iterate over map entries\n    for k,v := range m {\n        fmt.Printf("key (%v), value (%T : %v)\\n", k, v, v)\n    }\n}\n\nfunc main() {\n    \n    decodeJSON()\n    mapJSON()\n    \n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'go run .\\main.go\nmain.person{Character:"Joe Miller", Actor:"", PlaceOfBirth:"Ceres", Seasons:[]int{1, 2, 3, 4}}\nmap[string]interface {}{"actor":"Cara Gee", "char":"Camina Drummer", "loc":"Tycho Station", "s":[]interface {}{4, 5, 6}}\nkey (s), value ([]interface {} : [4 5 6])\nkey (char), value (string : Camina Drummer)\nkey (actor), value (string : Cara Gee)\nkey (loc), value (string : Tycho Station)\n')))}d.isMDXComponent=!0},58370:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-88971fd9c1b188353d6b4c2b974194a5.jpg"}}]);