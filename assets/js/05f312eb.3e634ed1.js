"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[65926],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,h=p["".concat(o,".").concat(d)]||p[d]||m[d]||s;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<s;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},56033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const s={sidebar_position:9050,slug:"2020-06-19",title:"Salt Mine & Orchestrate",authors:"mpolinowski",tags:["LINUX","Salt"]},l=void 0,i={unversionedId:"DevOps/Salt/2020-06-19--salt-mine-orchestrate/index",id:"DevOps/Salt/2020-06-19--salt-mine-orchestrate/index",title:"Salt Mine & Orchestrate",description:"Victoria Harbour, Hong Kong",source:"@site/docs/DevOps/Salt/2020-06-19--salt-mine-orchestrate/index.md",sourceDirName:"DevOps/Salt/2020-06-19--salt-mine-orchestrate",slug:"/DevOps/Salt/2020-06-19--salt-mine-orchestrate/2020-06-19",permalink:"/docs/DevOps/Salt/2020-06-19--salt-mine-orchestrate/2020-06-19",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-19--salt-mine-orchestrate/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:9050,frontMatter:{sidebar_position:9050,slug:"2020-06-19",title:"Salt Mine & Orchestrate",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salt Reactor and System Events",permalink:"/docs/DevOps/Salt/2020-06-20--salt-reactor-events/2020-06-20"},next:{title:"Salt Execution Order",permalink:"/docs/DevOps/Salt/2020-06-18--salt-execution-order/2020-06-18"}},o={},u=[{value:"Sharing Data with Salt Mine",id:"sharing-data-with-salt-mine",level:2},{value:"mine.send &amp; cache.mine",id:"minesend--cachemine",level:3},{value:"mine.get",id:"mineget",level:3},{value:"Orchestrate Complex State Runs",id:"orchestrate-complex-state-runs",level:2},{value:"The Orchestrate Runner",id:"the-orchestrate-runner",level:3},{value:"call_execution_functions",id:"call_execution_functions",level:3},{value:"call_state_functions",id:"call_state_functions",level:3},{value:"Execution Order",id:"execution-order",level:3},{value:"wait_for_event",id:"wait_for_event",level:3}],c={toc:u};function m(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Victoria Harbour, Hong Kong",src:n(86877).Z,width:"1500",height:"693"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sharing-data-with-salt-mine"},"Sharing Data with Salt Mine"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#minesend--cachemine"},"mine.send & cache.mine")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#mineget"},"mine.get")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#orchestrate-complex-state-runs"},"Orchestrate Complex State Runs"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#the-orchestrate-runner"},"The Orchestrate Runner")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#call_execution_functions"},"call_execution_functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#call_state_functions"},"call_state_functions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#execution-order"},"Execution Order")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#wait_for_event"},"wait_for_event"))))),(0,r.kt)("h2",{id:"sharing-data-with-salt-mine"},"Sharing Data with Salt Mine"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/topics/mine/index.html"},"Salt Mine")," data can be configured inside the Minion configuration or inside Pillar. E.g. create a file ",(0,r.kt)("inlineCode",{parentName:"p"},"nano /srv/pillar/mine.sls")," and add all functions that you need to execute in an regular interval - the ",(0,r.kt)("strong",{parentName:"p"},"default interval is 60 minutes"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"mine_functions:\n  network.ip_addrs: []\n")),(0,r.kt)("p",null,"And add it to your top file to assign it to all or selected minions ",(0,r.kt)("inlineCode",{parentName:"p"},"nano /srv/pillar/top.sls"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"base:\n  '*':\n    - name\n    - mine\n")),(0,r.kt)("p",null,"Then make sure that all minions update their copy of the Pillar data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' saltutil.refresh_pillar\n")),(0,r.kt)("p",null,"All functions inside your mine will now be executed every 60 minutes you can test run your function with:"),(0,r.kt)("h3",{id:"minesend--cachemine"},"mine.send & cache.mine"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' mine.send network.ip_addrs\n")),(0,r.kt)("p",null,"This will trigger your mine function on every assigned minion. All those minions will then send their reply to the salt master. You can query this data from ",(0,r.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/modules/all/salt.modules.mine.html#module-salt.modules.mine"},"mine.cache"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt-run cache.mine '*'                                                                                       \n\nubuntuAsus:\n    ----------\n    network.ip_addrs:\n        - 10.1.88.0\n        - 172.17.0.1\n        - 172.18.0.1\n        - 172.19.0.1\n        - 172.22.0.1\n        - 192.168.2.111\n")),(0,r.kt)("p",null,"You can also populate the cache manually by sending a specific function call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' mine.send status.uptime\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt-run cache.mine '*'    \n                                                                                   \nubuntuAsus:\n    ----------\n    network.ip_addrs:\n        - 10.1.88.0\n        - 172.17.0.1\n        - 172.18.0.1\n        - 172.19.0.1\n        - 172.22.0.1\n        - 192.168.2.111\n        \n    status.uptime:\n        ----------\n        days:\n            0\n        seconds:\n            27426\n        since_iso:\n            2020-08-07T06:50:43.445585\n        since_t:\n            1596783043\n        time:\n            7:37\n        users:\n            1\n")),(0,r.kt)("h3",{id:"mineget"},"mine.get"),(0,r.kt)("p",null,"To get a specific value from your minions send this from your master:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' mine.get '*' network.ip_addrs\n\nubuntuAsus:\n    ----------\n    ubuntuAsus:\n        - 10.1.88.0\n        - 172.17.0.1\n        - 172.18.0.1\n        - 172.19.0.1\n        - 172.22.0.1\n        - 192.168.2.111\n")),(0,r.kt)("p",null,"Or this when you are on a minion:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt-call mine.get '*' network.ip_addrs\n\nlocal:\n    ----------\n    ubuntuAsus:\n        - 10.1.88.0\n        - 172.17.0.1\n        - 172.18.0.1\n        - 172.19.0.1\n        - 172.22.0.1\n        - 192.168.2.111\n")),(0,r.kt)("p",null,"Or in JSON:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'salt-call mine.get \'*\' network.ip_addrs --out=json \n                                                           \n{\n    "local": {\n        "ubuntuAsus": [\n            "10.1.88.0",\n            "172.17.0.1",\n            "172.18.0.1",\n            "172.19.0.1",\n            "172.22.0.1",\n            "192.168.2.111"\n        ]\n    }\n}\n')),(0,r.kt)("h2",{id:"orchestrate-complex-state-runs"},"Orchestrate Complex State Runs"),(0,r.kt)("p",null,"Executing states or highstate on a minion is perfect when you want to ensure that minion configured and running the way you want. Sometimes however you want to configure a set of minions all at once."),(0,r.kt)("p",null,"For example, if you want to set up a load balancer in front of a cluster of web servers you can ensure the load balancer is set up first, and then the same matching configuration is applied consistently across the whole cluster."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/topics/orchestrate/orchestrate_runner.html#orchestrate-runner"},"Orchestration")," is the way to do this."),(0,r.kt)("h3",{id:"the-orchestrate-runner"},"The Orchestrate Runner"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/runners/all/salt.runners.state.html#salt.runners.state.orchestrate"},"orchestrate runner")," generalizes the Salt state system to a Salt master context. Whereas the ",(0,r.kt)("inlineCode",{parentName:"p"},"state.sls"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state.highstate"),", et al. functions are concurrently and independently executed on each Salt minion, the state.orchestrate runner is executed on the master, giving it a master-level view and control over requisites, such as state ordering and conditionals. This allows for inter minion requisites, like ordering the application of states on different minions that must not happen simultaneously, or for halting the state run on all minions if a minion fails one of its states."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"state.sls"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"state.highstate"),", et al. functions allow you to statefully manage each minion and the state.orchestrate runner allows you to statefully manage your entire infrastructure."),(0,r.kt)("h3",{id:"call_execution_functions"},"call_execution_functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /srv/salt/orch\n\nnano /srv/salt/orch/test_function.sls\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"test_function.sls")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"call_execution_function:\n  salt.function:\n    - tgt: '*'\n    - name: cmd.run\n    - arg:\n      - date\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"salt-run state.orchestrate orch.test_fun\n\nubuntuserver_master:\n----------\n          ID: call_execution_function\n    Function: salt.function\n        Name: cmd.run\n      Result: True\n     Comment: Function ran successfully. Function cmd.run ran on ubuntuMaster, ubuntuAsus.\n     Started: 16:00:02.407973\n    Duration: 187.085 ms\n     Changes:   \n              ubuntuMaster:\n                  Fri Aug  7 16:00:02 UTC 2020\n              ubuntuAsus:\n                  Fri Aug  7 16:00:02 UTC 2020\n\nSummary for ubuntuserver_master\n------------\nSucceeded: 1 (changed=1)\nFailed:    0\n------------\nTotal states run:     1\nTotal run time: 187.085 ms\n")),(0,r.kt)("h3",{id:"call_state_functions"},"call_state_functions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"test_function.sls")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"call_execution_function:\n  salt.function:\n    - tgt: '*'\n    - name: cmd.run\n    - arg:\n      - date\n      \ncall_state_function:\n  salt.state:\n    - tgt: 'ubuntuAsus'\n    - sls:\n      - apache.welcome\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"salt-run state.orchestrate orch.test_fun\n\nubuntuserver_master:\n----------\n          ID: call_execution_function\n    Function: salt.function\n        Name: cmd.run\n      Result: True\n     Comment: Function ran successfully. Function cmd.run ran on ubuntuMaster, ubuntuAsus.\n     Started: 16:12:21.741197\n    Duration: 186.882 ms\n     Changes:   \n              ubuntuMaster:\n                  Fri Aug  7 16:12:21 UTC 2020\n              ubuntuAsus:\n                  Fri Aug  7 16:12:21 UTC 2020\n----------\n          ID: call_state_function\n    Function: salt.state\n      Result: True\n     Comment: States ran successfully. No changes made to ubuntuAsus.\n     Started: 16:12:21.928273\n    Duration: 452.633 ms\n     Changes:   \n\nSummary for ubuntuserver_master\n------------\nSucceeded: 2 (changed=1)\nFailed:    0\n------------\nTotal states run:     2\nTotal run time: 639.515 ms\n")),(0,r.kt)("h3",{id:"execution-order"},"Execution Order"),(0,r.kt)("p",null,"Making sure that function one is called before function two:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"test_function.sls")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"call_execution_function:\n  salt.function:\n    - tgt: '*'\n    - name: cmd.run\n    - arg:\n      - date\n      \ncall_state_functions_one:\n  salt.state:\n    - tgt: 'ubuntuAsus'\n    - sls:\n      - apache.welcome\n      \ncall_state_functions_two:\n  salt.state:\n    - tgt: 'ubuntuMaster'\n    - sls:\n      - apache.welcome\n    - require:\n      - salt: call_state_functions_one\n")),(0,r.kt)("h3",{id:"wait_for_event"},"wait_for_event"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/master/ref/states/all/salt.states.saltmod.html#salt.states.saltmod.wait_for_event"},"following example")," blocks until all the listed minions complete a restart and reconnect to the Salt master:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"reboot_all_minions:\n  salt.function:\n    - name: system.reboot\n    - tgt: '*'\n\nwait_for_reboots:\n  salt.wait_for_event:\n    - name: salt/minion/*/start\n    - id_list:\n      - jerry\n      - stuart\n      - dave\n      - phil\n      - kevin\n      - mike\n    - require:\n      - salt: reboot_all_minions\n")))}m.isMDXComponent=!0},86877:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-26c07f034c2a25fc09b4db08dd81edca.jpg"}}]);