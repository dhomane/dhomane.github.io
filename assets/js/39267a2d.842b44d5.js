"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[24189],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),h=r,m=p["".concat(i,".").concat(h)]||p[h]||d[h]||s;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},35892:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const s={sidebar_position:9080,slug:"2020-08-17",title:"Installing HashiCorp Consul on Ubuntu Server 20.04",authors:"mpolinowski",tags:["LINUX","Consul"]},o=void 0,l={unversionedId:"DevOps/Hashicorp/2020-08-17--installing-consul-ubuntu/index",id:"DevOps/Hashicorp/2020-08-17--installing-consul-ubuntu/index",title:"Installing HashiCorp Consul on Ubuntu Server 20.04",description:"Victoria Harbour, Hong Kong",source:"@site/docs/DevOps/Hashicorp/2020-08-17--installing-consul-ubuntu/index.md",sourceDirName:"DevOps/Hashicorp/2020-08-17--installing-consul-ubuntu",slug:"/DevOps/Hashicorp/2020-08-17--installing-consul-ubuntu/2020-08-17",permalink:"/docs/DevOps/Hashicorp/2020-08-17--installing-consul-ubuntu/2020-08-17",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2020-08-17--installing-consul-ubuntu/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Consul",permalink:"/docs/tags/consul"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2020-08-17",title:"Installing HashiCorp Consul on Ubuntu Server 20.04",authors:"mpolinowski",tags:["LINUX","Consul"]},sidebar:"tutorialSidebar",previous:{title:"Joining Consul Clients",permalink:"/docs/DevOps/Hashicorp/2020-08-18--consul-mock-datacenter/2020-08-19"},next:{title:"Nomad Server Cluster",permalink:"/docs/DevOps/Hashicorp/2020-08-16--nomad-cluster/2020-08-16"}},i={},c=[{value:"Install Consul on Ubuntu 20.04",id:"install-consul-on-ubuntu-2004",level:2},{value:"Ports Used",id:"ports-used",level:3},{value:"Start the Consul Agent in Dev Mode",id:"start-the-consul-agent-in-dev-mode",level:2},{value:"Consul Service Discovery",id:"consul-service-discovery",level:2},{value:"Define a Service",id:"define-a-service",level:3},{value:"Service Health Check",id:"service-health-check",level:2},{value:"The WebUI",id:"the-webui",level:2}],u={toc:c};function d(e){let{components:n,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Victoria Harbour, Hong Kong",src:t(62613).Z,width:"1500",height:"592"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#install-consul-on-ubuntu-2004"},"Install Consul on Ubuntu 20.04"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ports-used"},"Ports Used")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#start-the-consul-agent-in-dev-mode"},"Start the Consul Agent in Dev Mode")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#consul-service-discovery"},"Consul Service Discovery"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#define-a-service"},"Define a Service")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#service-health-check"},"Service Health Check")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#the-webui"},"The WebUI"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.hashicorp.com/products/consul/"},"Consul")," is a networking tool that provides a fully featured service-mesh control plane and service discovery. Consul also includes a key-value store for service configuration. Learn how to perform common Consul operations locally."),(0,r.kt)("h2",{id:"install-consul-on-ubuntu-2004"},"Install Consul on Ubuntu 20.04"),(0,r.kt)("p",null,"The first thing you need to do in order to use Consul is install it. In a production deployment you would install Consul on every node where you want to register services:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\n")),(0,r.kt)("p",null,"Add the official HashiCorp Linux repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"\n')),(0,r.kt)("p",null,"Update and install."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get update && sudo apt-get install consul\n")),(0,r.kt)("p",null,"After installing Consul, verify that the installation worked by opening a new terminal session and running the command :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul\nUsage: consul [--version] [--help] <command> [<args>]\n")),(0,r.kt)("h3",{id:"ports-used"},"Ports Used"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"(only additional ports to the Nomad service)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"firewall-cmd --permanent --zone=public --add-port=8500/tcp\nfirewall-cmd --permanent --zone=public --add-port=8301/tcp\nfirewall-cmd --reload\nfirewall-cmd --zone=public --list-all\n")),(0,r.kt)("h2",{id:"start-the-consul-agent-in-dev-mode"},"Start the Consul Agent in Dev Mode"),(0,r.kt)("p",null,"Lets start our local agent in development mode, which is an in memory server mode with some common features enabled (despite security risks) for ease of use, and all persistence options turned off:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul agent -dev\n")),(0,r.kt)("p",null,"Check the membership of the Consul datacenter by running the following command in a new terminal window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul members\n\nNode         Address         Status  Type    Build  Protocol  DC   Segment\nsalt-master  127.0.0.1:8301  alive   server  1.8.3  2         dc1  <all>\n")),(0,r.kt)("p",null,"The output displays your agent, its IP address, its health state, its role in the datacenter, and some version information. You can discover additional metadata by providing the -detailed flag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul members --detailed\nNode         Address         Status  Tags\nsalt-master  127.0.0.1:8301  alive   acls=0,build=1.8.3:a9322b9c,dc=dc1,ft_fs=1,id=6f0b4bf5-a294-20f3-a3e1-c4f9d3e75de7,port=8300,raft_vsn=3,role=consul,segment=<all>,vsn=2,vsn_max=3,vsn_min=2,wan_join_port=8302\n")),(0,r.kt)("p",null,"For a strongly consistent view of the world, query the HTTP API, which forwards the request to the Consul servers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl localhost:8500/v1/catalog/nodes\n[\n    {\n        "ID": "6f0b4bf5-a294-20f3-a3e1-c4f9d3e75de7",\n        "Node": "salt-master",\n        "Address": "127.0.0.1",\n        "Datacenter": "dc1",\n        "TaggedAddresses": {\n            "lan": "127.0.0.1",\n            "lan_ipv4": "127.0.0.1",\n            "wan": "127.0.0.1",\n            "wan_ipv4": "127.0.0.1"\n        },\n        "Meta": {\n            "consul-network-segment": ""\n        },\n        "CreateIndex": 10,\n        "ModifyIndex": 12\n    }\n]\n')),(0,r.kt)("p",null,"This will gracefully stop the agent, causing it to leave the Consul datacenter and shut down:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul leave\n\nGraceful leave complete\n")),(0,r.kt)("p",null,"When you issue the leave command, Consul notifies other members that the agent left the datacenter. Forcibly killing the agent process indicates to other agents in the Consul datacenter that the node failed instead of left. When a node fails, its health is marked as critical, but it is not removed from the catalog."),(0,r.kt)("h2",{id:"consul-service-discovery"},"Consul Service Discovery"),(0,r.kt)("p",null,"One of the major use cases for Consul is service discovery. Consul knows where these services are located because each service registers with its local Consul client. Operators can register services manually, configuration management tools can register services when they are deployed, or container orchestration platforms can register services automatically via integrations."),(0,r.kt)("h3",{id:"define-a-service"},"Define a Service"),(0,r.kt)("p",null,"You can register services either by providing a service definition, which is the most common way to register services, or by making a call to the HTTP API."),(0,r.kt)("p",null,"First, create a directory for Consul configuration. Consul loads all configuration files in the configuration directory, so a common convention on Unix systems is to name the directory something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /etc/consul.d\nnano /etc/consul.d/web.json\n")),(0,r.kt)("p",null,'Pretend there is a service named "web" running on port 80. This file will contain the service definition: name, port, and an optional tag you can use to find the service later on:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "service": {\n    "name": "web",\n    "tags": ["frontend"],\n    "port": 80\n  }\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note"),": We never started a web service in this example. Consul can register services that aren't running yet. It correlates each running service with its registration based on the service's port.")),(0,r.kt)("p",null,"Now, restart the agent, using command line flags to specify the configuration directory and enable script checks on the agent."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Security Warning"),": Enabling script checks in some configurations may introduce a remote execution vulnerability which is known to be targeted by malware. In production we strongly recommend ",(0,r.kt)("inlineCode",{parentName:"p"},"-enable-local-script-checks")," instead.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul agent -dev -enable-script-checks -config-dir=/etc/consul.d\n")),(0,r.kt)("p",null,"We can use the HTTP API to see if the service was registered:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl localhost:8500/v1/catalog/services\n\n{\n    "consul": [],\n    "nomad": [\n        "http",\n        "serf",\n        "rpc"\n    ],\n    "nomad-client": [\n        "http"\n    ],\n    "web": [\n        "frontend"\n    ]\n}\n')),(0,r.kt)("p",null,"And get some details for the service itself:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl http://localhost:8500/v1/catalog/service/web\n[\n    {\n        "ID": "b6a5758f-b955-df07-d7a1-c9f26853641a",\n        "Node": "salt-master",\n        "Address": "127.0.0.1",\n        "Datacenter": "dc1",\n        "TaggedAddresses": {\n            "lan": "127.0.0.1",\n            "lan_ipv4": "127.0.0.1",\n            "wan": "127.0.0.1",\n            "wan_ipv4": "127.0.0.1"\n        },\n        "NodeMeta": {\n            "consul-network-segment": ""\n        },\n        "ServiceKind": "",\n        "ServiceID": "web",\n        "ServiceName": "web",\n        "ServiceTags": [\n            "frontend"\n        ],\n        "ServiceAddress": "",\n        "ServiceWeights": {\n            "Passing": 1,\n            "Warning": 1\n        },\n        "ServiceMeta": {},\n        "ServicePort": 80,\n        "ServiceEnableTagOverride": false,\n        "ServiceProxy": {\n            "MeshGateway": {},\n            "Expose": {}\n        },\n        "ServiceConnect": {},\n        "CreateIndex": 13,\n        "ModifyIndex": 13\n    }\n]\n')),(0,r.kt)("p",null,"The HTTP API lists all nodes hosting a given service. You'll typically want to filter your query for only healthy service instances, which DNS does automatically under the hood. Filter your HTTP API query to look for only healthy instances:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl \'http://localhost:8500/v1/health/service/web?passing\'\n[\n    {\n        "Node": {\n            "ID": "b6a5758f-b955-df07-d7a1-c9f26853641a",\n            "Node": "salt-master",\n            "Address": "127.0.0.1",\n            "Datacenter": "dc1",\n            "TaggedAddresses": {\n                "lan": "127.0.0.1",\n                "lan_ipv4": "127.0.0.1",\n                "wan": "127.0.0.1",\n                "wan_ipv4": "127.0.0.1"\n            },\n            "Meta": {\n                "consul-network-segment": ""\n            },\n            "CreateIndex": 10,\n            "ModifyIndex": 12\n        },\n        "Service": {\n            "ID": "web",\n            "Service": "web",\n            "Tags": [\n                "frontend"\n            ],\n            "Address": "",\n            "Meta": null,\n            "Port": 80,\n            "Weights": {\n                "Passing": 1,\n                "Warning": 1\n            },\n            "EnableTagOverride": false,\n            "Proxy": {\n                "MeshGateway": {},\n                "Expose": {}\n            },\n            "Connect": {},\n            "CreateIndex": 13,\n            "ModifyIndex": 13\n        },\n        "Checks": [\n            {\n                "Node": "salt-master",\n                "CheckID": "serfHealth",\n                "Name": "Serf Health Status",\n                "Status": "passing",\n                "Notes": "",\n                "Output": "Agent alive and reachable",\n                "ServiceID": "",\n                "ServiceName": "",\n                "ServiceTags": [],\n                "Type": "",\n                "Definition": {},\n                "CreateIndex": 10,\n                "ModifyIndex": 10\n            }\n        ]\n    }\n]\n')),(0,r.kt)("p",null,"We can also query the web service using Consul's DNS interface. The DNS name for a service registered with Consul is ",(0,r.kt)("inlineCode",{parentName:"p"},"NAME.service.consul"),", where NAME is the name you used to register the service (in this case, ",(0,r.kt)("inlineCode",{parentName:"p"},"web"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-conf"},"dig @127.0.0.1 -p 8600 web.service.consul\n\n; <<>> DiG 9.16.1-Ubuntu <<>> @127.0.0.1 -p 8600 web.service.consul\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 55751\n;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n;; WARNING: recursion requested but not available\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;web.service.consul.            IN      A\n\n;; ANSWER SECTION:\nweb.service.consul.     0       IN      A       127.0.0.1\n\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#8600(127.0.0.1)\n;; WHEN: Sat Aug 29 16:20:51 UTC 2020\n;; MSG SIZE  rcvd: 63\n")),(0,r.kt)("p",null,"As you can verify from the output, an A record was returned containing the IP address where the service was registered. A records can only hold IP addresses. You can also use the DNS interface to retrieve the entire address/port pair as a SRV record:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'dig @127.0.0.1 -p 8600 web.service.consul SRV\n\n; <<>> DiG 9.16.1-Ubuntu <<>> @127.0.0.1 -p 8600 web.service.consul SRV\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 63249\n;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 3\n;; WARNING: recursion requested but not available\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;web.service.consul.            IN      SRV\n\n;; ANSWER SECTION:\nweb.service.consul.     0       IN      SRV     1 1 80 salt-master.node.dc1.consul.\n\n;; ADDITIONAL SECTION:\nsalt-master.node.dc1.consul. 0  IN      A       127.0.0.1\nsalt-master.node.dc1.consul. 0  IN      TXT     "consul-network-segment="\n\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#8600(127.0.0.1)\n;; WHEN: Sat Aug 29 16:21:17 UTC 2020\n;; MSG SIZE  rcvd: 146\n')),(0,r.kt)("p",null,"You can also use the DNS interface to filter services by tags ",(0,r.kt)("inlineCode",{parentName:"p"},"dig @127.0.0.1 -p 8600 frontend.service.consul SRV"),"."),(0,r.kt)("h2",{id:"service-health-check"},"Service Health Check"),(0,r.kt)("p",null,"Next you'll update the web service by registering a ",(0,r.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/agent/checks.html"},"health check")," for it. Remember that because you never started a service on port 80 where you registered web, the health check you register will fail."),(0,r.kt)("p",null,"You can update service definitions without any downtime by changing the service definition file and sending a ",(0,r.kt)("inlineCode",{parentName:"p"},"SIGHUP")," to the agent or running ",(0,r.kt)("inlineCode",{parentName:"p"},"consul reload"),"."),(0,r.kt)("p",null,"First, edit the registration file by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/consul.d/web.json\n")),(0,r.kt)("p",null,"And add the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "service": {\n    "name": "web",\n    "tags": ["frontend"],\n    "port": 80,\n    "check": {\n      "args": ["curl", "localhost"],\n      "interval": "10s"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"check")," stanza of this service definition adds a script-based health check that tries to connect to the web service every 10 seconds via curl. If the command exits with an exit code ",(0,r.kt)("inlineCode",{parentName:"p"},">= 2"),", then the check will fail and Consul will consider the service unhealthy. An exit code of ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," will be considered as warning state."),(0,r.kt)("p",null,"Now reload Consul's configuration to make it aware of the new health check:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul reload\n\nConfiguration reload triggered\n")),(0,r.kt)("p",null,"You will now start seeing ",(0,r.kt)("strong",{parentName:"p"},"Critical Warnings")," in the Consul log every 10 seconds since the health check is failing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"2020-08-29T16:34:20.113Z [WARN]  agent: Check is now critical: check=service:web\n")),(0,r.kt)("p",null,"Consul's DNS server only returns healthy results. Query DNS for the web service again. It shouldn't return any IP addresses since web's health check is failing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dig @127.0.0.1 -p 8600 web.service.consul\n\n; <<>> DiG 9.16.1-Ubuntu <<>> @127.0.0.1 -p 8600 web.service.consul\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 5462\n;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1\n;; WARNING: recursion requested but not available\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;web.service.consul.            IN      A\n\n;; AUTHORITY SECTION:\nconsul.                 0       IN      SOA     ns.consul. hostmaster.consul. 1598718956 3600 600 86400 0\n\n;; Query time: 0 msec\n;; SERVER: 127.0.0.1#8600(127.0.0.1)\n;; WHEN: Sat Aug 29 16:35:56 UTC 2020\n;; MSG SIZE  rcvd: 97\n")),(0,r.kt)("p",null,"Also the HTTP API only returns an empty array now:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl 'http://localhost:8500/v1/health/service/web?passing'\n\n[]\n")),(0,r.kt)("p",null,"I am going to use httpster to spin up an Node.js based web server on port ",(0,r.kt)("inlineCode",{parentName:"p"},"80"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'mkdir ~/test && cd ~/test\n\nnano index.html  //add a simple "Hello World"\n\nnpm install -g httpster  //requires Node.js and NPM to be installed on your server\n\nhttpster -p 80\n')),(0,r.kt)("h2",{id:"the-webui"},"The WebUI"),(0,r.kt)("p",null,"You can now open your servers IP address and should be able to see your Hello World website. Let's see if the service is now back up and healthy. Open your web browser on your server IP address and port ",(0,r.kt)("inlineCode",{parentName:"p"},"8500")," - e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"http://192.168.2.110:8500/"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"All Service Checks Passing!")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Consul Service Discovery",src:t(14322).Z,width:"899",height:"374"})))}d.isMDXComponent=!0},14322:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Consul_Service_Discovery_01-014ab3bcbae33e2b76a0671da9272853.png"},62613:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5d3c51a1c4023f799928a62a91e5194f.jpg"}}]);