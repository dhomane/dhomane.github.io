"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[58719],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=i,u=m["".concat(s,".").concat(d)]||m[d]||g[d]||r;return a?n.createElement(u,l(l({ref:t},c),{},{components:a})):n.createElement(u,l({ref:t},c))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1999:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_position:9980,slug:"2020-08-01",title:"Installing Gitlab on Ubuntu Server 20.04",authors:"mpolinowski",tags:["LINUX","Gitlab"]},l=void 0,o={unversionedId:"DevOps/GitOps/2020-08-01--gitlab-install-on-ubuntu-server/index",id:"DevOps/GitOps/2020-08-01--gitlab-install-on-ubuntu-server/index",title:"Installing Gitlab on Ubuntu Server 20.04",description:"Mong Kok, Hong Kong",source:"@site/docs/DevOps/GitOps/2020-08-01--gitlab-install-on-ubuntu-server/index.md",sourceDirName:"DevOps/GitOps/2020-08-01--gitlab-install-on-ubuntu-server",slug:"/DevOps/GitOps/2020-08-01--gitlab-install-on-ubuntu-server/2020-08-01",permalink:"/docs/DevOps/GitOps/2020-08-01--gitlab-install-on-ubuntu-server/2020-08-01",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/GitOps/2020-08-01--gitlab-install-on-ubuntu-server/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Gitlab",permalink:"/docs/tags/gitlab"}],version:"current",sidebarPosition:9980,frontMatter:{sidebar_position:9980,slug:"2020-08-01",title:"Installing Gitlab on Ubuntu Server 20.04",authors:"mpolinowski",tags:["LINUX","Gitlab"]},sidebar:"tutorialSidebar",previous:{title:"Setting up Gitlab",permalink:"/docs/DevOps/GitOps/2020-08-02--gitlab-setup/2020-08-02"},next:{title:"Running Gitlab as Docker Registry",permalink:"/docs/DevOps/GitOps/2020-02-02--docker-images-in-gitlab/2020-02-02"}},s={},p=[{value:"Preparation",id:"preparation",level:2},{value:"Compose",id:"compose",level:2},{value:"Generate SSL and DHAPARAM Certificates",id:"generate-ssl-and-dhaparam-certificates",level:2},{value:"Install without an external URL",id:"install-without-an-external-url",level:2},{value:"Getting Started",id:"getting-started",level:2}],c={toc:p};function g(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Mong Kok, Hong Kong",src:a(76550).Z,width:"1500",height:"661"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#preparation"},"Preparation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#compose"},"Compose")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#generate-ssl-and-dhaparam-certificates"},"Generate SSL and DHAPARAM Certificates")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#install-without-an-external-url"},"Install without an external URL")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#getting-started"},"Getting Started"))),(0,i.kt)("h2",{id:"preparation"},"Preparation"),(0,i.kt)("p",null,"Create a new directory called ",(0,i.kt)("inlineCode",{parentName:"p"},"gitlab")," and go into it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /opt/gitlab && cd /opt/gitlab/\n")),(0,i.kt)("p",null,"Create a new GitLab data directory ",(0,i.kt)("inlineCode",{parentName:"p"},"/srv/gitlab")," for storing all our GitLab data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /srv/gitlab/{config/ssl,logs,data}\n")),(0,i.kt)("p",null,"and create a new ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file that will be used by Docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nano .env\n")),(0,i.kt)("p",null,"Define the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"GITLAB_HOME")," with the value as GitLab data directory ",(0,i.kt)("inlineCode",{parentName:"p"},"/srv/gitlab"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"GITLAB_HOME=/srv/gitlab\n")),(0,i.kt)("h2",{id:"compose"},"Compose"),(0,i.kt)("p",null,"Create the new docker-compose.yml` file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nano docker-compose.yml\n")),(0,i.kt)("p",null,"Define the service named ",(0,i.kt)("inlineCode",{parentName:"p"},"web")," with the image of ",(0,i.kt)("inlineCode",{parentName:"p"},"gitlab-ce")," latest version, and change the ",(0,i.kt)("inlineCode",{parentName:"p"},"hostname")," with your GitLab domain name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"web:\n  image: 'gitlab/gitlab-ce:latest'\n  restart: always\n  hostname: 'gitlab.instar.io'\n\n  environment:\n    GITLAB_OMNIBUS_CONFIG: |\n      # Add any other gitlab.rb configuration here, each on its own line\n      external_url 'https://gitlab.instar.io'\n      gitlab_rails['gitlab_shell_ssh_port'] = 2224\n      nginx['redirect_http_to_https'] = true\n      nginx['ssl_certificate'] = \"/etc/gitlab/ssl/fullchain.pem\"\n      nginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/privkey.pem\"\n      nginx['ssl_dhparam'] = \"/etc/gitlab/ssl/dhparams.pem\"  \n\n  ports:\n    - '80:80'\n    - '443:443'\n    - '2224:22'\n\n  volumes:\n    - '${GITLAB_HOME}/config:/etc/gitlab'\n    - '${GITLAB_HOME}/logs:/var/log/gitlab'\n    - '${GITLAB_HOME}/data:/var/opt/gitlab'\n    - '${GITLAB_HOME}/config/ssl:/etc/gitlab/ssl'\n")),(0,i.kt)("p",null,"Define the service named ",(0,i.kt)("inlineCode",{parentName:"p"},"web")," with the image of ",(0,i.kt)("inlineCode",{parentName:"p"},"gitlab-ce")," latest version, and change the ",(0,i.kt)("inlineCode",{parentName:"p"},"hostname")," with your GitLab domain name."),(0,i.kt)("p",null,"Configure the environment for your Gitlab installation as below. And make sure to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"external_url")," with the HTTPS secure protocol, and change the ",(0,i.kt)("inlineCode",{parentName:"p"},"gitlab_rails['gitlab_shell_ssh_port']")," with your alternative SSH port for the container."),(0,i.kt)("p",null,"Next, define ports for the GitLab container as below. And make sure to change the SSH port ",(0,i.kt)("inlineCode",{parentName:"p"},"2224")," with your custom port and match with the ",(0,i.kt)("inlineCode",{parentName:"p"},"gitlab_shell_ssh_port")," port on top."),(0,i.kt)("p",null,"After that, define the volume or your GitLab data directories. All of GitLab data directories are available at the ",(0,i.kt)("inlineCode",{parentName:"p"},"GITLAB_HOME")," directory, which is set the environment variable on the ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file on top."),(0,i.kt)("h2",{id:"generate-ssl-and-dhaparam-certificates"},"Generate SSL and DHAPARAM Certificates"),(0,i.kt)("p",null,"On your server, install the certbot tool:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install -y certbot\n")),(0,i.kt)("p",null,"After that, generate the SSL certificate for GitLab using the certbot command below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"certbot certonly --rsa-key-size 2048 --standalone --agree-tos --no-eff-email --email m.polinowski@instar.com -d gitlab.instar.io\n")),(0,i.kt)("p",null,"Once all is completed, your certificates will be available at the ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/letsencrypt/live/gitlab.instar.io")," directory. Now copy the certificate file ",(0,i.kt)("inlineCode",{parentName:"p"},"fullchain.pem")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"privkey.pem")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/srv/gitlab/config/ssl/")," directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cp /etc/letsencrypt/live/gitlab.instar.io/fullchain.pem /srv/gitlab/config/ssl/\ncp /etc/letsencrypt/live/gitlab.instar.io/privkey.pem /srv/gitlab/config/ssl/\n")),(0,i.kt)("p",null,'Next, generate the DHPARAM certificate "dhparam.pem" using the openssl command below.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo openssl dhparam -out /srv/gitlab/config/ssl/dhparams.pem 2048\n")),(0,i.kt)("p",null,"And all certificates for GitLab installation has been generated, and we're ready to build the GitLab container."),(0,i.kt)("h2",{id:"install-without-an-external-url"},"Install without an external URL"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"docker-compose.yml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"version: '3'\n# See https://docs.docker.com/compose/overview/ for more information.\n\n# If you make changes to this file or any related files, apply them by\n# navigating to the directory that holds this file and run this as root:\n#   docker-compose down; docker-compose up -d\n\n# Create a network for our containers.\nnetworks:\n  gitlab:\n\n# Create persistent Docker volumes to preserve important data.\n# We don't want our data to be lost when restarting containers.\nvolumes:\n  # For storing GitLab's configuration files:\n  vol-gitlab-config:\n  # For storing GitLab's logs:\n  vol-gitlab-logs:\n  # For storing GitLab's application data:\n  vol-gitlab-data:\n\n# Create our containers.\nservices:\n  # Watchtower detects if any linked containers have an new image\n  # available, automatically updating & restarting them if needed.\n  watchtower:\n    # https://hub.docker.com/r/centurylink/watchtower/\n    image: v2tec/watchtower:latest\n    # https://github.com/v2tec/watchtower#options\n    # This schedule applies updates (if available) at midnight.\n    command: --cleanup --schedule \"0 0 0 * * *\"\n    restart: always\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n\n  # The main front-end application.\n  gitlab:\n    # To stick to a specific version, replace \"latest\" with a tag from:\n    # https://hub.docker.com/r/gitlab/gitlab-ce/tags/\n    image: gitlab/gitlab-ce:latest\n    restart: always\n    hostname: \"my.gitlab.domain\"\n    ports:\n      - \"2222:22\"    # Change to \"2222:22\" if the host needs port 22.\n      - \"80:80\"\n      - \"443:443\"\n    networks:\n      - gitlab\n    volumes:\n      # Ensure GitLab content persist between restarts.\n      - vol-gitlab-config:/etc/gitlab\n      - vol-gitlab-logs:/var/log/gitlab\n      - vol-gitlab-data:/var/opt/gitlab\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        # Add gitlab.rb configuration here, each on its own line.\n        # See: https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template\n        external_url 'http://my.gitlab.domain'\n        letsencrypt['enable'] = false\n        # Configure headers for outgoing email.\n        gitlab_rails['gitlab_email_enabled'] = false\n        gitlab_rails['gitlab_email_from'] = 'no-reply@my.gitlab.domain'\n        gitlab_rails['gitlab_email_display_name'] = 'GitLab'\n        gitlab_rails['gitlab_email_reply_to'] = 'no-reply@my.gitlab.domain'\n        # Send outgoing email via the SMTP container:\n        gitlab_rails['smtp_enable'] = false\n        gitlab_rails['smtp_address'] = \"mail\"\n        gitlab_rails['smtp_port'] = 25\n        gitlab_rails['smtp_tls'] = false\n        # Limit backup lifetime to 7 days (604800 seconds):\n        gitlab_rails['backup_keep_time'] = 604800\n        registry_external_url 'http://registry.example.com'\n        gitlab_rails['registry_enabled'] = true\n        registry['enable'] = true\n        registry_nginx['enable'] = true\n        registry_nginx['listen_port'] = 5001\n        registry_nginx['listen_https'] = false\n\n  # This allows GitLab to send email straight out of the box without\n  # having to rely on an external provider like SendGrid or MailGun.\n  # It makes an SMTP host available at the hostname \"mail\".\n  # mail:\n  #   image: bytemark/smtp\n  #   restart: always\n  #   networks:\n  #     - gitlab\n\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},".env")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Docker Compose can read environment variables from this file.\n# See https://docs.docker.com/compose/env-file/\n\n# Your GitLab site will be available at this domain. If the domain\n# has DNS records pointing to your server, it'll get SSL certs.\nGITLAB_DOMAIN=server-domain-name\n")),(0,i.kt)("p",null,"Use server hostname as the domain. This can be changed later in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/opt/gitlab/.env")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'DOMAIN="`hostname -f`"\nsed -i -e "s|^GITLAB_DOMAIN=.*|GITLAB_DOMAIN=$DOMAIN|" /opt/gitlab/.env\n')),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"Start our containers with ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd /opt/gitlab\ndocker-compose up -d\n")),(0,i.kt)("p",null,"Change the default password and log in with ",(0,i.kt)("inlineCode",{parentName:"p"},"root")," and the the password you set in the step before."))}g.isMDXComponent=!0},76550:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c7f609117ad1e70316e5241b7580ec9.jpg"}}]);