"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[14921],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,h=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},48575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:5080,slug:"2022-05-21",title:"Hashicorp Dojo Consul Refresher",authors:"mpolinowski",tags:["Consul","LINUX"]},l=void 0,s={unversionedId:"DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/index",id:"DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/index",title:"Hashicorp Dojo Consul Refresher",description:"Shen Zhen, China",source:"@site/docs/DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/index.md",sourceDirName:"DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher",slug:"/DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/2022-05-21",permalink:"/docs/DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/2022-05-21",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/index.md",tags:[{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5080,frontMatter:{sidebar_position:5080,slug:"2022-05-21",title:"Hashicorp Dojo Consul Refresher",authors:"mpolinowski",tags:["Consul","LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad with Consul II - The Reckoning",permalink:"/docs/DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/2022-05-22"},next:{title:"Hashicorp Nomad with Consul Service Discovery",permalink:"/docs/DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul/2022-05-20"}},i={},c=[{value:"Install Consul",id:"install-consul",level:2},{value:"Security",id:"security",level:2},{value:"Generate the gossip encryption key",id:"generate-the-gossip-encryption-key",level:3},{value:"Generate TLS certificates for RPC encryption",id:"generate-tls-certificates-for-rpc-encryption",level:3},{value:"Configure Consul agents",id:"configure-consul-agents",level:2},{value:"General defaults",id:"general-defaults",level:3},{value:"TLS encryption",id:"tls-encryption",level:3},{value:"Datacenter auto-join",id:"datacenter-auto-join",level:3},{value:"Enable Consul ACLs",id:"enable-consul-acls",level:3},{value:"Performance stanza",id:"performance-stanza",level:3},{value:"Master Configuration",id:"master-configuration",level:2},{value:"Consul Service Mesh",id:"consul-service-mesh",level:3},{value:"Start the Consul Service",id:"start-the-consul-service",level:2},{value:"Accessing the UI",id:"accessing-the-ui",level:2},{value:"Bootstrap the ACL System",id:"bootstrap-the-acl-system",level:2},{value:"Consul Environment Variables",id:"consul-environment-variables",level:2},{value:"Create a Node Policy",id:"create-a-node-policy",level:2},{value:"Configuring Nomad for Consul (Only Master Node)",id:"configuring-nomad-for-consul-only-master-node",level:2},{value:"Accessing the UI (TLS)",id:"accessing-the-ui-tls",level:2},{value:"Complete Configuration",id:"complete-configuration",level:2},{value:"Master Node",id:"master-node",level:3},{value:"Minion Node",id:"minion-node",level:3}],u={toc:c};function p(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shen Zhen, China",src:t(63311).Z,width:"1500",height:"661"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#install-consul"},"Install Consul")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#security"},"Security"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#generate-the-gossip-encryption-key"},"Generate the gossip encryption key")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#generate-tls-certificates-for-rpc-encryption"},"Generate TLS certificates for RPC encryption")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configure-consul-agents"},"Configure Consul agents"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#general-defaults"},"General defaults")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#tls-encryption"},"TLS encryption")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#datacenter-auto-join"},"Datacenter auto-join")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#enable-consul-acls"},"Enable Consul ACLs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#performance-stanza"},"Performance stanza")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#master-configuration"},"Master Configuration"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#consul-service-mesh"},"Consul Service Mesh")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#start-the-consul-service"},"Start the Consul Service")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#accessing-the-ui"},"Accessing the UI")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#bootstrap-the-acl-system"},"Bootstrap the ACL System")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#consul-environment-variables"},"Consul Environment Variables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-a-node-policy"},"Create a Node Policy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuring-nomad-for-consul-only-master-node"},"Configuring Nomad for Consul (Only Master Node)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#accessing-the-ui-tls"},"Accessing the UI (TLS)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#complete-configuration"},"Complete Configuration"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#master-node"},"Master Node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#minion-node"},"Minion Node"))))),(0,r.kt)("h2",{id:"install-consul"},"Install Consul"),(0,r.kt)("p",null,"The first thing you need to do in order to use Consul is install it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -\nsudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"\napt update && apt install consul && consul -v\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"ERROR ",(0,r.kt)("inlineCode",{parentName:"p"},"command not found: apt-add-repository")," -> ",(0,r.kt)("inlineCode",{parentName:"p"},"apt install software-properties-common"))),(0,r.kt)("p",null,"This will add both a default configuration file ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/consul.d/consul.hcl")," and a SystemD service file ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/lib/systemd/system/consul.service"),"."),(0,r.kt)("h2",{id:"security"},"Security"),(0,r.kt)("p",null,"All commands in this section can be completed on any system with the Consul binary installed. The outputs and artifacts from these commands should be archived in a secure location for future reference."),(0,r.kt)("h3",{id:"generate-the-gossip-encryption-key"},"Generate the gossip encryption key"),(0,r.kt)("p",null,"Gossip is encrypted with a symmetric key, since gossip between nodes is done over UDP. All agents must have the same encryption key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul keygen\nqDOPBEr+/oUVeOFQOnVypxwDaHzLrD+lvjo5vCEBbZ0=\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"NOTE"),": You will need to add the newly generated key to the encrypt option in the server configuration on all Consul agents. Save your key in a safe location. You will need to reference the key throughout the installation.")),(0,r.kt)("h3",{id:"generate-tls-certificates-for-rpc-encryption"},"Generate TLS certificates for RPC encryption"),(0,r.kt)("p",null,"Consul can use TLS to verify the authenticity of masters and minions. To enable TLS, Consul requires that all agents have certificates signed by a single Certificate Authority (CA)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /etc/consul.d/tls && cd /etc/consul.d/tls\nconsul tls ca create\n")),(0,r.kt)("p",null,"Next create a set of certificates, one for each Consul agent. You will need to select a name for your primary datacenter now, so that the certificates are named properly, as well as a domain for your Consul datacenter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul tls cert create -server -dc consul -domain consul\n")),(0,r.kt)("p",null,"A federated Consul environment requires the server certificate to include the names of all Consul datacenters that are within the federated environment. The ",(0,r.kt)("inlineCode",{parentName:"p"},"-additional-dnsname")," flag allows you to provide an additional DNS names:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'consul tls cert create -server -dc consul -domain consul -additional-dnsname="*.consul"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chown consul:consul ./*\nchmod 640 ./*\n")),(0,r.kt)("p",null,"The directory will now contain the following files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -la /etc/consul.d/tls\n-rw-r----- 1 consul consul consul-agent-ca-key.pem\n-rw-r----- 1 consul consul consul-agent-ca.pem\n-rw-r----- 1 consul consul consul-server-consul-0-key.pem\n-rw-r----- 1 consul consul consul-server-consul-0.pem\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The ",(0,r.kt)("strong",{parentName:"p"},"Consul minions agents")," will only need the the CA certificate, ",(0,r.kt)("inlineCode",{parentName:"p"},"consul-agent-ca.pem"),", to enable mTLS. Copy this file to ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/consul.d/tls")," on all minions.")),(0,r.kt)("p",null,"The recommended approach is leverage the auto encryption mechanism provided by Consul that automatically generates client certificates using the Consul connect service mesh CA without the need for an operator to manually generate certificates for each client."),(0,r.kt)("h2",{id:"configure-consul-agents"},"Configure Consul agents"),(0,r.kt)("p",null,"Consul server agents typically require a superset of ",(0,r.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/agent/options.html"},"configuration")," required by Consul client agents. You will specify common configuration used by all Consul agents in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/consul.d/consul.hcl")," and server specific configuration in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/consul.d/server.hcl"),"."),(0,r.kt)("p",null,"The APT installation already provided the default ",(0,r.kt)("inlineCode",{parentName:"p"},"consul.hcl")," let's add the ",(0,r.kt)("inlineCode",{parentName:"p"},"server.hcl")," and apply the correct permissions to all files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd /etc/consul.d\ntouch server.hcl\nchown consul:consul ./*\nchmod 640 ./*\n")),(0,r.kt)("h3",{id:"general-defaults"},"General defaults"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"consul.hcl")," contains only the path to the ",(0,r.kt)("inlineCode",{parentName:"p"},"data_dir")," that was automatically created in ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/consul")," during the installation. We can now add the name of our datacenter ",(0,r.kt)("inlineCode",{parentName:"p"},"consul")," and the gossip encryption key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'datacenter = "consul"\ndata_dir = "/opt/consul"\nencrypt = "qDOPBEr+/oUVeOFQOnVypxwDaHzLrD+lvjo5vCEBbZ0="\n')),(0,r.kt)("h3",{id:"tls-encryption"},"TLS encryption"),(0,r.kt)("p",null,"For the TLS configuration we need to add - for the ",(0,r.kt)("strong",{parentName:"p"},"Master Node"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'tls {\n  defaults {\n    ca_file = "/etc/consul.d/tls/consul-agent-ca.pem"\n    cert_file = "/etc/consul.d/tls/consul-server-consul-0.pem"\n    key_file = "/etc/consul.d/tls/consul-server-consul-0-key.pem"\n    verify_incoming = true\n    verify_outgoing = true\n  }\n  internal_rpc {\n    verify_server_hostname = true\n  }\n}\n')),(0,r.kt)("p",null,"And for the ",(0,r.kt)("strong",{parentName:"p"},"Minions"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# TLS configuration\n\ntls {\n  defaults {\n    ca_file = "/etc/consul.d/tls/consul-agent-ca.pem"\n  }\n  internal_rpc {\n    verify_server_hostname = true\n  }\n}\n\nauto_encrypt {\n    tls = true\n }\n')),(0,r.kt)("h3",{id:"datacenter-auto-join"},"Datacenter auto-join"),(0,r.kt)("p",null,"The retry_join parameter allows you to configure all Consul agents to automatically form a datacenter using a common Consul server accessed via DNS address or IP address. This removes the need to manually join the Consul datacenter nodes together."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"WARNING"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"join")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"retry_join")," is a required parameter for the systemd process to complete successfully and send its notify signal on LAN join.")),(0,r.kt)("p",null,"Replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"retry_join")," parameter value with the correct Master DNS address, IP address, Loopback address for your environment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'retry_join = ["<One of Consul master public IPs>"]\n')),(0,r.kt)("h3",{id:"enable-consul-acls"},"Enable Consul ACLs"),(0,r.kt)("p",null,"Consul uses ",(0,r.kt)("a",{parentName:"p",href:"https://learn.hashicorp.com/tutorials/consul/access-control-setup-production"},"Access Control Lists (ACLs)")," to secure the UI, API, CLI, and Consul catalog including service and agent registration. When securing your datacenter you should configure the ACLs first."),(0,r.kt)("p",null,"Add the ACL configuration to the consul.hcl configuration file and choose a default policy of ",(0,r.kt)("inlineCode",{parentName:"p"},"allow")," (allow all traffic unless explicitly denied) or ",(0,r.kt)("inlineCode",{parentName:"p"},"deny")," (deny all traffic unless explicitly allowed)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'acl {\n  enabled = true\n  default_policy = "allow"\n  enable_token_persistence = true\n}\n')),(0,r.kt)("h3",{id:"performance-stanza"},"Performance stanza"),(0,r.kt)("p",null,"The performance stanza allows tuning the performance of different subsystems in Consul:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"performance {\n  raft_multiplier = 1\n}\n")),(0,r.kt)("p",null,"For more information on Raft tuning and the ",(0,r.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/install/performance.html"},"raft_multiplier")," setting, check the server performance documentation."),(0,r.kt)("h2",{id:"master-configuration"},"Master Configuration"),(0,r.kt)("p",null,"The master specific configuration will be placed in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/consul.d/server.hcl"),". On my master node I will enable the web user interface and select the agent as server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ui_config{\n  enabled = true\n}\n\nauto_encrypt {\n  allow_tls = true\n}\n\nserver = true\nbootstrap_expect=1\n")),(0,r.kt)("p",null,"Consul agent should bind to all addresses on the local machine and will advertise the private IPv4 address to the rest of the datacenter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'bind_addr = "<One of Consul master public IPs>"\n')),(0,r.kt)("p",null,"When the value for ",(0,r.kt)("inlineCode",{parentName:"p"},"client_addr")," is undefined, it defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1"),", allowing only loopback connections. Optionally, you can specify a bind IP address in your Consul ",(0,r.kt)("inlineCode",{parentName:"p"},"server.hcl")," configuration file. I will leave it at loopback for now, as I don't want to expose the Consul HTTP user interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'client_addr = "127.0.0.1"\n')),(0,r.kt)("h3",{id:"consul-service-mesh"},"Consul Service Mesh"),(0,r.kt)("p",null,"Consul service mesh provides service-to-service connection authorization and encryption using mutual Transport Layer Security (TLS). Applications can use sidecar proxies in a service mesh configuration to establish TLS connections for inbound and outbound connections without being aware of Consul service mesh."),(0,r.kt)("p",null,"Consul service mesh uses the registered service identity (rather than IP addresses) to enforce access control with intentions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'connect {\n  enabled = true\n}\n\naddresses {\n  grpc = "<One of Consul master public IPs>"\n}\n\nports {\n  grpc  = 8502\n  dns = 8600\n  http = 8500\n  https = 8501\n  serf_lan = 8301\n  serf_wan = 8302\n  server = 8300\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.consul.io/docs/agent/options#connect_enabled"},"connect.enabled")," - Controls whether Connect features are enabled on this agent. Should be enabled on all servers in the cluster in order for Connect to function properly."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.consul.io/docs/agent/options#grpc"},"addresses.grpc")," - The address that Consul will bind gRPC API to. Defaults to client_addr but it might be sensitive to have it on localhost/127.0.0.1 for security reasons."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.consul.io/docs/agent/options#grpc_port"},"ports.grpc")," - The gRPC API port. We recommend using 8502 for grpc by convention as some tooling will work automatically with this. Currently gRPC is only used to expose Envoy xDS API to Envoy proxies.")),(0,r.kt)("h2",{id:"start-the-consul-service"},"Start the Consul Service"),(0,r.kt)("p",null,"First verify your configuration on all hosts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul validate /etc/consul.d/\n")),(0,r.kt)("p",null,"Installing Consul through the package manager also added a SystemD service file for us in ",(0,r.kt)("inlineCode",{parentName:"p"},"/lib/systemd/system/consul.service"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-conf"},'[Unit]\nDescription="HashiCorp Consul - A service mesh solution"\nDocumentation=https://www.consul.io/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/consul.d/consul.hcl\n\n[Service]\nEnvironmentFile=/etc/consul.d/consul.env\nUser=consul\nGroup=consul\nExecStart=/usr/bin/consul agent -config-dir=/etc/consul.d/\nExecReload=/bin/kill --signal HUP $MAINPID\nKillMode=process\nKillSignal=SIGTERM\nRestart=on-failure\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n')),(0,r.kt)("p",null,"Before using this file I will execute Consul manually - this way I will see potential error messages during the start up:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/usr/bin/consul agent -config-dir=/etc/consul.d/\n\n==> Starting Consul agent...\n           Version: '1.12.2'\n           Node ID: 'nodeid'\n         Node name: 'Nomad'\n        Datacenter: 'consul' (Segment: '<all>')\n            Server: true (Bootstrap: true)\n       Client Addr: [masterip] (HTTP: 8500, HTTPS: -1, gRPC: 8502, DNS: 8600)\n      Cluster Addr: masterip (LAN: 8301, WAN: 8302)\n           Encrypt: Gossip: true, TLS-Outgoing: true, TLS-Incoming: true, Auto-Encrypt-TLS: true\n")),(0,r.kt)("p",null,"The process is starting without any error messages. But now that I see the log I realize that I did not open any ports yet. Consul requires up to 6 different ports to work properly, some on TCP, UDP, or both protocols:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Use"),(0,r.kt)("td",{parentName:"tr",align:null},"Default Ports")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DNS:"),(0,r.kt)("td",{parentName:"tr",align:null},"The DNS server (TCP and UDP)\t",(0,r.kt)("inlineCode",{parentName:"td"},"8600"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HTTP:"),(0,r.kt)("td",{parentName:"tr",align:null},"The HTTP API (TCP Only)\t",(0,r.kt)("inlineCode",{parentName:"td"},"8500"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HTTPS:"),(0,r.kt)("td",{parentName:"tr",align:null},"The HTTPs API\tdisabled (",(0,r.kt)("inlineCode",{parentName:"td"},"8501"),")*")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gRPC:"),(0,r.kt)("td",{parentName:"tr",align:null},"The gRPC API\tdisabled (",(0,r.kt)("inlineCode",{parentName:"td"},"8502"),")*")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LAN Serf:"),(0,r.kt)("td",{parentName:"tr",align:null},"The Serf LAN port (TCP and UDP)\t",(0,r.kt)("inlineCode",{parentName:"td"},"8301"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Wan Serf:"),(0,r.kt)("td",{parentName:"tr",align:null},"The Serf WAN port (TCP and UDP)\t",(0,r.kt)("inlineCode",{parentName:"td"},"8302"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"server:"),(0,r.kt)("td",{parentName:"tr",align:null},"Server RPC address (TCP Only)\t",(0,r.kt)("inlineCode",{parentName:"td"},"8300"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sidecar Proxy Min:"),(0,r.kt)("td",{parentName:"tr",align:null},"Inclusive min port number to use for automatically assigned sidecar service registrations.\t",(0,r.kt)("inlineCode",{parentName:"td"},"21000"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sidecar Proxy Max:"),(0,r.kt)("td",{parentName:"tr",align:null},"Inclusive max port number to use for automatically assigned sidecar service registrations.\t",(0,r.kt)("inlineCode",{parentName:"td"},"21255"))))),(0,r.kt)("p",null,"For HTTPS and gRPC the ports specified in the table are recommendations. All ports can be set inside ",(0,r.kt)("a",{parentName:"p",href:"https://www.consul.io/docs/agent/config/config-files#ports"},"Agent Config"),". But let's open the defaults for now:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ufw allow 8301,8302,8300,8502/tcp\nufw allow 8301,8302,8502/udp\nufw reload && ufw status\n")),(0,r.kt)("p",null,"And run the Consul service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl enable consul\nservice consul start\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ERROR")," Message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'service consul status                                                                                   \n\u25cf consul.service - "HashiCorp Consul - A service mesh solution"\n     Loaded: loaded (/lib/systemd/system/consul.service; enabled; vendor preset: enabled)\n     Active: failed (Result: exit-code) since Fri 2022-06-17 06:29:54 CEST; 4s ago\n       Docs: https://www.consul.io/\n    Process: 325302 ExecStart=/usr/bin/consul agent -config-dir=/etc/consul.d/ (code=exited, status=1/FAILUR>\n   Main PID: 325302 (code=exited, status=1/FAILURE)\n        CPU: 93ms\n\nJun 17 06:29:54 Nomad systemd[1]: consul.service: Main process exited, code=exited, status=1/FAILURE\nJun 17 06:29:54 Nomad systemd[1]: consul.service: Failed with result \'exit-code\'.\nJun 17 06:29:54 Nomad systemd[1]: consul.service: Scheduled restart job, restart counter is at 5.\nJun 17 06:29:54 Nomad systemd[1]: Stopped "HashiCorp Consul - A service mesh solution".\nJun 17 06:29:54 Nomad systemd[1]: consul.service: Start request repeated too quickly.\nJun 17 06:29:54 Nomad systemd[1]: consul.service: Failed with result \'exit-code\'.\nJun 17 06:29:54 Nomad systemd[1]: Failed to start "HashiCorp Consul - A service mesh solution".\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"journalctl -xe -u consul\n\nThe job identifier is 73920.\nconsul[325302]: ==> Failed to load cert/key pair: open /etc/consul.d/tls/consul-server-consul-0.pem: permission denied\nsystemd[1]: consul.service: Main process exited, code=exited, status=1/FAILURE\nSubject: Unit process exited\n")),(0,r.kt)("p",null,"Ok that is strange - I tested to read the file using the consul user. Even when I run ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod 777")," on it I am still unable to access it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'su consul -s /bin/bash -c "cat /etc/consul.d/tls/consul-server-consul-0.pem"                            \ncat: /etc/consul.d/tls/consul-server-consul-0.pem: Permission denied\n')),(0,r.kt)("p",null,"This was an issue with the folder permission - I had to raise it to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chmod 744 /etc/consul.d/tls\n")),(0,r.kt)("p",null,"Now it worked!"),(0,r.kt)("h2",{id:"accessing-the-ui"},"Accessing the UI"),(0,r.kt)("p",null,"Just as I did with the Nomad web user interface I can now tunnel the Consul HTTP Port (default ",(0,r.kt)("inlineCode",{parentName:"p"},"8500"),") to the localhost of my local machine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -L 8181:localhost:8500 root@[Consul Master public IP] -p [SSH Port]\n")),(0,r.kt)("p",null,"And access the interface on ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8181"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Hashicorp Consul",src:t(2475).Z,width:"1180",height:"388"})),(0,r.kt)("p",null,"Nomad automatically added my Nomad service and my first active Minion server was also added successfully. But after a while I started getting failing health checks:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Failing serf check"),": This node has a failing serf node check. The health statuses shown on this page are the statuses as they were known before the node became unreachable.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Hashicorp Consul",src:t(83119).Z,width:"1170",height:"616"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"SOLVED"),": I was missing the ",(0,r.kt)("inlineCode",{parentName:"p"},"auto_encrypt")," key in my client configuration. Now everything seems to work - here is the entire configuration -> ",(0,r.kt)("a",{parentName:"p",href:"#complete-configuration"},"see final configuration files"),"."),(0,r.kt)("h2",{id:"bootstrap-the-acl-system"},"Bootstrap the ACL System"),(0,r.kt)("p",null,"Working from one agent generate the Consul bootstrap token, which has unrestricted privileges:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul acl bootstrap\n")),(0,r.kt)("p",null,"This will return the Consul bootstrap token. You will need the SecretID for all subsequent Consul API requests (including CLI and UI). Ensure that you save the SecretID."),(0,r.kt)("h2",{id:"consul-environment-variables"},"Consul Environment Variables"),(0,r.kt)("p",null,"Just as with Nomad we now need to use the TLS certificates and ACL tokens when we want to use the Consul CLI. So let's add them to our environment, e.g. in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.zshrc"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export CONSUL_CACERT=/etc/consul.d/tls/consul-agent-ca.pem\nexport CONSUL_CLIENT_CERT=/etc/consul.d/tls/consul-server-consul-0.pem\nexport CONSUL_CLIENT_KEY=/etc/consul.d/tls/consul-server-consul-0-key.pem\nexport CONSUL_HTTP_TOKEN="<Token SecretID from previous step>"\nexport CONSUL_MGMT_TOKEN="<Token SecretID from previous step>"\n')),(0,r.kt)("p",null,"Try running a CLI Command on the master Node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul members                                                                                          \nNode           Address           Status  Type    Build   Protocol  DC    \nNomad          <Master IP:8301>  alive   server  1.12.2  2         consul\nkundensysteme  <Minion IP:8301>  alive   client  1.12.2  2         consul\n")),(0,r.kt)("h2",{id:"create-a-node-policy"},"Create a Node Policy"),(0,r.kt)("p",null,"Create a node policy file ",(0,r.kt)("inlineCode",{parentName:"p"},"node-policy.hcl")," with write access for nodes related actions and read access for service related actions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'agent_prefix "" {\n  policy = "write"\n}\nnode_prefix "" {\n  policy = "write"\n}\nservice_prefix "" {\n  policy = "read"\n}\nsession_prefix "" {\n  policy = "read"\n}\n')),(0,r.kt)("p",null,"Generate the Consul node ACL policy with the newly created policy file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"consul acl policy create \\\n  -token=${CONSUL_MGMT_TOKEN} \\\n  -name node-policy \\\n  -rules @node-policy.hcl\n")),(0,r.kt)("p",null,"Create the node token with the newly created policy:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'consul acl token create \\\n  -token=${CONSUL_MGMT_TOKEN} \\\n  -description "node token" \\\n  -policy-name node-policy\n')),(0,r.kt)("p",null,"On ",(0,r.kt)("strong",{parentName:"p"},"ALL")," Consul Servers add the node token:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'consul acl set-agent-token \\\n  -token="<Management Token SecretID>" \\\n  agent "<Node Token SecretID>"\n')),(0,r.kt)("p",null,"To increase security for ",(0,r.kt)("a",{parentName:"p",href:"https://learn.hashicorp.com/tutorials/consul/deployment-guide"},"your datacenter"),", we we will complete the ",(0,r.kt)("a",{parentName:"p",href:"https://learn.hashicorp.com/tutorials/consul/access-control-setup-production"},"Secure Consul with Access Control Lists (ACLs)")," in the next step."),(0,r.kt)("h2",{id:"configuring-nomad-for-consul-only-master-node"},"Configuring Nomad for Consul (Only Master Node)"),(0,r.kt)("p",null,"After the installation I checked the Consul log and found that there was an error message coming in every 30s:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'consul[351769]: 2022-06-18T13:42:31.136+0200 [ERROR] agent.http: Request error: method=PUT url=/v1/agent/service/register from=127.0.0.1:59386 error="Bad request: Invalid service address"\nconsul[351769]: 2022-06-18T13:43:01.142+0200 [ERROR] agent.http: Request error: method=PUT url=/v1/agent/service/register from=127.0.0.1:59386 error="Bad request: Invalid service address"\nconsul[351769]: 2022-06-18T13:43:31.160+0200 [ERROR] agent.http: Request error: method=PUT url=/v1/agent/service/register from=127.0.0.1:59386 error="Bad request: Invalid service address"\nconsul[351769]: 2022-06-18T13:44:01.166+0200 [ERROR] agent.http: Request error: method=PUT url=/v1/agent/service/register from=127.0.0.1:59386 error="Bad request: Invalid service address"\n')),(0,r.kt)("p",null,"I assumed that this must be the local Nomad service trying to connect and missing the ACL token. There is a ",(0,r.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/configuration/consul"},"Consul block")," in the Nomad configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'consul {\n  address = "127.0.0.1:8500"\n  grpc_address = "127.0.0.1:8502"\n  ssl = true\n  ca_file = "/etc/consul.d/tls/consul-agent-ca.pem"\n  cert_file = "/etc/consul.d/tls/consul-server-consul-0.pem"\n  key_file = "/etc/consul.d/tls/consul-server-consul-0-key.pem"\n  verify_ssl = true\n  token = ""\n  client_service_name = "nomad-client"\n  server_service_name = "nomad"\n  auto_advertise      = true\n  server_auto_join    = true\n  client_auto_join    = true\n}\n')),(0,r.kt)("p",null,"To prevent getting permission errors when trying to read the cert files we need to expand the read rights on those consul certificates. Starting the service back up - seems is in order now. Nomad and Consul are running and the error messages disappeared."),(0,r.kt)("h2",{id:"accessing-the-ui-tls"},"Accessing the UI (TLS)"),(0,r.kt)("p",null,"I was running into the issue that now with TLS encryption enabled and cert verification enforced I was unable to access the Consul UI. Since I keep my HTTP/HTTPS ports closed I will change the Consul Server configuration (only on the master node that supplies my UI) to skip the verification step for HTTPS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# TLS configuration\ntls {\n  defaults {\n    ca_file = "/etc/consul.d/tls/consul-agent-ca.pem"\n    cert_file = "/etc/consul.d/tls/consul-server-consul-0.pem"\n    key_file = "/etc/consul.d/tls/consul-server-consul-0-key.pem"\n    verify_incoming = true\n    verify_outgoing = true\n  }\n  internal_rpc {\n    verify_server_hostname = true\n  }\n  https {\n    verify_incoming = false\n  }\n}\n')),(0,r.kt)("p",null,"Now I only need to forward the HTTPS port (default ",(0,r.kt)("inlineCode",{parentName:"p"},"8501"),") to my machine and am able to access the UI again on ",(0,r.kt)("inlineCode",{parentName:"p"},"https://localhost:8181"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -L 8181:localhost:8501 root@[Consul Master public IP] -p [SSH Port]\n")),(0,r.kt)("h2",{id:"complete-configuration"},"Complete Configuration"),(0,r.kt)("h3",{id:"master-node"},"Master Node"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"consul.hcl")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# datacenter\ndatacenter = "consul"\n\n# data_dir\ndata_dir = "/opt/consul"\n\n# bootstrap_expect\nbootstrap_expect=1\n\n# encrypt\nencrypt = "[Gossip Encryption Key]"\n\n# retry_join\nretry_join = ["[My Master Address]"]\n \n# TLS configuration\ntls {\n  defaults {\n    ca_file = "/etc/consul.d/tls/consul-agent-ca.pem"\n    cert_file = "/etc/consul.d/tls/consul-server-consul-0.pem"\n    key_file = "/etc/consul.d/tls/consul-server-consul-0-key.pem"\n    verify_incoming = true\n    verify_outgoing = true\n  }\n  internal_rpc {\n    verify_server_hostname = true\n  }\n  https {\n    verify_incoming = false\n  }\n}\n\n# ACL configuration\nacl {\n  enabled = true\n  default_policy = "allow"\n  enable_token_persistence = true\n}\n\n# Performance\nperformance {\n  raft_multiplier = 1\n}\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"server.hcl")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# client_addr\nclient_addr = "127.0.0.1"\n\n# ui\nui_config{\n  enabled = true\n}\n\nauto_encrypt {\n  allow_tls = true\n}\n\n# server\nserver = true\n\n# Bind addr\nbind_addr = "[My Master Address]"\n\n# Service mesh\n# connect {\n#   enabled = true\n# }\n\n# addresses {\n#   grpc = "[My Master Address]"\n# }\n\nports {\n  grpc  = 8502\n  dns = -1\n  http = -1\n  https = 8501\n  serf_lan = 8301\n  serf_wan = 8302\n  server = 8300\n}\n')),(0,r.kt)("h3",{id:"minion-node"},"Minion Node"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"consul.hcl")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# datacenter\ndatacenter = "consul"\n\n# data_dir\ndata_dir = "/opt/consul"\n\n# client_addr\nclient_addr = "127.0.0.1"\n\n\n# server\nserver = false\nbind_addr = "[My Minion Address]"\nports {\n  grpc  = 8502\n  dns = 8600\n  http = 8500\n  https = 8501\n  serf_lan = 8301\n  serf_wan = 8302\n  server = 8300\n}\n\n# encrypt\nencrypt = "[Gossip Encryption Key]"\n\n# retry_join\nretry_join = ["[My Master Address]"]\n\n \n# TLS configuration\ntls {\n  defaults {\n    ca_file = "/etc/consul.d/tls/consul-agent-ca.pem"\n    # cert_file = "/etc/consul.d/tls/consul-server-consul-0.pem"\n    # key_file = "/etc/consul.d/tls/consul-server-consul-0-key.pem"\n  }\n  internal_rpc {\n    verify_server_hostname = true\n  }\n}\nauto_encrypt {\n    tls = true\n }\n\n# ACL configuration\nacl {\n  enabled = true\n  default_policy = "allow"\n  enable_token_persistence = true\n}\n\n# Performance\nperformance {\n  raft_multiplier = 1\n}\n')))}p.isMDXComponent=!0},2475:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_01-8d7a14d0c8459e7725f2bc8c10e86887.png"},83119:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_02-21eab4118bed1dbbc3d18feff3a04a8b.png"},63311:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-aebdfbdab26722eba0393921cc85bc26.jpg"}}]);