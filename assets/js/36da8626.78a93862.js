"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[81117],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),g=c(n),d=r,f=g["".concat(l,".").concat(d)]||g[d]||u[d]||a;return n?i.createElement(f,s(s({ref:t},p),{},{components:n})):i.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},88334:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=n(87462),r=(n(67294),n(3905));const a={sidebar_position:9030,slug:"2020-08-27",title:"NGINX Docker with SSL Encryption (Self-signed)",authors:"mpolinowski",tags:["LINUX","NGINX","Docker"]},s=void 0,o={unversionedId:"DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/index",id:"DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/index",title:"NGINX Docker with SSL Encryption (Self-signed)",description:"Victoria Harbour, Hong Kong",source:"@site/docs/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/index.md",sourceDirName:"DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed",slug:"/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/2020-08-27",permalink:"/docs/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/2020-08-27",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/NGINX/2020-08-27--nginx-docker-ssl-certs-self-signed/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:9030,frontMatter:{sidebar_position:9030,slug:"2020-08-27",title:"NGINX Docker with SSL Encryption (Self-signed)",authors:"mpolinowski",tags:["LINUX","NGINX","Docker"]},sidebar:"tutorialSidebar",previous:{title:"NGINX Docker with Certbot",permalink:"/docs/DevOps/NGINX/2020-08-28--nginx-docker-certbot/2020-08-27"},next:{title:"NGINX Docker Setup",permalink:"/docs/DevOps/NGINX/2020-08-26--nginx-docker-setup/2020-08-26"}},l={},c=[{value:"Self-signed Certificate",id:"self-signed-certificate",level:2},{value:"Creating the SSL Certificate",id:"creating-the-ssl-certificate",level:3},{value:"Perfect Forward Secrecy",id:"perfect-forward-secrecy",level:3},{value:"Configuring Nginx to Use SSL",id:"configuring-nginx-to-use-ssl",level:2},{value:"Creating a Configuration Snippet Pointing to the SSL Key and Certificate",id:"creating-a-configuration-snippet-pointing-to-the-ssl-key-and-certificate",level:3},{value:"Creating a Configuration Snippet with Strong Encryption Settings",id:"creating-a-configuration-snippet-with-strong-encryption-settings",level:3},{value:"Adjusting the Nginx Configuration",id:"adjusting-the-nginx-configuration",level:3},{value:"Changing to a Permanent Redirect",id:"changing-to-a-permanent-redirect",level:4}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Victoria Harbour, Hong Kong",src:n(73469).Z,width:"1500",height:"509"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#self-signed-certificate"},"Self-signed Certificate"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-the-ssl-certificate"},"Creating the SSL Certificate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#perfect-forward-secrecy"},"Perfect Forward Secrecy")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuring-nginx-to-use-ssl"},"Configuring Nginx to Use SSL"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-a-configuration-snippet-pointing-to-the-ssl-key-and-certificate"},"Creating a Configuration Snippet Pointing to the SSL Key and Certificate")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creating-a-configuration-snippet-with-strong-encryption-settings"},"Creating a Configuration Snippet with Strong Encryption Settings")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#adjusting-the-nginx-configuration"},"Adjusting the Nginx Configuration"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#changing-to-a-permanent-redirect"},"Changing to a Permanent Redirect"))))))),(0,r.kt)("h2",{id:"self-signed-certificate"},"Self-signed Certificate"),(0,r.kt)("p",null,"In this guide, I will set up a self-signed SSL certificate for use with an Nginx proxy (Docker Container) on an Ubuntu 20.04 server."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note"),": A self-signed certificate will encrypt communication between your server and any clients. However, because it is not signed by any of the trusted certificate authorities included with web browsers, users cannot use the certificate to validate the identity of your server automatically.")),(0,r.kt)("h3",{id:"creating-the-ssl-certificate"},"Creating the SSL Certificate"),(0,r.kt)("p",null,"TLS/SSL works by using a combination of a public certificate and a private key. The SSL key is kept secret on the server. It is used to encrypt content sent to clients. The SSL certificate is publicly shared with anyone requesting the content. It can be used to decrypt the content signed by the associated SSL key. I will create a self-signed key and certificate pair with OpenSSL in a single command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/docker-ingress/configuration/ssl/nginx-selfsigned.key -out /opt/docker-ingress/configuration/ssl/nginx-selfsigned.crt\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"openssl"),": This is the basic command line tool for creating and managing OpenSSL certificates, keys, and other files."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"req"),": This sub-command specifies that we want to use X.509 certificate signing request (CSR) management. The \u201cX.509\u201d is a public key infrastructure standard that SSL and TLS adheres to for its key and certificate management. We want to create a new X.509 cert, so we are using this sub-command."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-x509"),": This further modifies the previous sub-command by telling the utility that we want to make a self-signed certificate instead of generating a certificate signing request, as would normally happen."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-nodes"),": This tells OpenSSL to skip the option to secure our certificate with a passphrase. We need Nginx to be able to read the file, without user intervention, when the server starts up. A passphrase would prevent this from happening because we would have to enter it after every restart."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-days")," 365: This option sets the length of time that the certificate will be considered valid. We set it for one year here."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-newkey")," rsa:2048: This specifies that we want to generate a new certificate and a new key at the same time. We did not create the key that is required to sign the certificate in a previous step, so we need to create it along with the certificate. The rsa:2048 portion tells it to make an RSA key that is 2048 bits long."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-keyout"),": This line tells OpenSSL where to place the generated private key file that we are creating."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-out"),": This tells OpenSSL where to place the certificate that we are creating.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Generating a RSA private key\n......................+++++\n........+++++\nwriting new private key to '/opt/docker-ingress/configuration/ssl/nginx-selfsigned.key'\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:DE\nState or Province Name (full name) [Some-State]:NRW\nLocality Name (eg, city) []:Cologne\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:INSTAR Deutschland GmbH\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:192.168.2.111\nEmail Address []:m.polinowski@instar.com\n")),(0,r.kt)("p",null,"The most important line is the one that requests the Common Name (e.g. server FQDN or YOUR name). You need to enter the domain name associated with your server or your server\u2019s public IP address (in my case it is just a testing setup - so I will use my local IP address)."),(0,r.kt)("p",null,"This will create the certificate and public key in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ssl")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls -la ssl\ntotal 8.0K\n-rw-r--r-- 1 root root 1.5K Oct 11 15:29 nginx-selfsigned.crt\n-rw------- 1 root root 1.7K Oct 11 15:28 nginx-selfsigned.key\n")),(0,r.kt)("h3",{id:"perfect-forward-secrecy"},"Perfect Forward Secrecy"),(0,r.kt)("p",null,"While we are using OpenSSL, we should also create a strong ",(0,r.kt)("strong",{parentName:"p"},"Diffie-Hellman")," group, which is used in negotiating Perfect Forward Secrecy with clients. We can do this by typing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo openssl dhparam -out /opt/docker-ingress/configuration/ssl/dhparam.pem 4096\n")),(0,r.kt)("p",null,"This will take a while, but when it\u2019s done you will have a strong DH group at ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/docker-ingress/configuration/ssl/dhparam.pem")," that we can use in our configuration."),(0,r.kt)("h2",{id:"configuring-nginx-to-use-ssl"},"Configuring Nginx to Use SSL"),(0,r.kt)("p",null,"We have created our key and certificate files under a ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/docker-ingress/configuration/ssl")," directory. Now we just need to mount this directory into our NGINX container and modify our Nginx configuration to take advantage of these. In the previous step I already ended up with a docker compose file to start NGINX - I now have to add the SSL directory to it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"version: '3.8'\nservices:\n  ingress:\n    image: nginx:stable-alpine\n    container_name: ingress\n    networks:\n      - gateway\n    ports:\n      - '80:80'\n      - '443:443'\n    restart: unless-stopped\n    volumes:\n      - /opt/docker-ingress/configuration/conf.d:/etc/nginx/conf.d\n      - /opt/docker-ingress/configuration/ssl:/etc/nginx/ssl\n      - /opt/docker-ingress/configuration/nginx.conf:/etc/nginx/nginx.conf\n      - /opt/test-static/public:/opt/test-static/public\n      - /opt/downloads:/opt/downloads\n\nnetworks:\n  gateway: {}\n")),(0,r.kt)("h3",{id:"creating-a-configuration-snippet-pointing-to-the-ssl-key-and-certificate"},"Creating a Configuration Snippet Pointing to the SSL Key and Certificate"),(0,r.kt)("p",null,"I now create a new configuration file inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"conf.d")," directory that holds the paths for our certificate and public key:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"/etc/nginx/ssl/self-signed.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;\nssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;\n")),(0,r.kt)("h3",{id:"creating-a-configuration-snippet-with-strong-encryption-settings"},"Creating a Configuration Snippet with Strong Encryption Settings"),(0,r.kt)("p",null,"Next, we will create another snippet that will define some SSL settings. This will set Nginx up with a strong SSL cipher suite and enable some advanced features that will help keep our server secure."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"/etc/nginx/ssl/ssl-params.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ssl_protocols TLSv1.2;\nssl_prefer_server_ciphers on;\nssl_dhparam /etc/nginx/ssl/dhparam.pem;\nssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;\nssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0\nssl_session_timeout  10m;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off; # Requires nginx >= 1.5.9\nssl_stapling on; # Requires nginx >= 1.3.7\nssl_stapling_verify on; # Requires nginx => 1.3.7\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\n# Disable strict transport security for now. You can uncomment the following\n# line if you understand the implications.\n# add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";\nadd_header X-Frame-Options DENY;\nadd_header X-Content-Type-Options nosniff;\nadd_header X-XSS-Protection "1; mode=block";\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Check ",(0,r.kt)("a",{parentName:"p",href:"https://cipherli.st/"},"Cipherli")," for details.")),(0,r.kt)("p",null,"Because we are using a self-signed certificate, the SSL stapling will not be used. Nginx will output a warning, disable stapling for our self-signed cert, and continue to operate correctly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'2020/10/11 16:51:19 [warn] 1#1: "ssl_stapling" ignored, issuer certificate not found for certificate "/etc/nginx/ssl/nginx-selfsigned.crt"ingress    | nginx: [warn] "ssl_stapling" ignored, issuer certificate not found for certificate "/etc/nginx/ssl/nginx-selfsigned.crt"\n')),(0,r.kt)("h3",{id:"adjusting-the-nginx-configuration"},"Adjusting the Nginx Configuration"),(0,r.kt)("p",null,"In the previous step I created the following server block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"server {\n    listen       80 default_server;\n    listen       [::]:80 default_server;\n    server_name  localhost;\n    root         /opt/test-static/public;\n    index        index.html;\n\n    ...\n}\n")),(0,r.kt)("p",null,"I will be modifying this existing server block to serve SSL traffic on port 443, then create a new server block to respond on port 80 and automatically redirect traffic to port 443."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"server {\n    listen      443 ssl;\n    listen      [::]:443 ssl;\n    include     ssl/self-signed.conf;\n    include     ssl/ssl-params.conf;\n\n    server_name 192.168.2.111;\n\n    root         /opt/test-static/public;\n    index        index.html;\n\n    . . .\n}\n\n. . .\n\nserver {\n    listen 80;\n    listen [::]:80;\n\n    server_name 192.168.2.111;\n\n    return 302 https://$server_name$request_uri;\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note"),": We will use a ",(0,r.kt)("inlineCode",{parentName:"p"},"302")," redirect until we have verified that everything is working properly. Afterwards, we can change this to a permanent ",(0,r.kt)("inlineCode",{parentName:"p"},"301")," redirect.")),(0,r.kt)("h4",{id:"changing-to-a-permanent-redirect"},"Changing to a Permanent Redirect"),(0,r.kt)("p",null,"If your redirect worked correctly and you are sure you want to allow only encrypted traffic, you should modify the Nginx configuration to make the redirect permanent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"return 301 https://$server_name$request_uri;\n")))}u.isMDXComponent=!0},73469:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-b57dcf7a42ddd712383aadde6d3ef4c8.jpg"}}]);