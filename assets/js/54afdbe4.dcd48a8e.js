"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[78004],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?i.createElement(h,l(l({ref:t},u),{},{components:n})):i.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},84028:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=n(87462),r=(n(67294),n(3905));const a={sidebar_position:8040,slug:"2022-11-11",title:"Building a NTP/S Timeserver Client in Go with Gitlab CI",authors:"mpolinowski",tags:["Go","NTS"],description:"A Go client that can interact with a key-secured Chrony NTS timeserver."},l="Build a NTP Timeserver Client in Go",o={unversionedId:"Development/Go/2022-11-11-go-nts-client-ci/index",id:"Development/Go/2022-11-11-go-nts-client-ci/index",title:"Building a NTP/S Timeserver Client in Go with Gitlab CI",description:"A Go client that can interact with a key-secured Chrony NTS timeserver.",source:"@site/docs/Development/Go/2022-11-11-go-nts-client-ci/index.md",sourceDirName:"Development/Go/2022-11-11-go-nts-client-ci",slug:"/Development/Go/2022-11-11-go-nts-client-ci/2022-11-11",permalink:"/docs/Development/Go/2022-11-11-go-nts-client-ci/2022-11-11",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2022-11-11-go-nts-client-ci/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"},{label:"NTS",permalink:"/docs/tags/nts"}],version:"current",sidebarPosition:8040,frontMatter:{sidebar_position:8040,slug:"2022-11-11",title:"Building a NTP/S Timeserver Client in Go with Gitlab CI",authors:"mpolinowski",tags:["Go","NTS"],description:"A Go client that can interact with a key-secured Chrony NTS timeserver."},sidebar:"tutorialSidebar",previous:{title:"Go WebAssembly",permalink:"/docs/Development/Go/2022-12-26-go-webassembly/2022-12-26"},next:{title:"Go OAuth2 Server",permalink:"/docs/Development/Go/2022-10-15-go-oauth2-server/2022-10-15"}},s={},c=[{value:"Test Build the Binary",id:"test-build-the-binary",level:2},{value:"Run the Binary",id:"run-the-binary",level:3},{value:"Use Gitlab CI to Build the Binary",id:"use-gitlab-ci-to-build-the-binary",level:2}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"build-a-ntp-timeserver-client-in-go"},"Build a NTP Timeserver Client in Go"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shenzhen, China",src:n(70078).Z,width:"1500",height:"546"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build-a-ntp-timeserver-client-in-go"},"Build a NTP Timeserver Client in Go"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#test-build-the-binary"},"Test Build the Binary"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#run-the-binary"},"Run the Binary")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#use-gitlab-ci-to-build-the-binary"},"Use Gitlab CI to Build the Binary"))))),(0,r.kt)("p",null,"I used Docker to build a ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.com/hacklunch/ntsclient"},"Go-based NTS Timeserver Server")," by ",(0,r.kt)("a",{parentName:"p",href:"https://gitlab.com/hacklunch"},"@hacklunch")," and deployed the service using Hashicorp Nomad. Now I need to compile the binary for an ARM environment so that it can be used on an IoT device."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Related")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Development/Go/2022-10-04-go-ntp-client/2022-10-04"},"Build a NTP Timeserver Client in Go")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/Development/Go/2022-10-05-go-reducing-binary-size/2022-10-05"},"Cross-compiling with Go")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline/2022-11-10"},"Go Gitlab CI Pipeline")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/DevOps/Hashicorp/2022-09-22--nomad-nts-timeserver/2022-09-22"},"Secure Timeserver - Deploying a NTS Server using Hashicorp Nomad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/mpolinowski/nomad-nts-chrony"},"Chrony NTS with Hashicorp Nomad (Github Repo)"))),(0,r.kt)("h2",{id:"test-build-the-binary"},"Test Build the Binary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gitlab.com/hacklunch/ntsclient"},"Download the Source Code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://go.dev/doc/install"},"Install Go")," (",(0,r.kt)("inlineCode",{parentName:"li"},">= go version go1.19.1"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/upx/upx/releases"},"Install UPX")," (",(0,r.kt)("inlineCode",{parentName:"li"},">= UPX 3.96"),")"),(0,r.kt)("li",{parentName:"ul"},"Create and run ",(0,r.kt)("inlineCode",{parentName:"li"},"build.sh")," - will output ",(0,r.kt)("inlineCode",{parentName:"li"},"amd64"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"arm64")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"arm")," version. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"_upx")," for production.")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"build.sh")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'#!/usr/bin/bash\narchs=(amd64 arm64 arm)\n\nfor arch in ${archs[@]}\ndo\n        env GOOS=linux GOARCH=${arch} go build -ldflags "-s -w" -o build/ntsclient_${arch}\n        upx --ultra-brute -obuild/ntsclient_upx_${arch} build/ntsclient_${arch}\ndone\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./build.sh\n\n                       Ultimate Packer for eXecutables\n                          Copyright (C) 1996 - 2020\nUPX git-d7ba31+ Markus Oberhumer, Laszlo Molnar & John Reiser   Jan 23rd 2020\n\n        File size         Ratio      Format      Name\n   --------------------   ------   -----------   -----------\n   5554176 ->   1734704   31.23%   linux/amd64   ntsclient_upx_amd64           \n\nPacked 1 file.\n\n        File size         Ratio      Format      Name\n   --------------------   ------   -----------   -----------\n   5242880 ->   1494584   28.51%   linux/arm64   ntsclient_upx_arm64           \n\nPacked 1 file.\n\n        File size         Ratio      Format      Name\n   --------------------   ------   -----------   -----------\n   5373952 ->   1443108   26.85%    linux/arm    ntsclient_upx_arm \n")),(0,r.kt)("h3",{id:"run-the-binary"},"Run the Binary"),(0,r.kt)("p",null,"ntsclient does not output anything when querying and setting the time, unless something goes wrong (or debug output is turned on). An example configuration file looks like:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"ntsclient.toml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},'# NTS Server\nserver="time.cloudflare.com"\n# Interval in seconds between queries\ninterval=1000\n\n# Alternative NTS Server\n\n# https://netnod.se\n#server="nts.ntp.se"\n\n# https://nts.time.nl/\n#server="nts.time.nl"\n\n# Test servers listed on https://docs.ntpsec.org/latest/NTS-QuickStart.html\n#server="ntp1.glypnod.com"\n#server="ntp2.glypnod.com"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./ntsclient --config ./ntsclient.toml\nCould not set system time: operation not permitted\n\nsudo ./ntsclient --config ./ntsclient.toml\n")),(0,r.kt)("p",null,"To switch on the debug mode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo ./ntsclient --config ./ntsclient.toml --debug\n")),(0,r.kt)("h2",{id:"use-gitlab-ci-to-build-the-binary"},"Use Gitlab CI to Build the Binary"),(0,r.kt)("p",null,"The following CI file generates the ARM version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ntsclient")," and stores it as an artifact to be used in a firmware build pipeline:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},".gitlab-ci.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"image: golang:latest\n\nvariables:\n  REPO: my.gitlab.com\n  GROUP: firmware\n  PROJECT: ntsclient\n  ARCH: arm\n\nstages:\n - build\n\nbefore_script:\n  # Something strange to make Gitlab like Go\n  - mkdir -p $GOPATH/src/$REPO/$GROUP $GOPATH/src/_/builds\n  - cp -r $CI_PROJECT_DIR $GOPATH/src/$REPO/$GROUP/$PROJECT\n  - ln -s $GOPATH/src/$REPO/$GROUP $GOPATH/src/_/builds/$GROUP\n  # Use UPX to compress the binary after build\n  # I downloaded/un-tar'ed the latest release into the repo root dir\n  - cp ./upx-4.0.0-amd64_linux/upx /usr/bin/npx\n  - chmod +x /usr/bin/npx\n  # Make sure all Go build dependencies are available\n  - go get -v -d ./...\n\nbuild:\n  stage: build\n  script:\n    - env GOOS=linux GOARCH=$ARCH go build -ldflags \"-s -w\" -o ntsclient_src\n    - /usr/bin/npx --ultra-brute -ontsclient ntsclient_src\n  only:\n    - main\n  artifacts:\n    paths:\n      # Push the binary into your repo's build artifacts\n      - /builds/firmware/ntsclient/ntsclient\n    expire_in: 1 day\n")))}p.isMDXComponent=!0},70078:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-0795219c47cded4f1a1480a5f18e4c60.jpg"}}]);