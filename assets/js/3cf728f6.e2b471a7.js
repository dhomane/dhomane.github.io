"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[42982],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return t?i.createElement(f,a(a({ref:n},p),{},{components:t})):i.createElement(f,a({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},21283:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=t(87462),r=(t(67294),t(3905));const o={sidebar_position:8090,slug:"2022-03-26",title:"MQTT Clients",authors:"mpolinowski",tags:["LINUX"]},a=void 0,l={unversionedId:"IoT-and-Machine-Learning/MQTT/2022-03-26--mqtt-clients/index",id:"IoT-and-Machine-Learning/MQTT/2022-03-26--mqtt-clients/index",title:"MQTT Clients",description:"Guangzhou, China",source:"@site/docs/IoT-and-Machine-Learning/MQTT/2022-03-26--mqtt-clients/index.md",sourceDirName:"IoT-and-Machine-Learning/MQTT/2022-03-26--mqtt-clients",slug:"/IoT-and-Machine-Learning/MQTT/2022-03-26--mqtt-clients/2022-03-26",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-03-26--mqtt-clients/2022-03-26",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/MQTT/2022-03-26--mqtt-clients/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8090,frontMatter:{sidebar_position:8090,slug:"2022-03-26",title:"MQTT Clients",authors:"mpolinowski",tags:["LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Building Eclipse Mosquitto v2 from Source",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-03-27--build-mosquitto-from-source/2022-03-27"},next:{title:"Mosquitto v2 MQTT Broker on Debian Bullseye",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-02-01--mosquitto-2-broker/2022-02-01"}},c={},s=[{value:"Golang",id:"golang",level:2},{value:"Project Setup",id:"project-setup",level:3},{value:"Connect the Client",id:"connect-the-client",level:3},{value:"Subscribe to a Topic",id:"subscribe-to-a-topic",level:3},{value:"Publish to a Topic",id:"publish-to-a-topic",level:3},{value:"Encryption",id:"encryption",level:3},{value:"Full Code Example (no-TLS)",id:"full-code-example-no-tls",level:3},{value:"Full Code Example (self-signed TLS Certificate)",id:"full-code-example-self-signed-tls-certificate",level:3},{value:"Full Code Example (CA TLS Certificate)",id:"full-code-example-ca-tls-certificate",level:3}],p={toc:s};function m(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Guangzhou, China",src:t(62407).Z,width:"1500",height:"583"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#golang"},"Golang"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#project-setup"},"Project Setup")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connect-the-client"},"Connect the Client")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#subscribe-to-a-topic"},"Subscribe to a Topic")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#publish-to-a-topic"},"Publish to a Topic")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#encryption"},"Encryption")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#full-code-example-no-tls"},"Full Code Example (no-TLS)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#full-code-example-self-signed-tls-certificate"},"Full Code Example (self-signed TLS Certificate)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#full-code-example-ca-tls-certificate"},"Full Code Example (CA TLS Certificate)"))))),(0,r.kt)("h2",{id:"golang"},"Golang"),(0,r.kt)("h3",{id:"project-setup"},"Project Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo $GOPATH\n/home/myuser/go\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /home/myuser/go/src/go-mqtt && cd /home/myuser/go/src/go-mqtt\ngo mod init go-mqtt\ngo get github.com/eclipse/paho.mqtt.golang@latest\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"cat go.mod\n\nmodule go-mqtt\n\ngo 1.18\n\nrequire (\n        github.com/eclipse/paho.mqtt.golang v1.3.5 // indirect\n        github.com/gorilla/websocket v1.4.2 // indirect\n        golang.org/x/net v0.0.0-20200425230154-ff2c4b7c35a0 // indirect\n)\n")),(0,r.kt)("h3",{id:"connect-the-client"},"Connect the Client"),(0,r.kt)("p",null,"The first step is to configure the client with the broker address, port, client id, username, etc. This is done in ",(0,r.kt)("strong",{parentName:"p"},"Paho MQTT")," via ",(0,r.kt)("inlineCode",{parentName:"p"},"mqtt.NewClientOptions"),". I am going to set three callbacks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OnConnect"),": called when the client is connected to the server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OnConnectionLost"),": called when the client is disconnected from the server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MessageHandler"),": called when a message is received from the server.")),(0,r.kt)("p",null,"The MQTT Broker I am using is an INSTAR IP camera on the local IP ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.2.117"),":"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"MQTT Clients",src:t(82138).Z,width:"1186",height:"708"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano /home/myuser/go/src/go-mqtt/main.go\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "time"\n\n    mqtt "github.com/eclipse/paho.mqtt.golang"\n)\n\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\n    fmt.Printf("%s received on topic %s\\n", msg.Payload(), msg.Topic())\n}\n\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\n    fmt.Println("Connected")\n}\n\nvar connectionLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\n    fmt.Printf("Connection Lost: %s\\n", err.Error())\n}\n\nvar broker = "192.168.2.117"\nvar port = 1883\nvar now = time.Now().Format(time.RFC850)\n\nfunc main() {\n    // client configuration\n    options := mqtt.NewClientOptions()\n    options.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\n    options.SetClientID("go_mqtt_client")\n  options.SetUsername("admin")\n  options.SetPassword("instar")\n\n    // mqtt event callbacks\n    options.SetDefaultPublishHandler(messagePubHandler)\n    options.OnConnect = connectHandler\n    options.OnConnectionLost = connectionLostHandler\n}\n')),(0,r.kt)("p",null,"To connect call ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Connect()"),", wait for the connection and handle potential errors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"  // connect the client\n    client := mqtt.NewClient(options)\n    token := client.Connect()\n    if token.Wait() && token.Error() != nil {\n      panic(token.Error())\n    }\n")),(0,r.kt)("h3",{id:"subscribe-to-a-topic"},"Subscribe to a Topic"),(0,r.kt)("p",null,"To subscribe, call the method ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Subscribe")," with three parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topic"),": string with the subscription topic"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"qos"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (",(0,r.kt)("em",{parentName:"li"},"fire-and-forget"),"), ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," (",(0,r.kt)("em",{parentName:"li"},"re-send if missed"),") or ",(0,r.kt)("inlineCode",{parentName:"li"},"2")," (",(0,r.kt)("em",{parentName:"li"},"make sure it is only received once"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"callback"),": a function to be called when a message in this topic is received. It can be nil so only the default handler will be called")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'  // subscribe topic\n    topic := "client/go/timestamp"\n    token = client.Subscribe(topic, 1, nil)\n    token.Wait()\n    fmt.Println("Subscribed to topic %s\\n", topic)\n')),(0,r.kt)("h3",{id:"publish-to-a-topic"},"Publish to a Topic"),(0,r.kt)("p",null,"To publish a message, call the method ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Publish"),". It receives four parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"topic"),": same topic as before - I am going to send a timestamp for 10-times before disconnecting"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"qos"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," (",(0,r.kt)("em",{parentName:"li"},"fire-and-forget"),"), ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," (",(0,r.kt)("em",{parentName:"li"},"re-send if missed"),") or ",(0,r.kt)("inlineCode",{parentName:"li"},"2")," (",(0,r.kt)("em",{parentName:"li"},"make sure it is only received once"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"retained"),": boolean indicating whether the message must be retained by the server"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload"),": message to be publish under the topic")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'  num := 10\n    for i := 0; i < num; i++ {\n        text := fmt.Sprintf("Message: %s", now)\n        token = client.Publish(topic, 0, false, text)\n        token.Wait()\n        time.Sleep(time.Second)\n    }\n\n    client.Disconnect(100)\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"MQTT Clients",src:t(63491).Z,width:"1007",height:"469"})),(0,r.kt)("h3",{id:"encryption"},"Encryption"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"tls.Config")," with your broker certificates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func NewTlsConfig() *tls.Config {\n    certpool := x509.NewCertPool()\n    cert, err := ioutil.ReadFile("cert/pcert.pem")\n    if err != nil {\n        log.Fatalln(err.Error())\n    }\n\n    certpool.AppendCertsFromPEM(cert)\n    return &tls.Config{\n        InsecureSkipVerify: true,\n        RootCAs:            certpool,\n    }\n}\n')),(0,r.kt)("p",null,"To use your INSTAR IP cameras broker with encryption, click on ",(0,r.kt)("strong",{parentName:"p"},"Download Camera's certificate")," in the MQTT configuration (s. first screenshot above) and download it to ",(0,r.kt)("inlineCode",{parentName:"p"},"cert/"),". Or use the ",(0,r.kt)("strong",{parentName:"p"},"client.crt")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/IoT-and-Machine-Learning/MQTT/2022-02-01--mosquitto-2-broker/2022-02-01#creating-self-signed-certificates"},"generated here"),"."),(0,r.kt)("p",null,"E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"-----BEGIN CERTIFICATE-----\nMIIEAzCCAuugAwIBAgIUBY1hlCGvdj4NhBXkZ/uLUZNILAwwDQYJKoZIhvcNAQEL\nBQAwgZAxCzAJBgNVBAYTAkdCMRcwFQYDVQQIDA5Vbml0ZWQgS2luZ2RvbTEOMAwG\nA1UEBwwFRGVyYnkxEjAQBgNVBAoMCU1vc3F1aXR0bzELMAkGA1UECwwCQ0ExFjAU\nBgNVBAMMDW1vc3F1aXR0by5vcmcxHzAdBgkqhkiG9w0BCQEWEHJvZ2VyQGF0Y2hv\nby5vcmcwHhcNMjAwNjA5MTEwNjM5WhcNMzAwNjA3MTEwNjM5WjCBkDELMAkGA1UE\nBhMCR0IxFzAVBgNVBAgMDlVuaXRlZCBLaW5nZG9tMQ4wDAYDVQQHDAVEZXJieTES\nMBAGA1UECgwJTW9zcXVpdHRvMQswCQYDVQQLDAJDQTEWMBQGA1UEAwwNbW9zcXVp\ndHRvLm9yZzEfMB0GCSqGSIb3DQEJARYQcm9nZXJAYXRjaG9vLm9yZzCCASIwDQYJ\nKoZIhvcNAQEBBQADggEPADCCAQoCggEBAME0HKmIzfTOwkKLT3THHe+ObdizamPg\nUZmD64Tf3zJdNeYGYn4CEXbyP6fy3tWc8S2boW6dzrH8SdFf9uo320GJA9B7U1FW\nTe3xda/Lm3JFfaHjkWw7jBwcauQZjpGINHapHRlpiCZsquAthOgxW9SgDgYlGzEA\ns06pkEFiMw+qDfLo/sxFKB6vQlFekMeCymjLCbNwPJyqyhFmPWwio/PDMruBTzPH\n3cioBnrJWKXc3OjXdLGFJOfj7pP0j/dr2LH72eSvv3PQQFl90CZPFhrCUcRHSSxo\nE6yjGOdnz7f6PveLIB574kQORwt8ePn0yidrTC1ictikED3nHYhMUOUCAwEAAaNT\nMFEwHQYDVR0OBBYEFPVV6xBUFPiGKDyo5V3+Hbh4N9YSMB8GA1UdIwQYMBaAFPVV\n6xBUFPiGKDyo5V3+Hbh4N9YSMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL\nBQADggEBAGa9kS21N70ThM6/Hj9D7mbVxKLBjVWe2TPsGfbl3rEDfZ+OKRZ2j6AC\n6r7jb4TZO3dzF2p6dgbrlU71Y/4K0TdzIjRj3cQ3KSm41JvUQ0hZ/c04iGDg/xWf\n+pp58nfPAYwuerruPNWmlStWAXf0UTqRtg4hQDWBuUFDJTuWuuBvEXudz74eh/wK\nsMwfu1HFvjy5Z0iMDU8PUDepjVolOCue9ashlS4EB5IECdSR2TItnAIiIwimx839\nLdUdRudafMu5T5Xma182OC0/u/xRlEm+tvKGGmfFcN0piqVl8OrSPBgIlb+1IKJE\nm/XriWr/Cq4h/JfB7NTsezVslgkBaoU=\n-----END CERTIFICATE-----\n")),(0,r.kt)("p",null,"And add this configuration to the options by the method ",(0,r.kt)("strong",{parentName:"p"},"SetTLSConfig"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    // client configuration\n    tlsConfig := NewTlsConfig()\n    opts := mqtt.NewClientOptions()\n    opts.SetTLSConfig(tlsConfig)\n    // use tcp:// instead of ssl://  for none-tls\n    // opts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\n    opts.AddBroker(fmt.Sprintf("ssl://%s:%d", broker, port))\n    opts.SetClientID("go_mqtt_client")\n    opts.SetUsername("admin")\n    opts.SetPassword("instar")\n')),(0,r.kt)("h3",{id:"full-code-example-no-tls"},"Full Code Example (no-TLS)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "log"\n    "time"\n\n    mqtt "github.com/eclipse/paho.mqtt.golang"\n)\n\nvar port = 1883\nvar broker = "192.168.2.117"\nvar topic = "client/go/timestamp"\nvar now = time.Now().Format(time.RFC850)\n\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\n    fmt.Printf("%s received on topic %s\\n", msg.Payload(), msg.Topic())\n}\n\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\n    fmt.Println("Connected")\n}\n\nvar connectionLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\n    fmt.Printf("Connection Lost: %s\\n", err.Error())\n}\n\nfunc main() {\n    // client configuration\n    opts := mqtt.NewClientOptions()\n    opts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\n    opts.SetClientID("go_mqtt_client")\n    opts.SetUsername("admin")\n    opts.SetPassword("instar")\n\n    // mqtt event callbacks\n    opts.SetDefaultPublishHandler(messagePubHandler)\n    opts.OnConnect = connectHandler\n    opts.OnConnectionLost = connectionLostHandler\n\n    // connect the client\n    client := mqtt.NewClient(opts)\n    token := client.Connect()\n    if token.Wait() && token.Error() != nil {\n        panic(token.Error())\n    }\n\n    subscribe(client)\n    publish(client)\n\n    client.Disconnect(100)\n}\n\n// subscribe to topic\nfunc subscribe(client mqtt.Client) {\n    token := client.Subscribe(topic, 1, nil)\n    token.Wait()\n    fmt.Printf("Subscribed to topic %s\\n", topic)\n}\n\n// publish to topic\nfunc publish(client mqtt.Client) {\n    num := 10\n    for i := 0; i < num; i++ {\n        text := fmt.Sprintf("Message %s", now)\n        token := client.Publish(topic, 0, false, text)\n        token.Wait()\n        time.Sleep(time.Second)\n    }\n}\n')),(0,r.kt)("h3",{id:"full-code-example-self-signed-tls-certificate"},"Full Code Example (self-signed TLS Certificate)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "crypto/tls"\n    "crypto/x509"\n    "fmt"\n    "io/ioutil"\n    "log"\n    "time"\n\n    mqtt "github.com/eclipse/paho.mqtt.golang"\n)\n\nvar port = 8883\nvar broker = "192.168.2.117"\nvar topic = "client/go/timestamp"\nvar clientID = "go_mqtt_client"\nvar username = "admin"\nvar password = "instar"\nvar certificate = "cert/pcert.pem"\nvar now = time.Now().Format(time.RFC850)\n\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\n    fmt.Printf("%s received on topic %s\\n", msg.Payload(), msg.Topic())\n}\n\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\n    fmt.Println("Connected")\n}\n\nvar connectionLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\n    fmt.Printf("Connection Lost: %s\\n", err.Error())\n}\n\nfunc main() {\n    // client configuration\n    tlsConfig := NewTlsConfig()\n    opts := mqtt.NewClientOptions()\n    opts.SetTLSConfig(tlsConfig)\n    opts.AddBroker(fmt.Sprintf("ssl://%s:%d", broker, port))\n    opts.SetClientID(clientID)\n    opts.SetUsername(username)\n    opts.SetPassword(password)\n\n    // mqtt event callbacks\n    opts.SetDefaultPublishHandler(messagePubHandler)\n    opts.OnConnect = connectHandler\n    opts.OnConnectionLost = connectionLostHandler\n\n    // connect the client\n    client := mqtt.NewClient(opts)\n    token := client.Connect()\n    if token.Wait() && token.Error() != nil {\n        panic(token.Error())\n    }\n\n    subscribe(client)\n    publish(client)\n\n    client.Disconnect(100)\n}\n\n// subscribe to topic\nfunc subscribe(client mqtt.Client) {\n    token := client.Subscribe(topic, 1, nil)\n    token.Wait()\n    fmt.Printf("Subscribed to topic %s\\n", topic)\n}\n\n// publish to topic\nfunc publish(client mqtt.Client) {\n    num := 10\n    for i := 0; i < num; i++ {\n        text := fmt.Sprintf("Message %s", now)\n        token := client.Publish(topic, 0, false, text)\n        token.Wait()\n        time.Sleep(time.Second)\n    }\n}\n\n// self-signed Cert\nfunc NewTlsConfig() *tls.Config {\n    certpool := x509.NewCertPool()\n    cert, err := ioutil.ReadFile(certificate)\n    if err != nil {\n        log.Fatalln(err.Error())\n    }\n\n    certpool.AppendCertsFromPEM(cert)\n    return &tls.Config{\n        InsecureSkipVerify: true,\n        RootCAs:            certpool,\n    }\n}\n')),(0,r.kt)("h3",{id:"full-code-example-ca-tls-certificate"},"Full Code Example (CA TLS Certificate)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "crypto/tls"\n    "crypto/x509"\n    "fmt"\n    "io/ioutil"\n    "time"\n\n    MQTT "github.com/eclipse/paho.mqtt.golang"\n)\n\nvar port = 1888\nvar portSSL = 8883\nvar broker = "192.168.2.111"\nvar topic = "go/client/hi"\nvar clientID = "go_mqtt_client"\nvar username = "admin"\nvar password = "instar"\nvar caCert = "cert/instar/ca.crt"\nvar clientCert = "cert/instar/client.crt"\nvar clientKey = "cert/instar/client.key"\nvar now = time.Now().Format(time.RFC850)\n\nfunc NewTLSConfig() *tls.Config {\n    // Import trusted certificates from CAfile.pem.\n    // Alternatively, manually add CA certificates to\n    // default openssl CA bundle.\n    certpool := x509.NewCertPool()\n    pemCerts, err := ioutil.ReadFile(caCert)\n    if err == nil {\n        certpool.AppendCertsFromPEM(pemCerts)\n    }\n\n    // Import client certificate/key pair\n    cert, err := tls.LoadX509KeyPair(clientCert, clientKey)\n    if err != nil {\n        panic(err)\n    }\n\n    // Just to print out the client certificate..\n    cert.Leaf, err = x509.ParseCertificate(cert.Certificate[0])\n    if err != nil {\n        panic(err)\n    }\n    // fmt.Println(cert.Leaf)\n\n    // Create tls.Config with desired tls properties\n    return &tls.Config{\n        // RootCAs = certs used to verify server cert.\n        RootCAs: certpool,\n        // ClientAuth = whether to request cert from server.\n        // Since the server is set up for SSL, this happens\n        // anyways.\n        ClientAuth: tls.NoClientCert,\n        // ClientCAs = certs used to validate client cert.\n        ClientCAs: nil,\n        // InsecureSkipVerify = verify that cert contents\n        // match server. IP matches what is in cert etc.\n        InsecureSkipVerify: true,\n        // Certificates = list of certs client sends to server.\n        Certificates: []tls.Certificate{cert},\n    }\n}\n\nvar f MQTT.MessageHandler = func(client MQTT.Client, msg MQTT.Message) {\n    fmt.Printf("TOPIC: %s\\n", msg.Topic())\n    fmt.Printf("MSG: %s\\n", msg.Payload())\n}\n\nfunc main() {\n    tlsconfig := NewTLSConfig()\n\n    opts := MQTT.NewClientOptions()\n    // opts.AddBroker(fmt.Sprintf("mqtt://%s:%d", broker, port))\n    opts.AddBroker(fmt.Sprintf("mqtts://%s:%d", broker, portSSL))\n    opts.SetClientID(clientID).SetTLSConfig(tlsconfig)\n    opts.SetDefaultPublishHandler(f)\n    opts.SetUsername(username)\n    opts.SetPassword(password)\n\n    // Start the connection\n    c := MQTT.NewClient(opts)\n    if token := c.Connect(); token.Wait() && token.Error() != nil {\n        panic(token.Error())\n    }\n\n    c.Subscribe(topic, 0, nil)\n\n    i := 0\n    for range time.Tick(time.Duration(1) * time.Second) {\n        if i == 5 {\n            break\n        }\n        text := fmt.Sprintf("%d Timestamp: %s", i, now)\n        c.Publish(topic, 0, false, text)\n        i++\n    }\n\n    c.Disconnect(250)\n}\n')))}m.isMDXComponent=!0},82138:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/MQTT_Clients_01-3ff734462657854e250377278493dd2c.png"},63491:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/MQTT_Clients_02-091bd40fa0ea5c88b7791dbc5326fbd4.png"},62407:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-8ced3c54d38a6194434c5e7d8e5c77ba.jpg"}}]);