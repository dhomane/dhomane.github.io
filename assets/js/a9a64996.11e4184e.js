"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[23846],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>u});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),c=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=c(e.components);return t.createElement(s.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,g=p["".concat(s,".").concat(u)]||p[u]||m[u]||o;return n?t.createElement(g,l(l({ref:a},d),{},{components:n})):t.createElement(g,l({ref:a},d))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},41371:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=n(87462),r=(n(67294),n(3905));const o={sidebar_position:9020,slug:"2021-09-23",title:"Getting started with Go and React - PostgreSQL",authors:"mpolinowski",tags:["Go","Databases"]},l=void 0,i={unversionedId:"Development/Go/2021-09-23--golang-react-starter-part-iii/index",id:"Development/Go/2021-09-23--golang-react-starter-part-iii/index",title:"Getting started with Go and React - PostgreSQL",description:"Shenzhen, China",source:"@site/docs/Development/Go/2021-09-23--golang-react-starter-part-iii/index.md",sourceDirName:"Development/Go/2021-09-23--golang-react-starter-part-iii",slug:"/Development/Go/2021-09-23--golang-react-starter-part-iii/2021-09-23",permalink:"/docs/Development/Go/2021-09-23--golang-react-starter-part-iii/2021-09-23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2021-09-23--golang-react-starter-part-iii/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"},{label:"Databases",permalink:"/docs/tags/databases"}],version:"current",sidebarPosition:9020,frontMatter:{sidebar_position:9020,slug:"2021-09-23",title:"Getting started with Go and React - PostgreSQL",authors:"mpolinowski",tags:["Go","Databases"]},sidebar:"tutorialSidebar",previous:{title:"Getting started with Go and React - React & REST API's",permalink:"/docs/Development/Go/2021-09-24--golang-react-starter-part-iv/2021-09-24"},next:{title:"Getting started with Go and React - API Routes",permalink:"/docs/Development/Go/2021-09-22--golang-react-starter-part-ii/2021-09-22"}},s={},c=[{value:"Setting the Database",id:"setting-the-database",level:2},{value:"Setup",id:"setup",level:3},{value:"Create a Database for your Application",id:"create-a-database-for-your-application",level:3},{value:"Create Tables",id:"create-tables",level:3},{value:"Camera",id:"camera",level:4},{value:"Camera Model",id:"camera-model",level:4},{value:"Locations",id:"locations",level:4},{value:"Adding Data",id:"adding-data",level:3},{value:"Camera",id:"camera-1",level:4},{value:"Camera Model",id:"camera-model-1",level:4},{value:"Locations",id:"locations-1",level:4},{value:"Connecting your Application",id:"connecting-your-application",level:2},{value:"Postgres Driver",id:"postgres-driver",level:3},{value:"Connecting",id:"connecting",level:3},{value:"Add Database to Route Handler",id:"add-database-to-route-handler",level:3},{value:"Query Single Camera",id:"query-single-camera",level:4},{value:"Add Location to Camera Query",id:"add-location-to-camera-query",level:4},{value:"Query All Cameras",id:"query-all-cameras",level:4}],d={toc:c};function m(e){let{components:a,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,o,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shenzhen, China",src:n(48723).Z,width:"1500",height:"441"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Creating an REST API backend in Go and connecting it to a React.js frontend.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"Part I - Webservice, Routing and Status Log")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"Part II - API Routes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"Part III - PostgreSQL"))),(0,r.kt)("p",null,"I want to prototype a Go backend for a ",(0,r.kt)("strong",{parentName:"p"},"Weather Cam")," tool. The backend should hold all the information related to all cameras and serve them on different routes. The backend then needs to be connected to a React.js frontend that displays the JSON data that is being served as well as to allow to add / delete cameras."),(0,r.kt)("h2",{id:"setting-the-database"},"Setting the Database"),(0,r.kt)("h3",{id:"setup"},"Setup"),(0,r.kt)("p",null,"I am going to use the official Docker image to set up the SQL Database on a Debian Bullseye server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --rm \\\n    --name postgres \\\n    -e POSTGRES_PASSWORD=secretpassword \\\n    -p 5432:5432 \\\n    postgres:14\n")),(0,r.kt)("p",null,"I can now access the container and connect to the Postgres CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'docker exec -ti -u postgres postgres psql\n\npsql (14.0 (Debian 14.0-1.pgdg110+1))\nType "help" for help.\n\npostgres=#\n')),(0,r.kt)("h3",{id:"create-a-database-for-your-application"},"Create a Database for your Application"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CREATE DATABASE gocam;\n")),(0,r.kt)("p",null,"Switch to using the new message_boards table instead of the default postgres:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'\\connect gocam;\nYou are now connected to database "gocam" as user "postgres".\n')),(0,r.kt)("h3",{id:"create-tables"},"Create Tables"),(0,r.kt)("p",null,"We build 3 models that for the data that our app should handle:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./models/models.go")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Camera"),(0,r.kt)("li",{parentName:"ul"},"CameraModel"),(0,r.kt)("li",{parentName:"ul"},"Locations")),(0,r.kt)("p",null,"We now need 3 tables in our database that can hold this data."),(0,r.kt)("h4",{id:"camera"},"Camera"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE camera (\n    id INTEGER PRIMARY KEY UNIQUE GENERATED ALWAYS AS IDENTITY,\n    name VARCHAR ( 25 ) UNIQUE NOT NULL,\n    usr VARCHAR ( 25 ) NOT NULL,\n    pass VARCHAR ( 25 ) NOT NULL,\n    ip VARCHAR ( 50 ) UNIQUE NOT NULL,\n    created TIMESTAMP NOT NULL,\n    updated TIMESTAMP,\n    rating INT,\n    location VARCHAR ( 50 ) NOT NULL\n);\n")),(0,r.kt)("h4",{id:"camera-model"},"Camera Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE camera_model (\n    id INT REFERENCES camera(id) ON DELETE CASCADE,\n    model VARCHAR ( 25 ) NOT NULL,\n    lense VARCHAR ( 25 ) NOT NULL,\n    res VARCHAR ( 10 ) NOT NULL,\n    created TIMESTAMP NOT NULL,\n    updated TIMESTAMP\n);\n")),(0,r.kt)("h4",{id:"locations"},"Locations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE camera_locations (\n    id INT REFERENCES camera(id) ON DELETE CASCADE,\n    location VARCHAR ( 50 ),\n    cid VARCHAR ( 15 ),\n    lid VARCHAR ( 15 ),\n    created TIMESTAMP NOT NULL,\n    updated TIMESTAMP\n);\n")),(0,r.kt)("h3",{id:"adding-data"},"Adding Data"),(0,r.kt)("h4",{id:"camera-1"},"Camera"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO camera\n  (name, usr, pass, ip, created, updated, rating, location)\nVALUES\n  ('Mountain View', 'admin', 'instar', '192.168.2.10', NOW() - interval '123 days', NOW(), 3, 'HK'),\n  ('Harbour East', 'admin', 'instar', '192.168.2.19', NOW() - interval '143 days', NOW(), 5, 'HK'),\n  ('Harbour West', 'admin', 'instar', '192.168.2.24', NOW() - interval '156 days', NOW(), 3, 'HK'),\n  ('Beachfront', 'admin', 'instar', '192.168.2.117', NOW() - interval '32 days', NOW(), 2, 'HK'),\n  ('Downtown', 'admin', 'instar', '192.168.178.70', NOW() - interval '467 days', NOW(), 4, 'HK'),\n  ('Central Park', 'admin', 'instar', '192.168.178.42', NOW() - interval '435 days', NOW(), 2, 'HK'),\n  ('Terminal', 'admin', 'instar', '192.168.178.52', NOW() - interval '213 days', NOW(), 2, 'HK'),\n  ('Skyline', 'admin', 'instar', '192.168.178.67', NOW() - interval '234 days', NOW(), 5, 'HK'),\n  ('Plaza', 'admin', 'instar', '192.168.178.249', NOW() - interval '7 days', NOW(), 3, 'HK');\n")),(0,r.kt)("h4",{id:"camera-model-1"},"Camera Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO camera_model\n  (id, model, lense, res, created, updated)\nVALUES\n  ( 1, 'IN-9020', '4.2mm', '1080p', NOW() - interval '53 days', NOW() ),\n  ( 2, 'IN-9008', '4.2mm', '1080p', NOW() - interval '84 days', NOW() ),\n  ( 3, 'IN-9008', '4.2mm', '1080p', NOW() - interval '89 days', NOW() ),\n  ( 4, 'IN-9408', '4.2mm', '1440p', NOW() - interval '97 days', NOW() ),\n  ( 5, 'IN-9020', '4.2mm', '1080p', NOW() - interval '69 days', NOW() ),\n  ( 6, 'IN-9008', '4.2mm', '1080p', NOW() - interval '76 days', NOW() ),\n  ( 7, 'IN-9408', '4.2mm', '1440p', NOW() - interval '78 days', NOW() ),\n  ( 8, 'IN-9020', '4.2mm', '1080p', NOW() - interval '56 days', NOW() ),\n  ( 9, 'IN-9408', '4.2mm', '1440p', NOW() - interval '87 days', NOW() );\n")),(0,r.kt)("h4",{id:"locations-1"},"Locations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO camera_locations\n  (id, location, cid, lid, created, updated)\nVALUES\n  ( 1, 'Mountain View', 'INSTAR-0001', 'HK-0001', NOW() - interval '32 days', NOW() ),\n  ( 2, 'Harbour East', 'INSTAR-0002', 'HK-0001', NOW() - interval '23 days', NOW() ),\n  ( 3, 'Harbour West', 'INSTAR-0003', 'HK-0001', NOW() - interval '43 days', NOW() ),\n  ( 4, 'Beachfront', 'INSTAR-0001', 'HK-0002', NOW() - interval '12 days', NOW() ),\n  ( 5, 'Downtown', 'INSTAR-0005', 'HK-0003', NOW() - interval '54 days', NOW() ),\n  ( 6, 'Central Park', 'INSTAR-0001', 'HK-0003', NOW() - interval '213 days', NOW() ),\n  ( 7, 'Terminal', 'INSTAR-0002', 'HK-0003', NOW() - interval '33 days', NOW() ),\n  ( 8, 'Skyline', 'INSTAR-0003', 'HK-0003', NOW() - interval '65 days', NOW() ),\n  ( 9, 'Plaza', 'INSTAR-0004', 'HK-0003', NOW() - interval '45 days', NOW() );\n")),(0,r.kt)("h2",{id:"connecting-your-application"},"Connecting your Application"),(0,r.kt)("h3",{id:"postgres-driver"},"Postgres Driver"),(0,r.kt)("p",null,"First we need to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lib/pq"},"install a driver")," that allows us to establish a connection with our database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go get -u github.com/lib/pq\n")),(0,r.kt)("h3",{id:"connecting"},"Connecting"),(0,r.kt)("p",null,"And import the following packages to ",(0,r.kt)("inlineCode",{parentName:"p"},"main.go"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "context"\n    "database/sql"\n    ...\n\n    _ "github.com/lib/pq"\n)\n')),(0,r.kt)("p",null,"Now open a connection with - add your own Postgres connection string ",(0,r.kt)("inlineCode",{parentName:"p"},"pgURL"),":"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./src/api/main.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// PG Database\nconst pgURL = "postgres://postgres:secretpassword@192.168.2.111/gocam?sslmode=disable"\n\n\nfunc main() {\n  ...\n    flag.StringVar(&cfg.db.dsn, "dsn", pgURL, "Postgres connection string")\n  ...\n    // Call database and crash if not successful\n    db, err := connectDB(cfg)\n    if err !=nil {\n        logger.Fatal(err)\n    }\n    defer db.Close()\n  ...\n}\n\n\nfunc connectDB(cfg config) (*sql.DB, error) {\n    db, err := sql.Open("postgres", cfg.db.dsn)\n    if err != nil {\n        return nil, err\n    }\n\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n\n    err = db.PingContext(ctx)\n    if err != nil {\n        return nil, err\n    }\n\n    return db, nil\n}\n')),(0,r.kt)("h3",{id:"add-database-to-route-handler"},"Add Database to Route Handler"),(0,r.kt)("p",null,"Create the database model:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./models/models.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// Database wrapper\ntype Models struct {\n    DB DBModel\n}\n// Return models with db pool\nfunc NewModels(db *sql.DB) Models {\n    return Models {\n        DB: DBModel{DB: db},\n    }\n}\n")),(0,r.kt)("p",null,"And the database type:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./models/gocamDB.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package models\n\nimport "database/sql"\n\ntype DBModel struct {\n    DB *sql.DB\n}\n// Return one camera or error\nfunc(m *DBModel) Get(id int) (*Camera, error) {\n    return nil, nil\n}\n// Return all cameras or error\nfunc(m *DBModel) All(id int) ([]*Camera, error) {\n    return nil, nil\n}\n')),(0,r.kt)("p",null,"Now I want to fill those methods with SQL queries that either fetch one specific camera (identified by ID) or a collection of all cameras. The SQL queries for this are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name, usr, pass, ip, updated, rating, location FROM camera WHERE id = 1;\n\n id |     name      |  usr  |  pass  |      ip      |          updated           | rating | location\n----+---------------+-------+--------+--------------+----------------------------+--------+----------\n  1 | Mountain View | admin | instar | 192.168.2.10 | 2021-10-15 03:46:36.603446 |      3 | HK\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name, usr, pass, ip, updated, rating, location FROM camera;\n\n id |     name      |  usr  |  pass  |       ip        |          updated           | rating | location\n----+---------------+-------+--------+-----------------+----------------------------+--------+----------\n  1 | Mountain View | admin | instar | 192.168.2.10    | 2021-10-15 03:46:36.603446 |      3 | HK\n  2 | Harbour East  | admin | instar | 192.168.2.19    | 2021-10-15 03:46:36.603446 |      5 | HK\n  3 | Harbour West  | admin | instar | 192.168.2.24    | 2021-10-15 03:46:36.603446 |      3 | HK\n  4 | Beachfront    | admin | instar | 192.168.2.117   | 2021-10-15 03:46:36.603446 |      2 | HK\n  5 | Downtown      | admin | instar | 192.168.178.70  | 2021-10-15 03:46:36.603446 |      4 | HK\n  6 | Central Park  | admin | instar | 192.168.178.42  | 2021-10-15 03:46:36.603446 |      2 | HK\n  7 | Terminal      | admin | instar | 192.168.178.52  | 2021-10-15 03:46:36.603446 |      2 | HK\n  8 | Skyline       | admin | instar | 192.168.178.67  | 2021-10-15 03:46:36.603446 |      5 | HK\n  9 | Plaza         | admin | instar | 192.168.178.249 | 2021-10-15 03:46:36.603446 |      3 | HK\n")),(0,r.kt)("h4",{id:"query-single-camera"},"Query Single Camera"),(0,r.kt)("p",null,"The function for a single camera looks like this:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./models/gocamDB.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Return one camera or error\nfunc(m *DBModel) Get(id int) (*Camera, error) {\n    ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n    defer cancel()\n    // SQL query to get one camera by id\n    query := `SELECT "id", "name", "usr", "pass", "ip", "updated", "created", "rating" FROM camera WHERE "id"= $1`\n    // Expect a single row in return from Receiver\n    row := m.DB.QueryRowContext(ctx, query, id)\n    // Create variable of type camera\n    var camera Camera\n    // And add the row that was returned from receiver to it\n    err := row.Scan(\n        &camera.ID,\n        &camera.Name,\n        &camera.Username,\n        &camera.Password,\n        &camera.Address,\n        &camera.Created,\n        &camera.Updated,\n        &camera.Rating,\n    )\n    if err != nil {\n        return nil, err\n    }\n\n    return &camera, nil\n}\n')),(0,r.kt)("p",null,"Now we have a function to connect to Postgres and fetch data from our database tables. Now we need to add a function to our ",(0,r.kt)("strong",{parentName:"p"},"Receiver")," that provide our route handlers with access to this data."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./src/api/main.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"...\ntype application struct {\n    config config\n    logger *log.Logger\n    models models.Models\n}\n...\nfunc main() {\n  ...\n    app := &application {\n        config: cfg,\n        logger: logger,\n        models: models.NewModels(db),\n    }\n  ...\n}\n")),(0,r.kt)("p",null,"And now all we need is to replace our placeholder dummy data from the camera route handler with an call to this function:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./models/gocamDB.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Hardcode a camera to get started\n// camera := models.Camera {\n//  ID: id,\n//  Name: "Mountain View",\n//  Username: "admin",\n//  Password: "instar",\n//  Address: "192.168.2.19",\n//  Rating: 5,\n//  Location: "Hongkong",\n//  Created: time.Date(2021, 9, 22, 0, 0, 0, 0, time.Local),\n//  Updated: time.Now(),\n// }\ncamera, err := app.models.DB.Get(id)\n')),(0,r.kt)("p",null,"And we now successfully retrieve our data from Postgres:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl http://localhost:4000/v1/camera/6\n\n{"camera":{"id":6,"name":"Central Park","usr":"admin","pass":"instar","ip":"192.168.178.42","installed":"2021-10-16T08:16:15.363764Z","inspected":"2020-08-07T08:16:15.363764Z","rating":2}}\n')),(0,r.kt)("h4",{id:"add-location-to-camera-query"},"Add Location to Camera Query"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./src/api/cameraHandler.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// Get camera location\n    query = `SELECT\n                camera_locations.id,\n                camera_locations.location,\n                camera_locations.cid,\n                camera_locations.lid,\n                camera_model.model,\n                camera_model.lense,\n                camera_model.res\n            FROM\n                camera_locations\n            INNER JOIN\n                camera_model\n            ON\n                camera_locations.id = camera_model.id\n            WHERE\n                camera_locations.id=$1;`\n\n    rows, _ := m.DB.QueryContext(ctx, query, id)\n    defer rows.Close()\n\n    var locations []Location\n    for rows.Next() {\n        var loc Location\n        err := rows.Scan(\n            &loc.ID,\n            &loc.LocationName,\n            &loc.CameraID,\n            &loc.LocationID,\n            // The following are of type CameraModel not Location\n            // I now added them to the Location type in models.go\n            // Not sure how to mix up types here. #TODO\n            &loc.Model,\n            &loc.Lense,\n            &loc.Resolution,\n        )\n        if err != nil {\n            return nil, err\n        }\n        locations = append(locations, loc)\n    }\n\n    camera.Location = locations\n")),(0,r.kt)("p",null,"Update the Camera Type to display the location content:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./models/models.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// BEFORE\nLocation            []Location  `json:"-"`\n// AFTER\nLocation            []Location  `json:"location"`\n')),(0,r.kt)("p",null,"The response from Postgres now also includes the location block:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl http://localhost:4000/v1/camera/6\n\n{\n    "camera": {\n        "id": 6,\n        "name": "Central Park",\n        "usr": "admin",\n        "pass": "instar",\n        "ip": "192.168.178.42",\n        "installed": "2021-10-17T11:06:37.946572Z",\n        "inspected": "2020-08-08T11:06:37.946572Z",\n        "rating": 2,\n        "location": [\n            {\n                "location": "Central Park",\n                "cid": "INSTAR-0001",\n                "lid": "HK-0003",\n                "model": "IN-9008",\n                "lense": "4.2mm",\n                "res": "1080p"\n            }\n        ]\n    }\n}\n')),(0,r.kt)("h4",{id:"query-all-cameras"},"Query All Cameras"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./models/gocamDB.go")),(0,r.kt)("p",null,"This is mostly duplicated code - compared to the get-one-camera function and should be cleaned up a bit:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Return all cameras\nfunc(m *DBModel) All() ([]*Camera, error) {\n    ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n    defer cancel()\n\n    // SQL query to get all cameras\n    query := `SELECT\n                "id", "name", "usr", "pass", "ip", "updated", "created", "rating"\n            FROM camera ORDER BY created ASC`\n\n    rows, err := m.DB.QueryContext(ctx, query)\n    if err != nil {\n        return nil, err\n    }\n\n    defer rows.Close()\n\n    var cameras []*Camera\n\n    for rows.Next(){\n        var camera Camera\n        err := rows.Scan(\n            &camera.ID,\n            &camera.Name,\n            &camera.Username,\n            &camera.Password,\n            &camera.Address,\n            &camera.Created,\n            &camera.Updated,\n            &camera.Rating,\n        )\n        if err != nil{\n            return nil, err\n        }\n\n        // Get camera location\n        query = `SELECT\n                    camera_locations.id,\n                    camera_locations.location,\n                    camera_locations.cid,\n                    camera_locations.lid,\n                    camera_model.model,\n                    camera_model.lense,\n                    camera_model.res\n                FROM\n                    camera_locations\n                INNER JOIN\n                    camera_model\n                ON\n                    camera_locations.id = camera_model.id\n                WHERE\n                    camera_locations.id=$1;`\n\n        rows, _ := m.DB.QueryContext(ctx, query, camera.ID)\n\n        var locations []Location\n        for rows.Next() {\n        var loc Location\n        err := rows.Scan(\n            &loc.ID,\n            &loc.LocationName,\n            &loc.CameraID,\n            &loc.LocationID,\n            // The following are of type CameraModel not Location\n            // I now added them to the Location type in models.go\n            // Not sure how to mix up types here.\n            &loc.Model,\n            &loc.Lense,\n            &loc.Resolution,\n        )\n        if err != nil {\n            return nil, err\n        }\n        locations = append(locations, loc)\n        }\n        defer rows.Close()\n\n        camera.Location = locations\n        cameras = append(cameras, &camera)\n    }\n\n    return cameras, nil\n}\n')),(0,r.kt)("p",null,"We now need to prepare our route handler to use this function:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./src/api/cameraHandler.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func (app *application) getAllCameras(w http.ResponseWriter, r *http.Request) {\n    cameras, err := app.models.DB.All()\n    if err != nil {\n        app.errorJSON(w, err)\n        return\n    }\n\n    err = app.writeJSON(w, http.StatusOK, cameras, "cameras")\n    if err != nil {\n        app.errorJSON(w, err)\n        return\n    }\n}\n')),(0,r.kt)("p",null,"We now have a response from Postgres on our ",(0,r.kt)("inlineCode",{parentName:"p"},"/cameras")," route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl http://localhost:4000/v1/cameras\n\n{\n    "cameras": [\n        {\n            "id": 5,\n            "name": "Downtown",\n            "usr": "admin",\n            "pass": "instar",\n            "ip": "192.168.178.70",\n            "install": "2021-10-17T11:06:37.946572Z",\n            "inspect": "2020-07-07T11:06:37.946572Z",\n            "rating": 4,\n            "location": [\n                {\n                    "location": "Downtown",\n                    "cid": "INSTAR-0005",\n                    "lid": "HK-0003",\n                    "model": "IN-9020",\n                    "lense": "4.2mm",\n                    "res": "1080p"\n                }\n            ]\n        },\n...\n')))}m.isMDXComponent=!0},48723:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f4a66dcdd4723b20f63751871edc4e36.jpg"}}]);