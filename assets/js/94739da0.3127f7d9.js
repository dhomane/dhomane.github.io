"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[34045],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(o,".").concat(d)]||u[d]||c[d]||i;return n?a.createElement(h,s(s({ref:t},m),{},{components:n})):a.createElement(h,s({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89878:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:8080,slug:"2020-06-23",title:"Saltstack Refresh Course 2: Salt Mines",authors:"mpolinowski",tags:["LINUX","Salt"]},s=void 0,l={unversionedId:"DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/index",id:"DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/index",title:"Saltstack Refresh Course 2: Salt Mines",description:"Cheung Chau, Hong Kong",source:"@site/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/index.md",sourceDirName:"DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine",slug:"/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/2020-06-23",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/2020-06-23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-4-salt-mine/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Salt",permalink:"/docs/tags/salt"}],version:"current",sidebarPosition:8080,frontMatter:{sidebar_position:8080,slug:"2020-06-23",title:"Saltstack Refresh Course 2: Salt Mines",authors:"mpolinowski",tags:["LINUX","Salt"]},sidebar:"tutorialSidebar",previous:{title:"Salt Orchestration for Docker Containers",permalink:"/docs/DevOps/Salt/2020-06-25--salt-orchestration-for-docker-containers/2020-06-25"},next:{title:"Saltstack Refresh Course 2: Highstate",permalink:"/docs/DevOps/Salt/2020-06-23--saltestack-refresh-course-3-highstate/2020-06-23"}},o={},p=[{value:"Salt Mine Setup",id:"salt-mine-setup",level:2},{value:"Using Mine Data with JinJa",id:"using-mine-data-with-jinja",level:2}],m={toc:p};function c(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Cheung Chau, Hong Kong",src:n(62251).Z,width:"1500",height:"587"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#salt-mine-setup"},"Salt Mine Setup")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#using-mine-data-with-jinja"},"Using Mine Data with JinJa"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.mine.html#module-salt.modules.mine"},"salt.modules.mine"),": The function cache system allows for data to be stored on the master so it can be easily read by other minions")),(0,r.kt)("h2",{id:"salt-mine-setup"},"Salt Mine Setup"),(0,r.kt)("p",null,"We can configure the value that we want to mine from our minion inside it's configuration file. For testing I want to read my minions IP address and make it available to my other minions through a salt mine. The salt command to get your minions LAN IP address is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt '*' network.ip_addrs 'enp*'\n")),(0,r.kt)("p",null,"Where the globbing in the end takes care of the fact that the primary LAN port is now no longer called ",(0,r.kt)("inlineCode",{parentName:"p"},"eth0")," but can have the ID's ",(0,r.kt)("inlineCode",{parentName:"p"},"enp2s0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"enp3s0"),", etc. To mine this value we can now add the following configuration to our minion servers - make sure that you choose the right interface here by first checking ",(0,r.kt)("inlineCode",{parentName:"p"},"ip a"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"/etc/salt/minion.d/mine.conf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"mine_interval: 60\nmine_functions:\n  network.ip_addrs ['enp2s0']\n")),(0,r.kt)("p",null,"Now you have to restart your minion services:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pkill -9 salt-minion\nsalt-minion -d\n")),(0,r.kt)("p",null,"You can test your mine now by asking one of your minions for the IPv4 address of all your other minions (that configured above):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt salt-minion mine.get '*' network.ip_addrs\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"salt-minion:\n    ----------\n    salt-master_minion:\n        - 172.17.0.1\n        - 192.168.2.110\n    salt-minion:\n        - 172.17.0.1\n        - 192.168.2.111\n")),(0,r.kt)("h2",{id:"using-mine-data-with-jinja"},"Using Mine Data with JinJa"),(0,r.kt)("p",null,"I want to use the mined data inside my Apache web service using a Jinja template. For this I just need to modify my Apache state by adding the line ",(0,r.kt)("inlineCode",{parentName:"p"},"template: jinja")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"install_apache:\n  pkg.installed:\n    - pkgs:\n      - apache2\n\nindex_html:\n  file.managed:\n    - name: /var/www/html/index.html\n    - source: salt://apache/templates/index.html\n    - template: jinja\n    - user: www-data\n    - group: www-data\n    - mode: 644\n\napache_service:\n  service.running:\n    - name: apache2\n    - enable: True\n")),(0,r.kt)("p",null,"Now I am able to use Jinja to get access to the mined data inside ",(0,r.kt)("inlineCode",{parentName:"p"},"salt://apache/templates/index.html"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"/srv/salt/states/base/apache/templates/index.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<!doctype html>\n\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n\n  <title>Salty Dayz, Sailor!</title>\n  <meta name=\"description\" content=\"Salt Apache Template\">\n</head>\n\n<body>\n  \n  {% set minion_ips = salt['mine.get']('salt-master_minion', 'network.ip_addrs') %}\n  <strong>Salt Master:</strong>{{ minion_ips['salt-master_minion'][-1] }}\n\n  <br/>\n  \n  {% set minion_ips = salt['mine.get']('salt-minion', 'network.ip_addrs') %}\n  <strong>Salt Minion:</strong> {{ minion_ips['salt-minion'][-1] }}\n\n</body>\n</html>\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Jinja Script in words:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a variable ",(0,r.kt)("inlineCode",{parentName:"li"},"minion_ips")),(0,r.kt)("li",{parentName:"ol"},"Set this variable to the mined value of ",(0,r.kt)("inlineCode",{parentName:"li"},"network.ip_addrs")," that you get from your minions."),(0,r.kt)("li",{parentName:"ol"},"Call the value of the variable ",(0,r.kt)("inlineCode",{parentName:"li"},"minion_ips")," and display the ",(0,r.kt)("inlineCode",{parentName:"li"},"-1")," index - which is the last value in the list - the IP that starts with ",(0,r.kt)("inlineCode",{parentName:"li"},"192.168.2*")," see above.")),(0,r.kt)("p",null,"Now apply the updated state to your web server minion and check the Apache webpage output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"salt salt-minion state.apply\n")),(0,r.kt)("p",null,"The output should read:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"Salt Master:192.168.2.110\nSalt Minion: 192.168.2.111\n")))}c.isMDXComponent=!0},62251:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-2d980c8e8e8c8e283eb880d538a3c754.jpg"}}]);