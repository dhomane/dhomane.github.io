"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[11878],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>d});var a=t(67294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,s=function(e,r){if(null==e)return{};var t,a,s={},n=Object.keys(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=a.createContext({}),l=function(e){var r=a.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},c=function(e){var r=l(e.components);return a.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},h=a.forwardRef((function(e,r){var t=e.components,s=e.mdxType,n=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=l(t),d=s,m=h["".concat(p,".").concat(d)]||h[d]||u[d]||n;return t?a.createElement(m,o(o({ref:r},c),{},{components:t})):a.createElement(m,o({ref:r},c))}));function d(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var n=t.length,o=new Array(n);o[0]=h;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<n;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},16605:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>i,toc:()=>l});var a=t(87462),s=(t(67294),t(3905));const n={sidebar_position:6050,slug:"2021-09-14",title:"PostgreSQL 14 Database Refresher :: Working with GraphQL",authors:"mpolinowski",tags:["SQL","GraphQL"]},o=void 0,i={unversionedId:"DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/index",id:"DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/index",title:"PostgreSQL 14 Database Refresher :: Working with GraphQL",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/index.md",sourceDirName:"DevOps/Provisioning/2021-09-14--postgres-refresher-hasura",slug:"/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/2021-09-14",permalink:"/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/2021-09-14",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-hasura/index.md",tags:[{label:"SQL",permalink:"/docs/tags/sql"},{label:"GraphQL",permalink:"/docs/tags/graph-ql"}],version:"current",sidebarPosition:6050,frontMatter:{sidebar_position:6050,slug:"2021-09-14",title:"PostgreSQL 14 Database Refresher :: Working with GraphQL",authors:"mpolinowski",tags:["SQL","GraphQL"]},sidebar:"tutorialSidebar",previous:{title:"PostgreSQL 14 Database Refresher :: Working with JSON & Node.js",permalink:"/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-node-json/2021-09-14"},next:{title:"PostgreSQL 14 Database Refresher :: Introduction Part II",permalink:"/docs/DevOps/Provisioning/2021-09-13--postgres-refresher-part-ii/2021-09-13"}},p={},l=[{value:"Hasura GraphQL",id:"hasura-graphql",level:2},{value:"docker-compose",id:"docker-compose",level:3},{value:"docker",id:"docker",level:3}],c={toc:l};function u(e){let{components:r,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Shenzhen, China",src:t(91838).Z,width:"1500",height:"392"})),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#hasura-graphql"},"Hasura GraphQL"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#docker-compose"},"docker-compose")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#docker"},"docker"))))),(0,s.kt)("h2",{id:"hasura-graphql"},"Hasura GraphQL"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://hasura.io/docs/latest/graphql/core/index.html"},"Hasura GraphQL")," engine makes your data instantly accessible over a real-time GraphQL API, so you can build and ship modern apps and APIs faster. Hasura connects to your databases, REST servers, GraphQL servers, and third party APIs to provide a unified realtime GraphQL API across all your data sources."),(0,s.kt)("p",null,"This guide will help you get the Hasura GraphQL engine and a Postgres database to store its metadata running as Docker containers using Docker Compose. This is the easiest way to set up Hasura GraphQL engine on your local environment."),(0,s.kt)("h3",{id:"docker-compose"},"docker-compose"),(0,s.kt)("p",null,"This sets up both Postgres v12 and Hasura GraphQL:"),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hasura/graphql-engine/tree/stable/install-manifests"},"hasura/graphql-engine/install-manifests")," repo contains all installation manifests required to deploy Hasura anywhere. Get the docker compose file from there:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://raw.githubusercontent.com/hasura/graphql-engine/stable/install-manifests/docker-compose/docker-compose.yaml -o docker-compose.yml\n")),(0,s.kt)("p",null,"The following command will run Hasura GraphQL engine along with a Postgres database to store its metadata."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,s.kt)("h3",{id:"docker"},"docker"),(0,s.kt)("p",null,"This works without issues with my Postgres v14 docker installation on host ",(0,s.kt)("inlineCode",{parentName:"p"},"192.168.2.111"),": "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d -p 8080:8080 \\\n  -e HASURA_GRAPHQL_DATABASE_URL=postgresql://postgres:secretpassword@192.168.2.111:5432/message_boards \\\n  -e HASURA_GRAPHQL_ENABLE_CONSOLE=true --name=hasura --rm \\\n  hasura/graphql-engine:latest\n")),(0,s.kt)("p",null,"After the container is started visit the IP of your docker host on port ",(0,s.kt)("inlineCode",{parentName:"p"},"8080"),". Go to data and track all your data:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Postgres Hasura GraphQL",src:t(96885).Z,width:"1007",height:"482"})),(0,s.kt)("p",null,"I can now query the data from my PG database using Graph queries in GraphiQL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},"{\n  boards(where: { board_id: { _eq: 39 } }) {\n    board_id\n    board_name\n    board_description\n  }\n  comments(where: { board_id: { _eq: 39 } }) {\n    board_id\n    comment\n    comment_id\n    time\n    user_id\n  }\n}\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Postgres Hasura GraphQL",src:t(75199).Z,width:"1237",height:"971"})))}u.isMDXComponent=!0},96885:(e,r,t)=>{t.d(r,{Z:()=>a});const a=t.p+"assets/images/Postgres_Hasura_GraphQL_01-391eccb4aaea408a3f930fb53ab7bb89.png"},75199:(e,r,t)=>{t.d(r,{Z:()=>a});const a=t.p+"assets/images/Postgres_Hasura_GraphQL_02-a197c5f90e1b212f21d3016622168206.png"},91838:(e,r,t)=>{t.d(r,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-71f2b7209f58ecc12682d4095513b1b8.jpg"}}]);