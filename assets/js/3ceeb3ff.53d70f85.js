"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[67369],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},97375:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:8910,slug:"2023-01-16",title:"Python 3.11 New Features",authors:"mpolinowski",tags:["Python"],description:"Error Messages and Customized Exception Notes"},i=void 0,l={unversionedId:"Development/Python/2023-01-16-python-3-11-features/index",id:"Development/Python/2023-01-16-python-3-11-features/index",title:"Python 3.11 New Features",description:"Error Messages and Customized Exception Notes",source:"@site/docs/Development/Python/2023-01-16-python-3-11-features/index.md",sourceDirName:"Development/Python/2023-01-16-python-3-11-features",slug:"/Development/Python/2023-01-16-python-3-11-features/2023-01-16",permalink:"/docs/Development/Python/2023-01-16-python-3-11-features/2023-01-16",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Python/2023-01-16-python-3-11-features/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"}],version:"current",sidebarPosition:8910,frontMatter:{sidebar_position:8910,slug:"2023-01-16",title:"Python 3.11 New Features",authors:"mpolinowski",tags:["Python"],description:"Error Messages and Customized Exception Notes"},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/docs/category/python"},next:{title:"Pipenv - Welcome NPM",permalink:"/docs/Development/Python/2022-12-11-pipenv/2022-12-11"}},p={},s=[{value:"Installation on Arch Linux",id:"installation-on-arch-linux",level:2},{value:"Improved Error Messages",id:"improved-error-messages",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Python 3.10",id:"python-310",level:4},{value:"Python 3.11",id:"python-311",level:4},{value:"Example 2",id:"example-2",level:3},{value:"Python 3.10",id:"python-310-1",level:4},{value:"Python 3.11",id:"python-311-1",level:4},{value:"Customized Exception Notes",id:"customized-exception-notes",level:2},{value:"Example 1",id:"example-1-1",level:3},{value:"Python 3.10",id:"python-310-2",level:4},{value:"Python 3.11",id:"python-311-2",level:4},{value:"Example 2",id:"example-2-1",level:3},{value:"Python 3.10",id:"python-310-3",level:4},{value:"Python 3.11",id:"python-311-3",level:4}],c={toc:s};function d(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Sham Sui Po, Hong Kong",src:t(55986).Z,width:"1500",height:"548"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installation-on-arch-linux"},"Installation on Arch Linux")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#improved-error-messages"},"Improved Error Messages"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#example-1"},"Example 1"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-310"},"Python 3.10")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-311"},"Python 3.11")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#example-2"},"Example 2"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-310-1"},"Python 3.10")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-311-1"},"Python 3.11")))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#customized-exception-notes"},"Customized Exception Notes"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#example-1-1"},"Example 1"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-310-2"},"Python 3.10")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-311-2"},"Python 3.11")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#example-2-1"},"Example 2"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-310-3"},"Python 3.10")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#python-311-3"},"Python 3.11"))))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.python.org/downloads/release/python-3110/"},"Python 3.11.1")," is the newest major release of the Python programming language, and it contains many new features and optimizations. See source repository from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/talkpython/python-311-code-tour/"},"talkpython"),"."),(0,r.kt)("h2",{id:"installation-on-arch-linux"},"Installation on Arch Linux"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 -V\nPython 3.10.8\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://www.python.org/ftp/python/3.11.1/Python-3.11.1.tar.xz\ntar -xvf Python-3.11.1.tar.xz\nrn Python-3.11.1.tar.xz\ncd Python-3.11.1\nsudo ./configure --enable-optimizations\nsudo make altinstall\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python -V\nPython 3.10.8\npython3 -V\nPython 3.10.8\npython3.11 -V\nPython 3.11.1\n")),(0,r.kt)("p",null,"\ud83d\udc4d"),(0,r.kt)("h2",{id:"improved-error-messages"},"Improved Error Messages"),(0,r.kt)("h3",{id:"example-1"},"Example 1"),(0,r.kt)("p",null,"Showing the exact location where an error occurred - instead of just the line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def func1(data, b, c, d, e, f):\n    area = data.get(b).get(c).get(d).get(e)\n    units = data.get(b).get(c).get(d).get(f).strip().lower()\n\n    return area, string.capwords(units)\n\n\ndef main():\n    data = {\n        "region": {\n            "country": {\n                "size": {\n                    "area": 1_000_000,\n                    "units": "MILES",\n                }\n            }\n        }\n    }\n\n    b = "region"\n    c = "country"\n    d = "size"\n    e = "area"\n    f = "units"\n\n    # extract area and units - this works\n    print(func1(data, b, c, d, e, f))\n\n    # breaking the function by calling a non-existing key\n    f = "anonkey"\n\n    print(func1(data, b, c, d, e, f))\n')),(0,r.kt)("h4",{id:"python-310"},"Python 3.10"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(1000000, 'Miles')\nTraceback (most recent call last):\n  File \"01_error_messages.py\", line 67, in <module>\n    main() \n  File \"01_error_messages.py\", line 44, in main\n    print(func1(data, b, c, d, e, f))\n  File \"01_error_messages.py\", line 9, in func1\n    units = data.get(b).get(c).get(d).get(f).strip().lower()\nAttributeError: 'NoneType' object has no attribute 'strip'\n")),(0,r.kt)("h4",{id:"python-311"},"Python 3.11"),(0,r.kt)("p",null,"Trying to strip ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," failed because it does not exist:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"(1000000, 'Miles')\nTraceback (most recent call last):\n  File \"01_error_messages.py\", line 67, in <module>\n    main() \n    ^^^^^^\n  File \"01_error_messages.py\", line 44, in main\n    print(func1(data, b, c, d, e, f))\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"01_error_messages.py\", line 9, in func1\n    units = data.get(b).get(c).get(d).get(f).strip().lower()\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'strip'\n")),(0,r.kt)("h3",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'Thing = namedtuple("Thing", "name, weight, speed")\n\ndef func2(a, b, c, d):\n    return a + b + c + d\n\ndef main():\n    t1 = Thing("Bob", 70, 24)\n    t2 = Thing("Sarah", 65, 32)\n    t3 = Thing("Jake", 72, 20)\n\n    print(func2(1, 2, 3, 4))\n    print(func2(1, 2, "3", 4))\n')),(0,r.kt)("h4",{id:"python-310-1"},"Python 3.10"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'10\nTraceback (most recent call last):\n  File "01_error_messages.py", line 56, in <module>\n    main() \n  File "01_error_messages.py", line 47, in main\n    print(func2(1, 2, "3", 4))\n  File "01_error_messages.py", line 15, in func2\n    return a + b + c + d\nTypeError: unsupported operand type(s) for +: \'int\' and \'str\'\n')),(0,r.kt)("h4",{id:"python-311-1"},"Python 3.11"),(0,r.kt)("p",null,"Adding ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," does not work because one of them is a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'10\nTraceback (most recent call last):\n  File "01_error_messages.py", line 56, in <module>\n    main() \n    ^^^^^^\n  File "01_error_messages.py", line 47, in main\n    print(func2(1, 2, "3", 4))\n          ^^^^^^^^^^^^^^^^^^^\n  File "01_error_messages.py", line 15, in func2\n    return a + b + c + d\n           ~~~~~~^~~\nTypeError: unsupported operand type(s) for +: \'int\' and \'str\'\n')),(0,r.kt)("h2",{id:"customized-exception-notes"},"Customized Exception Notes"),(0,r.kt)("p",null,"Exception notes with add_note, which enables you to add customized messages."),(0,r.kt)("h3",{id:"example-1-1"},"Example 1"),(0,r.kt)("p",null,"Add additional information about what might have gone wrong to the error message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"def divide_by_zero(x):\n    try:\n        1/x\n    except Exception as myError:\n        myError.add_note(f'The value of x is ZERO. Raised at {datetime.now()}')\n\ndef main():\n    x = 0\n    divide_by_zero(x)\n")),(0,r.kt)("h4",{id:"python-310-2"},"Python 3.10"),(0,r.kt)("p",null,"This code is incompatible with Python 3.10 => ",(0,r.kt)("inlineCode",{parentName:"p"},"AttributeError: 'ZeroDivisionError' object has no attribute 'add_note'")),(0,r.kt)("h4",{id:"python-311-2"},"Python 3.11"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'python3.11 02_custom_exception.py\nTraceback (most recent call last):\n  File "02_custom_exception.py", line 63, in <module>\n    main()\n  File "02_custom_exception.py", line 46, in main\n    divide_by_x(x)\n  File "02_custom_exception.py", line 7, in divide_by_x\n    1/x\n    ~^~\nZeroDivisionError: division by zero\nThe value of x is ZERO. Raised at 2023-01-16 13:37:26.197005\n')),(0,r.kt)("h3",{id:"example-2-1"},"Example 2"),(0,r.kt)("p",null,"Write some test that check if the input is correct and append them to the regular error message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'class DbException(Exception):\n    pass\n\n\nclass DbConnectionException(DbException):\n    pass\n\n\ndef connect_to_db(conn_str, server: Optional[str] = None, port: Optional[int] = None):\n    if ("server=" in conn_str and server) or ("port=" in conn_str and port):\n        raise DbConnectionException("Connection string is malformed")\n\n    conn_str += f"&server={server}&port={port}"\n\n    print(f"Connecting to DB with {conn_str}")\n\n\ndef setup_app():\n    # conn_str = "mongo://user=mk&password=a&database=talkpython"\n    conn_str = "mongo://user=mk&password=a&database=talkpython&port=1000"\n    server = "localhost"\n    port = 27017\n\n    try:\n        connect_to_db(conn_str, server, port)\n    except DbConnectionException as dbe:\n        dbe.add_note(\'You cannot specify server or port in both the conn str and explicitly\')\n        dbe.add_note(\'Amend the conn string and try again.\')\n        raise\n')),(0,r.kt)("p",null,"Here the server address and port is added twice creating a connection error."),(0,r.kt)("h4",{id:"python-310-3"},"Python 3.10"),(0,r.kt)("p",null,"This code is incompatible with Python 3.10 => ",(0,r.kt)("inlineCode",{parentName:"p"},"AttributeError: 'ZeroDivisionError' object has no attribute 'add_note'")),(0,r.kt)("h4",{id:"python-311-3"},"Python 3.11"),(0,r.kt)("p",null,"Our exception is triggered and we receive both the connection error that the connection string is malformed as well as the note that our test was triggered:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3.11 02_custom_exception.py\nError starting app:\nDbConnectionException: Connection string is malformed\nThere are 2 notes\nNote: You cannot specify server or port in both the conn str and explicitly\nNote: Amend the conn string and try again\n")))}d.isMDXComponent=!0},55986:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5f44d483789c3ce79f05418f930f5cd2.jpg"}}]);