"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[67419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8074:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:9030,slug:"2020-10-24",title:"HashiCorp Packer with Virtualbox (Preseed)",authors:"mpolinowski",tags:["LINUX","Packer"]},o=void 0,s={unversionedId:"DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed/index",id:"DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed/index",title:"HashiCorp Packer with Virtualbox (Preseed)",description:"TST, Hong Kong",source:"@site/docs/DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed/index.md",sourceDirName:"DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed",slug:"/DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed/2020-10-24",permalink:"/docs/DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed/2020-10-24",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Packer",permalink:"/docs/tags/packer"}],version:"current",sidebarPosition:9030,frontMatter:{sidebar_position:9030,slug:"2020-10-24",title:"HashiCorp Packer with Virtualbox (Preseed)",authors:"mpolinowski",tags:["LINUX","Packer"]},sidebar:"tutorialSidebar",previous:{title:"HashiCorp Packer with Virtualbox (Autoinstall)",permalink:"/docs/DevOps/Hashicorp/2020-10-25--hashicorp-packer-and-virtualbox-autoinstall/2020-10-25"},next:{title:"HashiCorp Packer Machine Images Introduction",permalink:"/docs/DevOps/Hashicorp/2020-10-23--hashicorp-packer-machine-image/2020-10-23"}},l={},p=[{value:"Template File",id:"template-file",level:2},{value:"Preseed File",id:"preseed-file",level:2},{value:"Build",id:"build",level:2}],u={toc:p};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"TST, Hong Kong",src:n(15041).Z,width:"1500",height:"622"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#template-file"},"Template File")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#preseed-file"},"Preseed File")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#build"},"Build"))),(0,r.kt)("p",null,"I want to build a Ubuntu VirtualBox image using HashiCorp Packer. We do this by creating a JSON template that Packer will use to create the image. The template can then be used to create identical machines on multiple platforms. The building process takes the installation ISO file of your chosen OS and uses it to create a full-blown installation of the OS by mounting the ISO, booting off it, dealing with the OS installer initial UI, and proceeding with an unattended installation. If everything goes well, we then have a functional, bootable VM image."),(0,r.kt)("p",null,"The unattended installation is made possible by a set of ",(0,r.kt)("inlineCode",{parentName:"p"},"boot_command")," 's. One of these commands will instruct the Ubuntu installer to fetch a preconfiguration file (",(0,r.kt)("inlineCode",{parentName:"p"},"preseed.cfg"),") that will automatically provide answers to the installer prompts."),(0,r.kt)("p",null,"I will create this template file and the Ubuntu preconfiguration file inside a folder named ",(0,r.kt)("inlineCode",{parentName:"p"},"packer/http"),". This will be the directory Packer will make available over http to the VM while it is created."),(0,r.kt)("h2",{id:"template-file"},"Template File"),(0,r.kt)("p",null,"Let\u2019s name the template ",(0,r.kt)("inlineCode",{parentName:"p"},"ubuntu_64.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "builders": [\n    {\n      "boot_command": [\n        "<esc><esc><enter><wait>",\n        "/install/vmlinuz noapic ",\n        "preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ubuntu_64_preseed.cfg ",\n        "debian-installer=en_US auto locale=en_US kbd-chooser/method=us ",\n        "hostname={{user hostname}} ",\n        "fb=false debconf/frontend=noninteractive ",\n        "keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA ",\n        "keyboard-configuration/variant=USA console-setup/ask_detect=false ",\n        "initrd=/install/initrd.gz -- <enter>"\n      ],\n      "disk_size": 10000,\n      "guest_os_type": "Ubuntu_64",\n      "http_directory": "http",\n      "http_port_max": 9001,\n      "http_port_min": 9001,\n      "iso_checksum": "md5:769474248a3897f4865817446f9a4a53",\n      "iso_url": "http://releases.ubuntu.com/precise/ubuntu-12.04.5-server-amd64.iso",\n      "shutdown_command": "echo {{user ssh_pass}} | sudo -S shutdown -P now",\n      "ssh_password": "{{user ssh_pass}}",\n      "ssh_timeout": "20m",\n      "ssh_username": "{{user ssh_name}}",\n      "type": "virtualbox-iso",\n      "vboxmanage": [["modifyvm", "{{.Name}}", "--vram", "32"]]\n    }\n  ],\n  "variables": {\n    "hostname": "packer-ubuntu-12",\n    "ssh_name": "ubuntu",\n    "ssh_pass": "ubuntu"\n  }\n}\n')),(0,r.kt)("p",null,"When I validated my first version of this template I hit a deprecation warning and was asked to run the ",(0,r.kt)("strong",{parentName:"p"},"FIX")," command. This printed out the template shown above which validated in ",(0,r.kt)("em",{parentName:"p"},"Packer version 1.6.4"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"packer validate ubuntu_64.json\npacker fix ubuntu_64.json\n")),(0,r.kt)("h2",{id:"preseed-file"},"Preseed File"),(0,r.kt)("p",null,"Now we need the ",(0,r.kt)("inlineCode",{parentName:"p"},"ubuntu_64_preseed.cfg")," file that is used to preconfigure the installer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cfg"},"# Some inspiration:\n# * https://github.com/chrisroberts/vagrant-boxes/blob/master/definitions/precise-64/preseed.cfg\n# * https://github.com/cal/vagrant-ubuntu-precise-64/blob/master/preseed.cfg\n\n# English plx\nd-i debian-installer/language string en\nd-i debian-installer/locale string en_US.UTF-8\nd-i localechooser/preferred-locale string en_US.UTF-8\nd-i localechooser/supported-locales en_US.UTF-8\n\n# Including keyboards\nd-i console-setup/ask_detect boolean false\nd-i keyboard-configuration/layout select USA\nd-i keyboard-configuration/variant select USA\nd-i keyboard-configuration/modelcode string pc105\n\n\n# Just roll with it\nd-i netcfg/get_hostname string packer-test\nd-i netcfg/get_domain string packer-test\n\nd-i time/zone string UTC\nd-i clock-setup/utc-auto boolean true\nd-i clock-setup/utc boolean true\n\n\n# Choices: Dialog, Readline, Gnome, Kde, Editor, Noninteractive\nd-i debconf debconf/frontend select Noninteractive\n\nd-i pkgsel/install-language-support boolean false\ntasksel tasksel/first multiselect standard, ubuntu-server\n\n\n# Stuck between a rock and a HDD place\nd-i partman-auto/method string lvm\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/device_remove_lvm boolean true\nd-i partman-auto/choose_recipe select atomic\n\nd-i partman/confirm_write_new_label boolean true\nd-i partman/confirm_nooverwrite boolean true\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\n\n# Write the changes to disks and configure LVM?\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm_nooverwrite boolean true\nd-i partman-auto-lvm/guided_size string max\n\n# No proxy, plx\nd-i mirror/http/proxy string\n\n# Default user, change\nd-i passwd/user-fullname string ubuntu\nd-i passwd/username string ubuntu\nd-i passwd/user-password password ubuntu\nd-i passwd/user-password-again password ubuntu\nd-i user-setup/encrypt-home boolean false\nd-i user-setup/allow-password-weak boolean true\n\n# No language support packages.\nd-i pkgsel/install-language-support boolean false\n\n# Individual additional packages to install\nd-i pkgsel/include string build-essential ssh\n\n#For the update\nd-i pkgsel/update-policy select none\n\n# Whether to upgrade packages after debootstrap.\n# Allowed values: none, safe-upgrade, full-upgrade\nd-i pkgsel/upgrade select safe-upgrade\n\n# Go grub, go!\nd-i grub-installer/only_debian boolean true\n\nd-i finish-install/reboot_in_progress note\n")),(0,r.kt)("h2",{id:"build"},"Build"),(0,r.kt)("p",null,"Now I can start the build with the following command:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Packer Virtualbox",src:n(77949).Z,width:"800",height:"375"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"packer build ./http/ubuntu_64.json\n\n...\n\n\n==> Builds finished. The artifacts of successful builds are:\n--\x3e virtualbox-iso: VM files in directory: output-virtualbox-iso\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"VERY IMPORTANT"),": Both files - the ",(0,r.kt)("inlineCode",{parentName:"p"},"ubuntu_64.json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ubuntu_64_preseed.cfg")," (only the preseed) are inside the ",(0,r.kt)("em",{parentName:"p"},"http")," folder and I call packer from the folder that contains this folder. If you need to change this structure, change the following line inside the template file ",(0,r.kt)("inlineCode",{parentName:"p"},'"http_directory": "http"'),".")))}d.isMDXComponent=!0},77949:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/packer-virtualbox_01-6870b4b337317c7c788c150817aa2754.png"},15041:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-d8b333d1f9ddf34ac7392aef86b14c83.jpg"}}]);