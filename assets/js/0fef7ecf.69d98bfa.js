"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[81441],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(r),k=a,m=d["".concat(s,".").concat(k)]||d[k]||u[k]||o;return r?n.createElement(m,i(i({ref:t},c),{},{components:r})):n.createElement(m,i({ref:t},c))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},50625:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:5970,slug:"2022-11-09",title:"Resistance is futile - Borg with Docker",authors:"mpolinowski",tags:["LINUX","osTicket"],description:"Backup server using Docker"},i=void 0,p={unversionedId:"DevOps/Linux/2022-11-09--docker-borg-backupserver/index",id:"DevOps/Linux/2022-11-09--docker-borg-backupserver/index",title:"Resistance is futile - Borg with Docker",description:"Backup server using Docker",source:"@site/docs/DevOps/Linux/2022-11-09--docker-borg-backupserver/index.md",sourceDirName:"DevOps/Linux/2022-11-09--docker-borg-backupserver",slug:"/DevOps/Linux/2022-11-09--docker-borg-backupserver/2022-11-09",permalink:"/docs/DevOps/Linux/2022-11-09--docker-borg-backupserver/2022-11-09",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Linux/2022-11-09--docker-borg-backupserver/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"osTicket",permalink:"/docs/tags/os-ticket"}],version:"current",sidebarPosition:5970,frontMatter:{sidebar_position:5970,slug:"2022-11-09",title:"Resistance is futile - Borg with Docker",authors:"mpolinowski",tags:["LINUX","osTicket"],description:"Backup server using Docker"},sidebar:"tutorialSidebar",previous:{title:"Linux",permalink:"/docs/category/linux"},next:{title:"Check the Filesystem",permalink:"/docs/DevOps/Linux/2022-11-04--check-filesystem/2022-11-04"}},s={},l=[{value:"Docker Setup",id:"docker-setup",level:2},{value:"Backup",id:"backup",level:3},{value:"Restore",id:"restore",level:3},{value:"Environment variables",id:"environment-variables",level:3},{value:"Core variables",id:"core-variables",level:4},{value:"SSHFS",id:"sshfs",level:4},{value:"Nomadic Borg",id:"nomadic-borg",level:2}],c={toc:l};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"TST, Hong Kong",src:r(12630).Z,width:"1500",height:"517"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#docker-setup"},"Docker Setup"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#backup"},"Backup")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#restore"},"Restore")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#environment-variables"},"Environment variables"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#core-variables"},"Core variables")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#sshfs"},"SSHFS")))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#nomadic-borg"},"Nomadic Borg"))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://borgbackup.readthedocs.io/en/stable/"},"Borg")," is a network backup and restore program."),(0,a.kt)("h2",{id:"docker-setup"},"Docker Setup"),(0,a.kt)("p",null,"I am using the Docker image with Borg Backup client provided by ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/u/pschiffe"},"pschiffe")," utility and sshfs support. Borg is a deduplicating archiver with compression and authenticated encryption. It's very efficient and doesn't need regular full backups while still supporting data pruning.: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/pschiffe/borg"},"Docker Hub"))),(0,a.kt)("h3",{id:"backup"},"Backup"),(0,a.kt)("p",null,"Create the Borg data structure needed by the docker container - e.g. in ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"borg\n\u251c\u2500\u2500 config\n\u251c\u2500\u2500 output\n\u2514\u2500\u2500 repo\n")),(0,a.kt)("p",null,"And the two directories to be backed up:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"temp1\n\u2514\u2500\u2500 test1.txt\ntemp2\n\u2514\u2500\u2500 test2.txt\n")),(0,a.kt)("p",null,"Run the following command to back up both directories:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  --rm \\\n  -e BORG_REPO=/opt/borg \\\n  -e BORG_PASSPHRASE=mypassword \\\n  -e BACKUP_DIRS=/data \\\n  -e ARCHIVE=osticket-db-$(date +%Y-%m-%d) \\\n  -e COMPRESSION=lz4 \\\n  -e PRUNE=1 \\\n  -v /opt/borg/config:/root \\\n  -v /opt/borg/repo:/opt/borg \\\n  -v /opt/temp1:/data/temp1:ro \\\n  -v /opt/temp2:/data/temp2:ro \\\n  --security-opt label:disable \\\n  --name borg-backup \\\n  pschiffe/borg\n")),(0,a.kt)("p",null,"Run the following command to back up both directories - but ",(0,a.kt)("strong",{parentName:"p"},"only keep 1 daily backup"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  --rm \\\n  -e BORG_REPO=/opt/borg \\\n  -e BORG_PASSPHRASE=mypassword \\\n  -e BACKUP_DIRS=/data \\\n  -e ARCHIVE=osticket-db-$(date +%Y-%m-%d) \\\n  -e COMPRESSION=lz4 \\\n  -e PRUNE=1 \\\n  -e KEEP_DAILY=1 \\\n  -e KEEP_WEEKLY=0 \\\n  -e KEEP_MONTHLY=0 \\\n  -v /opt/borg/config:/root \\\n  -v /opt/borg/repo:/opt/borg \\\n  -v /opt/temp1:/data/temp1:ro \\\n  -v /opt/temp2:/data/temp2:ro \\\n  --security-opt label:disable \\\n  --name borg-backup \\\n  pschiffe/borg\n")),(0,a.kt)("h3",{id:"restore"},"Restore"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Extract everything from ",(0,a.kt)("inlineCode",{parentName:"p"},"osticket-db-2022-11-09")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/borg/output"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  --rm \\\n  -e BORG_REPO=/opt/borg \\\n  -e ARCHIVE=osticket-db-2022-11-09 \\\n  -e BORG_PASSPHRASE=mypassword \\\n  -e EXTRACT_TO=/borg/output \\\n  -v /opt/borg/config:/root \\\n  -v /opt/borg/repo:/opt/borg \\\n  -v /opt/borg/output:/borg/output/data \\\n  --security-opt label:disable \\\n  --name borg-backup \\\n  pschiffe/borg\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Extract only ",(0,a.kt)("inlineCode",{parentName:"p"},"temp1/test1.txt")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/borg/output"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  --rm \\\n  -e BORG_REPO=/opt/borg \\\n  -e ARCHIVE=osticket-db-2022-11-09 \\\n  -e BORG_PASSPHRASE=mypassword \\\n  -e EXTRACT_TO=/borg/output \\\n  -e EXTRACT_WHAT=data/temp1/test1.txt \\\n  -v /opt/borg/config:/root \\\n  -v /opt/borg/repo:/opt/borg \\\n  -v /opt/borg/output:/borg/output/data \\\n  --security-opt label:disable \\\n  --name borg-backup \\\n  pschiffe/borg\n")),(0,a.kt)("h3",{id:"environment-variables"},"Environment variables"),(0,a.kt)("p",null,"Description of all accepted environment variables follows."),(0,a.kt)("h4",{id:"core-variables"},"Core variables"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"BORG_REPO")," : repository location"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ARCHIVE")," : archive parameter for Borg repository. If empty, defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},'"${HOSTNAME}_$(date +%Y-%m-%d)"'),". For more info see Borg documentation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"BACKUP_DIRS")," : directories to back up"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"EXCLUDE")," : paths/patterns to exclude from backup. Paths must be separated by ;. For example: -e EXCLUDE='/my path/one;/path two;*.tmp'"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"BORG_PARAMS")," : run custom borg command inside of the container. If this variable is set, default commands are not executed, only the one specified in BORG_PARAMS. For example list or list ::2016-05-26. In both examples, repo is not specified, because borg understands the BORG_REPO env var and uses it by default"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"BORG_SKIP_CHECK")," : set to 1 if you want to skip the borg check command at the end of the backup\nCompression"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"COMPRESSION")," : compression to use. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"lz4"),".\nEncryption"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"BORG_PASSPHRASE")," : repo-key mode password. Defaults to none. Only the repo-key mode encryption is supported by this Docker image. More info\nExtracting (restoring) files"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"EXTRACT_TO")," : directory where to extract (restore) borg archive. If this variable is set, default commands are not executed, only the extraction is done. Repo and archive are specified with BORG_REPO and ARCHIVE variables. More info"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"EXTRACT_WHAT")," : subset of files and directories which should be extracted\nPruning"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"PRUNE")," : if set, prune the repository after backup. Empty by default. More info"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"PRUNE_PREFIX")," : filter data to prune by prefix of the archive. Empty by default - prune all data"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"KEEP_DAILY")," : keep specified number of daily backups. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"7")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"KEEP_WEEKLY")," : keep specified number of weekly backups. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"4")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"KEEP_MONTHLY")," : keep specified number of monthly backups. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"6"))),(0,a.kt)("h4",{id:"sshfs"},"SSHFS"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"SSHFS")," : sshfs destination in form of user@host:/path. When using sshfs, container needs special permissions: ",(0,a.kt)("inlineCode",{parentName:"p"},"--cap-add SYS_ADMIN"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--device /dev/fuse")," and if using SELinux: ",(0,a.kt)("inlineCode",{parentName:"p"},"--security-opt label:disable")," or apparmor: ",(0,a.kt)("inlineCode",{parentName:"p"},"--security-opt apparmor:unconfined"),"\n",(0,a.kt)("strong",{parentName:"p"},"SSHFS_PASSWORD")," : password for ssh authentication\n",(0,a.kt)("strong",{parentName:"p"},"SSHFS_IDENTITY_FILE")," : path to ssh key\n",(0,a.kt)("strong",{parentName:"p"},"SSHFS_GEN_IDENTITY_FILE")," : if set, generates ssh key pair if ",(0,a.kt)("inlineCode",{parentName:"p"},"SSHFS_IDENTITY_FILE")," is set and the key file doesn't exist. After generating the key, the public part of the key is printed to stdout and the container stops, so you have the chance to configure the server part before creating the first backup"),(0,a.kt)("h2",{id:"nomadic-borg"},"Nomadic Borg"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/DevOps/Hashicorp/2022-11-11-hashicorp-nomad-for-borg-backups/2022-11-11"},"Deploying a Backup Service using Nomad"),"."))}u.isMDXComponent=!0},12630:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-ec671595d585b88a85b017a7908fb619.jpg"}}]);