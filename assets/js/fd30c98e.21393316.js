"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[11958],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:8050,slug:"2022-06-23",title:"INSTAR MQTTv5 with Python - Client Connection",authors:"mpolinowski",tags:["Python","MQTT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"The discovery of MQTT devices will enable one to use MQTT devices with only minimal configuration effort on the side of Home Assistant. Two parts are required on the device side - The configuration topic which contains the necessary device type and unique identifier, and the remaining device configuration without the device type."},o=void 0,l={unversionedId:"IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I/index",id:"IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I/index",title:"INSTAR MQTTv5 with Python - Client Connection",description:"The discovery of MQTT devices will enable one to use MQTT devices with only minimal configuration effort on the side of Home Assistant. Two parts are required on the device side - The configuration topic which contains the necessary device type and unique identifier, and the remaining device configuration without the device type.",source:"@site/docs/IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I/index.mdx",sourceDirName:"IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I",slug:"/IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I/2022-06-23",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I/2022-06-23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I/index.mdx",tags:[{label:"Python",permalink:"/docs/tags/python"},{label:"MQTT",permalink:"/docs/tags/mqtt"}],version:"current",sidebarPosition:8050,frontMatter:{sidebar_position:8050,slug:"2022-06-23",title:"INSTAR MQTTv5 with Python - Client Connection",authors:"mpolinowski",tags:["Python","MQTT"],image:"https://mpolinowski.github.io/img/search/mqtt.png",description:"The discovery of MQTT devices will enable one to use MQTT devices with only minimal configuration effort on the side of Home Assistant. Two parts are required on the device side - The configuration topic which contains the necessary device type and unique identifier, and the remaining device configuration without the device type."},sidebar:"tutorialSidebar",previous:{title:"Rust - MQTT Hello World",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-07-21-rust-hello-world/2022-07-21"},next:{title:"MQTT with RabbitMQ",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/2022-03-30"}},s={},c=[{value:"Adding a Personal TLS Certificate",id:"adding-a-personal-tls-certificate",level:2},{value:"Generating a Private Certificate Authority",id:"generating-a-private-certificate-authority",level:3},{value:"Creating a Certificate for the Mosquitto Server",id:"creating-a-certificate-for-the-mosquitto-server",level:3},{value:"Upload to your INSTAR Camera",id:"upload-to-your-instar-camera",level:3},{value:"CA Store",id:"ca-store",level:4},{value:"Server Certificate",id:"server-certificate",level:4},{value:"Creating a Certificate for each MQTT Client",id:"creating-a-certificate-for-each-mqtt-client",level:3},{value:"Testing the MQTT TLS Client Authentication",id:"testing-the-mqtt-tls-client-authentication",level:3},{value:"Installing paho-mqtt for Python",id:"installing-paho-mqtt-for-python",level:2},{value:"Connecting a Python Client to our INSTAR MQTT(S)v5 Server",id:"connecting-a-python-client-to-our-instar-mqttsv5-server",level:3}],p={toc:c};function m(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Guangzhou, China",src:n(88076).Z,width:"1500",height:"383"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#adding-a-personal-tls-certificate"},"Adding a Personal TLS Certificate"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#generating-a-private-certificate-authority"},"Generating a Private Certificate Authority")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#creating-a-certificate-for-the-mosquitto-server"},"Creating a Certificate for the Mosquitto Server")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#upload-to-your-instar-camera"},"Upload to your INSTAR Camera"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#ca-store"},"CA Store")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#server-certificate"},"Server Certificate")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#creating-a-certificate-for-each-mqtt-client"},"Creating a Certificate for each MQTT Client")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#testing-the-mqtt-tls-client-authentication"},"Testing the MQTT TLS Client Authentication")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#installing-paho-mqtt-for-python"},"Installing paho-mqtt for Python"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#connecting-a-python-client-to-our-instar-mqttsv5-server"},"Connecting a Python Client to our INSTAR MQTT(S)v5 Server"))))),(0,i.kt)("h2",{id:"adding-a-personal-tls-certificate"},"Adding a Personal TLS Certificate"),(0,i.kt)("h3",{id:"generating-a-private-certificate-authority"},"Generating a Private Certificate Authority"),(0,i.kt)("p",null,"INSTAR Cameras already have a valid CA certificate installed that we can use when we access the MQTT service via the camera's DDNS address (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"ab1234.ddns3-instar.de"),"). Alternatively, we can upload our own self-signed certificate."),(0,i.kt)("p",null,"To do this we will use OpenSSL to generate an X.509 digital certificate that uses the X.509 PKI (short for\npublic key infrastructure) standard. This digital certificate allows us to confirm that a\nspecific public key belongs to the subject included within the certificate. There is an identity\nthat issues the certificate and its details are also included in the certificate."),(0,i.kt)("p",null,"Create a new directory named ",(0,i.kt)("inlineCode",{parentName:"p"},"mosquitto_certificates")," enter the folder and run the following OpenSSL commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out ca.key 2048\nopenssl req -x509 -new -nodes -key ca.key -sha512 -days 3650 -out ca.crt\n")),(0,i.kt)("p",null,"Since we will not be verifying the certificate, it does not really matter what you fill out here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Country Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:INSTAR MQTTv5\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:INSTAR MQTTv5\nEmail Address []:\n")),(0,i.kt)("p",null,"After running the previous commands, we will have the following two files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mqtt_certificates")," directory:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ca.key"),": Certificate authority key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ca.crt"),": Certificate authority certificate file")),(0,i.kt)("h3",{id:"creating-a-certificate-for-the-mosquitto-server"},"Creating a Certificate for the Mosquitto Server"),(0,i.kt)("p",null,"We need generate a new private key and use the key to and generates the server certificate:\nfile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out server.key 2048\nopenssl req -new -key server.key -out server.csr\n")),(0,i.kt)("p",null,"It does not really matter what you fill out here. Except - you have to set the FQDN to an address/url through which you will be contacting the MQTT service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Country Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:INSTAR MQTTv5\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:192.168.2.118\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n")),(0,i.kt)("p",null,"The command generates a server.crt file with the signed X.509 digital certificate for the\nMosquitto server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 3650 -sha512\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Signature ok\nsubject=C = AU, ST = Some-State, O = INSTAR MQTTv5, CN = 192.168.2.118\nGetting CA Private Key\n")),(0,i.kt)("p",null,"After running the previous commands, we will have the following 3 new files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mqtt_certificates")," directory:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"server.key"),": Server key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"server.csr"),": Server certificate signing request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"server.crt"),": Server certificate file")),(0,i.kt)("h3",{id:"upload-to-your-instar-camera"},"Upload to your INSTAR Camera"),(0,i.kt)("p",null,"Your INSTAR camera has two expectations that we need to full fill before uploading our certificates:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Combine the ",(0,i.kt)("inlineCode",{parentName:"li"},"server.key")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"server.crt")," in a single file ",(0,i.kt)("inlineCode",{parentName:"li"},"server.pem"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAy/8kPEhDg9rJ3Rb60Vax7pgtUTKLQ0hi1BZl3OBH/JuKmvVO\n...\njLeAC8HlqWJMNlm8DWSIGWZSBmgS11Dakw8gGxNJ4UThUwnx2XrnLA==\n-----END RSA PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\nMIIDKzCCAhMCFArfrELy23ar8AW8OKk5WXn7TLa/MA0GCSqGSIb3DQEBDQUAMFIx\n...\nPlC3SfWTSo3XJlPjU2xRToRG4rO7oyxN/0X7dGQLCrSJjSJoC3Jeky91EpIouwU=\n-----END CERTIFICATE-----\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Open the ",(0,i.kt)("inlineCode",{parentName:"li"},"ca.crt")," and re-save it as ",(0,i.kt)("inlineCode",{parentName:"li"},"ca.pem"),".")),(0,i.kt)("h4",{id:"ca-store"},"CA Store"),(0,i.kt)("p",null,"Now take the ",(0,i.kt)("inlineCode",{parentName:"p"},"ca.pem")," and upload it to the INSTAR CA Store:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"INSTAR MQTT API Python",src:n(7871).Z,width:"594",height:"497"})),(0,i.kt)("h4",{id:"server-certificate"},"Server Certificate"),(0,i.kt)("p",null,"Next, upload the ",(0,i.kt)("inlineCode",{parentName:"p"},"server.pem")," file as our camera's TLS certificate:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"INSTAR MQTT API Python",src:n(68003).Z,width:"592",height:"830"})),(0,i.kt)("p",null,"Don't forget to toggle it on before leaving this menu."),(0,i.kt)("h3",{id:"creating-a-certificate-for-each-mqtt-client"},"Creating a Certificate for each MQTT Client"),(0,i.kt)("p",null,"Run the following command to create a 2,048-bit client key and the certificate-signing request, also known as CSR:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openssl genrsa -out client.key 2048\nopenssl req -new -key client.key -out client.csr\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Country Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:INSTAR MQTTv5\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:MQTT Client\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n")),(0,i.kt)("p",null,"The following command then generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"client.crt")," file with the signed X.509 digital certificate for the MQTT client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out client.crt -days 3650 -sha512 -addtrust clientAuth\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Signature ok\nsubject=C = AU, ST = Some-State, O = INSTAR MQTTv5, CN = MQTT Client\nGetting CA Private Key\n")),(0,i.kt)("h3",{id:"testing-the-mqtt-tls-client-authentication"},"Testing the MQTT TLS Client Authentication"),(0,i.kt)("p",null,"We can now test our certificates, for example, with an graphical MQTT client like the MQTT Explorer. Start by uploading the ",(0,i.kt)("inlineCode",{parentName:"p"},"ca.crt")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client.crt")," + ",(0,i.kt)("inlineCode",{parentName:"p"},"client.key"),":"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"INSTAR MQTT API Python",src:n(48581).Z,width:"1021",height:"639"})),(0,i.kt)("p",null,"Activate your cameras MQTT Server with TLS encryption:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"INSTAR MQTT API Python",src:n(48475).Z,width:"1180",height:"666"})),(0,i.kt)("p",null,"And configure the MQTT Explorer with your camera's IP address and MQTT Broker login:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"INSTAR MQTT API Python",src:n(63611).Z,width:"1020",height:"655"})),(0,i.kt)("p",null,"Hit ",(0,i.kt)("strong",{parentName:"p"},"Connect")," and you should see your Broker messages as well as your camera's state messages coming in:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"INSTAR MQTT API Python",src:n(99726).Z,width:"1022",height:"606"})),(0,i.kt)("p",null,"Now with everything set up - Python!"),(0,i.kt)("h2",{id:"installing-paho-mqtt-for-python"},"Installing paho-mqtt for Python"),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies.txt")," file inside your project folder/venv with the following dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"paho-mqtt==1.6.1\n")),(0,i.kt)("p",null,"And install them using:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install -r dependencies.txt\n")),(0,i.kt)("h3",{id:"connecting-a-python-client-to-our-instar-mqttsv5-server"},"Connecting a Python Client to our INSTAR MQTT(S)v5 Server"),(0,i.kt)("p",null,"First, we will have to create an MQTT client with ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/paho-mqtt/"},"paho-mqtt")," that connects to the INSTAR MQTT server. And the configuration is about the same as the one we needed to connect the MQTT Explorer:"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"config.py")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import os.path\n# Replace mosquitto_certificates with the path\n# in which you saved the certificate authority file,\n# the client certificate file and the client key\ncertificates_path = "mosquitto_certificates"\nca_certificate = os.path.join(certificates_path, "ca.crt")\nclient_certificate = os.path.join(certificates_path, "client.crt")\nclient_key = os.path.join(certificates_path, "client.key")\n# Replace 192.168.2.118 with the IP or hostname\n# INSTAR IP cameras\n# Make sure the IP or hostname matches the value\n# you used for Common Name for the certificate\nmqtt_server_host = "192.168.2.118"\nmqtt_server_port = 8883\nmqtt_bind_address = ""\nmqtt_bind_port = 0\nmqtt_username = "admin"\nmqtt_password = "instar"\nmqtt_transport = "tcp"\nmqtt_keepalive = 60\nmqtt_client_id = "mqtt5_client"\nmqtt_lwt = "cameras/118/status/testament"\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"subscription.py")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'from config import *\nimport paho.mqtt.client as mqtt\nimport ssl\nimport json\n\ndef on_connect(client, userdata, flags, rc, properties=None):\n    if rc==0:\n        print("INFO :: Connected to MQTT Broker")\n        client.subscribe(mqtt_lwt, qos=2, options=None, properties=None)\n        client.connected_flag=True\n    else:\n        print("ERROR :: Connection failed:", rc)\n        client.connected_flag=False\n\ndef on_subscribe(client, userdata, mid, granted_qos, properties=None):\n    print("INFO :: LWT Subscription: {}".format(\n        granted_qos[0]))\n\ndef on_message(client, userdata, msg):\n    json_object = json.loads(msg.payload)\n    print("INFO :: Message received. LWT: {}. State: {}".format(\n        msg.topic,\n        json_object["val"]))\n        \nif __name__ == "__main__":\n    client = mqtt.Client(client_id = mqtt_client_id, protocol = mqtt.MQTTv5, transport = mqtt_transport)\n    client.username_pw_set(username = mqtt_username, password = mqtt_password)\n    client.tls_set(ca_certs = ca_certificate, certfile = client_certificate,\n                    keyfile = client_key, cert_reqs = ssl.CERT_NONE,\n                    tls_version = ssl.PROTOCOL_TLSv1_2)\n    client.tls_insecure_set(True)\n    client.connect(host = mqtt_server_host, port = mqtt_server_port,\n                    keepalive = mqtt_keepalive, bind_address = mqtt_bind_address, bind_port = mqtt_bind_port, properties = None)\n    client.on_connect = on_connect\n    client.on_subscribe = on_subscribe\n    client.on_message = on_message\n    client.loop_forever()\n    if client.bad_connection_flag:\n        print("ERROR :: No Connection to Broker")\n        client.loop_stop()\n        sys.exit()\n')),(0,i.kt)("p",null,"We can run the subscription script and restart our camera we can see the ",(0,i.kt)("strong",{parentName:"p"},"LWT")," (",(0,i.kt)("em",{parentName:"p"},"last-will-and-testament"),") topic value change from ",(0,i.kt)("inlineCode",{parentName:"p"},"alive")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"dead")," and back to ",(0,i.kt)("inlineCode",{parentName:"p"},"alive")," once our client managed to reconnect:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"python subscription.py\n\nINFO :: Connected to MQTT Broker\nINFO :: LWT Subscription: Granted QoS 2\nINFO :: Message received. LWT: cameras/118/status/testament. State: alive\nINFO :: Message received. LWT: cameras/118/status/testament. State: dead\nINFO :: Connected to MQTT Broker\nINFO :: LWT Subscription: Granted QoS 2\nINFO :: Message received. LWT: cameras/118/status/testament. State: alive\n")))}m.isMDXComponent=!0},7871:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/INSTAR_MQTT_Python_01-bc5f31b36e6b770948ee6e874ab68a3e.png"},68003:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/INSTAR_MQTT_Python_02-49c6e03a4a44e1a1b7f73f81e6700449.png"},48581:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/INSTAR_MQTT_Python_03-76246a10b4a61be637097cc72b4621c9.png"},48475:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/INSTAR_MQTT_Python_04-2429fc985205917203ec0e49b2e9701b.png"},63611:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/INSTAR_MQTT_Python_05-dbe3eb3ef80ff356bb7478b76925456a.png"},99726:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/INSTAR_MQTT_Python_06-cfc23e336af5ae6a7833abc61d94eabe.png"},88076:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-918471126c0472aad97358a725e1a399.jpg"}}]);