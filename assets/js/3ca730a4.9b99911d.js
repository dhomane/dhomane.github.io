"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[37776],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},33200:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:8030,slug:"2021-08-07",title:"Nomad Job Configuration",authors:"mpolinowski",tags:["Nomad","Linux"]},i=void 0,s={unversionedId:"DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/index",id:"DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/index",title:"Nomad Job Configuration",description:"Central, Hongkong",source:"@site/docs/DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/index.md",sourceDirName:"DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration",slug:"/DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/2021-08-07",permalink:"/docs/DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/2021-08-07",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2021-08-07--hashicorp-nomad-job-configuration/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8030,frontMatter:{sidebar_position:8030,slug:"2021-08-07",title:"Nomad Job Configuration",authors:"mpolinowski",tags:["Nomad","Linux"]},sidebar:"tutorialSidebar",previous:{title:"Nomad Access Control Lists",permalink:"/docs/DevOps/Hashicorp/2021-08-08--hashicorp-nomad-access-control-lists/2021-08-08"},next:{title:"Hashicorp Consul Refresher - Loadbalancing with Traefik",permalink:"/docs/DevOps/Hashicorp/2021-08-06--hashicorp-consul-traefik-loadbalancing/2021-08-06"}},l={},p=[{value:"How to add Configuration to your Application",id:"how-to-add-configuration-to-your-application",level:2},{value:"Job Arguments",id:"job-arguments",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Configuration Artifacts",id:"configuration-artifacts",level:3},{value:"Templates",id:"templates",level:3}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Central, Hongkong",src:n(14054).Z,width:"1500",height:"515"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-to-add-configuration-to-your-application"},"How to add Configuration to your Application"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#job-arguments"},"Job Arguments")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#environment-variables"},"Environment Variables")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#configuration-artifacts"},"Configuration Artifacts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#templates"},"Templates"))))),(0,o.kt)("h2",{id:"how-to-add-configuration-to-your-application"},"How to add Configuration to your Application"),(0,o.kt)("p",null,"To configure a task you can:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("strong",{parentName:"li"},"Commandline Arguments")," that are passed to your application when you run it."),(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("strong",{parentName:"li"},"Environment Variables")," that are accessible to Nomad to be passed on."),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("strong",{parentName:"li"},"Artifacts")," to download and unzip required files"),(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("strong",{parentName:"li"},"Templates")," to generate variables")),(0,o.kt)("h3",{id:"job-arguments"},"Job Arguments"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"http-echo")," application from is started - this time without Docker - using the ",(0,o.kt)("strong",{parentName:"p"},"Exec Driver")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"/bin/http-echo")," command. The application is then configured using ",(0,o.kt)("strong",{parentName:"p"},"Arguments")," to run on port ",(0,o.kt)("inlineCode",{parentName:"p"},"5678")," and return a ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello World")," when receiving an HTTP GET request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'group "example" {\n  task "server" {\n    driver = "exec"\n\n    config {\n      command = "/bin/http-echo"\n\n      args = [\n        "-listen",\n        ":5678",\n        "-text",\n        "Hello World",\n      ]\n    }\n  }\n}\n')),(0,o.kt)("h3",{id:"environment-variables"},"Environment Variables"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/job-specification/env"},"Environment Variables")," can be passed on to our application inside the task block of our Nomad job file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'job "frontend" {\n  group "example" {\n    task "server" {\n      env {\n        DB_HOST = "my-db-host.com"\n        DB_USER = "db_user"\n        DB_PASS = "dbpassword"\n      }\n    }\n  }\n}\n')),(0,o.kt)("h3",{id:"configuration-artifacts"},"Configuration Artifacts"),(0,o.kt)("p",null,"Download a configuration file from a ",(0,o.kt)("strong",{parentName:"p"},"Git Repository")," using the ",(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/job-specification/artifact"},"Artifacts Stanza"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'artifact {\n  # The git:: prefix forces go-getter\'s protocol detection to use the git ssh\n  # protocol. It can also automatically detect the protocol from the domain of\n  # some git hosting providers (such as GitHub) without the prefix.\n  source      = "git::git@bitbucket.org:example/nomad-examples"\n  destination = "local/repo"\n  options {\n    # Make sure that the Nomad user\'s known hosts file is populated:\n    # ssh-keyscan github.com | sudo tee -a /root/.ssh/known_hosts\n    # https://github.com/hashicorp/go-getter/issues/55\n    sshkey = "${base64encode(file(pathexpand("~/.ssh/id_rsa")))}"\n  }\n}\n')),(0,o.kt)("p",null,"To download from a private repo, sshkey needs to be set. The key must be base64-encoded string. On Linux, you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"base64 -w0 <file>")," to encode the file."),(0,o.kt)("h3",{id:"templates"},"Templates"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/job-specification/template"},"template block")," instantiates an instance of a template renderer. This creates a convenient way to ship configuration files that are populated from environment variables, Consul data, Vault secrets, or just general configurations within a Nomad task:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'job "docs" {\n  group "example" {\n    task "server" {\n      artifact {\n        source      = "https://example.com/redis.conf.tpl"\n        destination = "local/redis.conf.tpl"\n      }\n      template {\n        source        = "local/redis.conf.tpl"\n        destination   = "local/redis.conf"\n        change_mode   = "signal"\n        change_signal = "SIGINT"\n      }\n    }\n  }\n}\n')),(0,o.kt)("p",null,"You can also utilize inline templates and turn them into environment variables like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'template {\n  data = <<EOH\n  ---\n    bind_port:   {{ env "NOMAD_PORT_db" }}\n    scratch_dir: {{ env "NOMAD_TASK_DIR" }}\n    node_id:     {{ env "node.unique.id" }}\n    service_key: {{ key "service/my-key" }}\n  EOH\n\n  destination = "local/file.env"\n  env = true\n}\n')))}u.isMDXComponent=!0},14054:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-dd238a3002757e76cd23d4a48373f52a.jpg"}}]);