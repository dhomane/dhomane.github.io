"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[90026],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,g=m["".concat(l,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6795:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:9030,slug:"2021-09-22",title:"Getting started with Go and React - API Routes",authors:"mpolinowski",tags:["Go"]},i=void 0,s={unversionedId:"Development/Go/2021-09-22--golang-react-starter-part-ii/index",id:"Development/Go/2021-09-22--golang-react-starter-part-ii/index",title:"Getting started with Go and React - API Routes",description:"Shenzhen, China",source:"@site/docs/Development/Go/2021-09-22--golang-react-starter-part-ii/index.md",sourceDirName:"Development/Go/2021-09-22--golang-react-starter-part-ii",slug:"/Development/Go/2021-09-22--golang-react-starter-part-ii/2021-09-22",permalink:"/docs/Development/Go/2021-09-22--golang-react-starter-part-ii/2021-09-22",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2021-09-22--golang-react-starter-part-ii/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:9030,frontMatter:{sidebar_position:9030,slug:"2021-09-22",title:"Getting started with Go and React - API Routes",authors:"mpolinowski",tags:["Go"]},sidebar:"tutorialSidebar",previous:{title:"Getting started with Go and React - PostgreSQL",permalink:"/docs/Development/Go/2021-09-23--golang-react-starter-part-iii/2021-09-23"},next:{title:"Getting started with Go and React - Webservice, Routing and Status Log",permalink:"/docs/Development/Go/2021-09-21--golang-react-starter-part-i/2021-09-21"}},l={},p=[{value:"Setting up API Routes",id:"setting-up-api-routes",level:2},{value:"Adding Models",id:"adding-models",level:3},{value:"Handle API JSON Response",id:"handle-api-json-response",level:3},{value:"API for One Camera",id:"api-for-one-camera",level:3}],d={toc:p};function c(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shenzhen, China",src:n(53272).Z,width:"1500",height:"441"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Creating an REST API backend in Go and connecting it to a React.js frontend.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"Part I - Webservice, Routing and Status Log")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"Part II - API Routes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#"},"Part III - PostgreSQL"))),(0,r.kt)("p",null,"I want to prototype a Go backend for a ",(0,r.kt)("strong",{parentName:"p"},"Weather Cam")," tool. The backend should hold all the information related to all cameras and serve them on different routes. The backend then needs to be connected to a React.js frontend that displays the JSON data that is being served as well as to allow to add / delete cameras."),(0,r.kt)("h2",{id:"setting-up-api-routes"},"Setting up API Routes"),(0,r.kt)("h3",{id:"adding-models"},"Adding Models"),(0,r.kt)("p",null,"Creating type declarations for our API routes:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./models/models.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package models\n\nimport "time"\n\ntype Camera struct {\n    ID                  int         `json:"id"`\n    Name                string      `json:"name"`\n    Username            string      `json:"usr"`\n    Password            string      `json:"pass"`\n    Address             string      `json:"ip"`\n    Created             time.Time   `json:"installed"`\n    Updated             time.Time   `json:"inspected"`\n    Rating              int         `json:"rating"`\n    // As soon as we connect our database we will use\n    // a JOIN query to get the location information.\n    // Change the line to `Location []Location `json:"location"``\n    // to display them.\n    Location            []Location  `json:"-"`\n}\n\ntype CameraModel struct {\n    ID                  int         `json:"id"`\n    Model               string      `json:"model"`\n    Lense               string      `json:"lense"`\n    Resolution          string      `json:"res"`\n    Created             time.Time   `json:"install"`\n    Updated             time.Time   `json:"inspect"`\n}\n\ntype Location struct {\n    ID                  int         `json:"id"`\n    LocationName        string      `json:"location"`\n    CameraID            string      `json:"cid"`\n    LocationID          string      `json:"lid"`\n    Model               string      `json:"model"`\n    Lense               string      `json:"lense"`\n    Resolution          string      `json:"res"`\n    Created             time.Time   `json:"install"`\n    Updated             time.Time   `json:"inspect"`\n}\n')),(0,r.kt)("p",null,"Create the API routes for all cameras and one specific camera:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "net/http"\n\n    "github.com/julienschmidt/httprouter"\n)\n\nfunc (app *application) routes() *httprouter.Router {\n    router := httprouter.New()\n\n    router.HandlerFunc(http.MethodGet, "/status", app.statusHandler)\n\n    router.HandlerFunc(http.MethodGet, "/v1/camera/:id", app.getOneCamera)\n    router.HandlerFunc(http.MethodGet, "/v1/cameras", app.getAllCameras)\n\n    return router\n}\n')),(0,r.kt)("h3",{id:"handle-api-json-response"},"Handle API JSON Response"),(0,r.kt)("p",null,"We need to be able to send data in form of JSON to the accessing browser. We can add a utility function that abstracts that part away from our route handler:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./src/api/utilities.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "encoding/json"\n    "net/http"\n)\n\n// Create a function that takes an input, converts it to JSON\n// and sends it to the browser\nfunc (app *application) writeJSON(w http.ResponseWriter, status int, data interface{}, wrap string) error {\n    // Create a wrapper that describes the data\n    wrapper := make(map[string]interface{})\n    // Wrap data\n    wrapper[wrap] = data\n    // Transform to JSON\n    js, err := json.Marshal(wrapper)\n    if err != nil {\n        return err\n    }\n    // Add headers and send\n    w.Header().Set("Content-Type", "application/json")\n    w.WriteHeader(status)\n    w.Write(js)\n\n    return nil\n}\n')),(0,r.kt)("h3",{id:"api-for-one-camera"},"API for One Camera"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./src/api/cameraHandler.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "backend/models"\n    "errors"\n    "net/http"\n    "strconv"\n    "time"\n\n    "github.com/julienschmidt/httprouter"\n)\n\nfunc (app *application) getOneCamera(w http.ResponseWriter, r *http.Request) {\n    // Get camera id from from the URL param\n    params := httprouter.ParamsFromContext(r.Context())\n    // Convert id from string to integer\n    id, err := strconv.Atoi(params.ByName("id"))\n    if err != nil {\n        app.logger.Print(errors.New("invalid id parameter"))\n    }\n    // Log id to see if it is working\n    app.logger.Println("camera id is", id)\n    // Hardcode a camera to get started\n    camera := models.Camera {\n        ID: id,\n        Name: "Mountain View",\n        Username: "admin",\n        Password: "instar",\n        Address: "192.168.2.19",\n        Rating: 5,\n        Location: "Hongkong",\n        InstallationDate: time.Date(2021, 9, 22, 0, 0, 0, 0, time.Local),\n        InspectionDate: time.Now(),\n    }\n\n    err = app.writeJSON(w, http.StatusOK, camera, "camera")\n    if err != nil {\n        app.logger.Println(err)\n    }\n}\n\nfunc (app *application) getAllCameras(w http.ResponseWriter, r *http.Request) {\n    // TODO\n}\n')),(0,r.kt)("p",null,"Start the application with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go run ./src/api/\n")),(0,r.kt)("p",null,"And test the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:4000/v1/camera/123")," in your browser:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Golang React API",src:n(73638).Z,width:"1091",height:"274"})))}c.isMDXComponent=!0},73638:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Golang_React_API-c81eb3bef796106feef27d84ea25a2d7.png"},53272:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-f4a66dcdd4723b20f63751871edc4e36.jpg"}}]);