"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[57902],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>h});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),p=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=p(e.components);return t.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),h=r,c=m["".concat(i,".").concat(h)]||m[h]||u[h]||l;return n?t.createElement(c,o(o({ref:a},d),{},{components:n})):t.createElement(c,o({ref:a},d))}));function h(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},87129:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var t=n(87462),r=(n(67294),n(3905));const l={sidebar_position:9080,slug:"2020-05-03",title:"Neo4j Cypher Cheat Sheet",authors:"mpolinowski",tags:["Databases","Neo4j"]},o=void 0,s={unversionedId:"Development/Graphs/2020-05-03--neo4j-cheat-sheet/index",id:"Development/Graphs/2020-05-03--neo4j-cheat-sheet/index",title:"Neo4j Cypher Cheat Sheet",description:"Maritime Museum, Hong Kong",source:"@site/docs/Development/Graphs/2020-05-03--neo4j-cheat-sheet/index.mdx",sourceDirName:"Development/Graphs/2020-05-03--neo4j-cheat-sheet",slug:"/Development/Graphs/2020-05-03--neo4j-cheat-sheet/2020-05-03",permalink:"/docs/Development/Graphs/2020-05-03--neo4j-cheat-sheet/2020-05-03",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Graphs/2020-05-03--neo4j-cheat-sheet/index.mdx",tags:[{label:"Databases",permalink:"/docs/tags/databases"},{label:"Neo4j",permalink:"/docs/tags/neo-4-j"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2020-05-03",title:"Neo4j Cypher Cheat Sheet",authors:"mpolinowski",tags:["Databases","Neo4j"]},sidebar:"tutorialSidebar",previous:{title:"Neo4j Corona Tracing",permalink:"/docs/Development/Graphs/2020-05-04--neo4j-corona-tracing/2020-05-04"},next:{title:"Neo4j Movie Graph",permalink:"/docs/Development/Graphs/2020-05-02--neo4j-movie-graph/2020-05-02"}},i={},p=[{value:"Cypher Fundamentals",id:"cypher-fundamentals",level:2},{value:"Browser editor",id:"browser-editor",level:2},{value:"CLI",id:"cli",level:3},{value:"Match",id:"match",level:2},{value:"Match node",id:"match-node",level:3},{value:"Match nodes and relationships",id:"match-nodes-and-relationships",level:3},{value:"Match labels",id:"match-labels",level:3},{value:"Match multiple labels",id:"match-multiple-labels",level:3},{value:"Match same properties",id:"match-same-properties",level:3},{value:"Match friends of friends with same hobbies",id:"match-friends-of-friends-with-same-hobbies",level:3},{value:"Match by ID",id:"match-by-id",level:3},{value:"Create",id:"create",level:2},{value:"Create node",id:"create-node",level:3},{value:"Create nodes and relationships",id:"create-nodes-and-relationships",level:3},{value:"Create relationship between 2 unrelated nodes",id:"create-relationship-between-2-unrelated-nodes",level:3},{value:"Create node with multiple labels",id:"create-node-with-multiple-labels",level:3},{value:"Update",id:"update",level:2},{value:"Update node properties (add new or modify)",id:"update-node-properties-add-new-or-modify",level:3},{value:"Replace all node properties for the new ones",id:"replace-all-node-properties-for-the-new-ones",level:3},{value:"Add new node properties without deleting old ones",id:"add-new-node-properties-without-deleting-old-ones",level:3},{value:"Add new node property if property not already set",id:"add-new-node-property-if-property-not-already-set",level:3},{value:"Rename a property in all nodes",id:"rename-a-property-in-all-nodes",level:3},{value:"Add label to existing node",id:"add-label-to-existing-node",level:3},{value:"Creates the node if not exists and updates (or creates) a property",id:"creates-the-node-if-not-exists-and-updates-or-creates-a-property",level:3},{value:"Delete",id:"delete",level:2},{value:"Delete nodes",id:"delete-nodes",level:3},{value:"Deletes a property in a specific node",id:"deletes-a-property-in-a-specific-node",level:3},{value:"Delete a label from all nodes",id:"delete-a-label-from-all-nodes",level:3},{value:"Delete a label from nodes with specific labels",id:"delete-a-label-from-nodes-with-specific-labels",level:3},{value:"Delete multiple labels from nodes",id:"delete-multiple-labels-from-nodes",level:3},{value:"Delete entire database",id:"delete-entire-database",level:3},{value:"Other clauses",id:"other-clauses",level:2},{value:"Show execution plan",id:"show-execution-plan",level:3},{value:"Count",id:"count",level:3},{value:"Limit",id:"limit",level:3},{value:"Create unique property constraint",id:"create-unique-property-constraint",level:3},{value:"Drop unique property constraint",id:"drop-unique-property-constraint",level:3},{value:"Useful Cypher Queries for Neo4J",id:"useful-cypher-queries-for-neo4j",level:2}],d={toc:p};function u(e){let{components:a,...l}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,l,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Maritime Museum, Hong Kong",src:n(92099).Z,width:"1500",height:"713"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#cypher-fundamentals"},"Cypher Fundamentals")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#browser-editor"},"Browser editor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#cli"},"CLI")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#match"},"Match"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#match-node"},"Match node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#match-nodes-and-relationships"},"Match nodes and relationships")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#match-labels"},"Match labels")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#match-multiple-labels"},"Match multiple labels")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#match-same-properties"},"Match same properties")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#match-friends-of-friends-with-same-hobbies"},"Match friends of friends with same hobbies")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#match-by-id"},"Match by ID")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create"},"Create"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-node"},"Create node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-nodes-and-relationships"},"Create nodes and relationships")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-relationship-between-2-unrelated-nodes"},"Create relationship between 2 unrelated nodes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-node-with-multiple-labels"},"Create node with multiple labels")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#update"},"Update"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#update-node-properties-add-new-or-modify"},"Update node properties (add new or modify)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#replace-all-node-properties-for-the-new-ones"},"Replace all node properties for the new ones")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#add-new-node-properties-without-deleting-old-ones"},"Add new node properties without deleting old ones")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#add-new-node-property-if-property-not-already-set"},"Add new node property if property not already set")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rename-a-property-in-all-nodes"},"Rename a property in all nodes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#add-label-to-existing-node"},"Add label to existing node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#creates-the-node-if-not-exists-and-updates-or-creates-a-property"},"Creates the node if not exists and updates (or creates) a property")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#delete"},"Delete"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#delete-nodes"},"Delete nodes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#deletes-a-property-in-a-specific-node"},"Deletes a property in a specific node")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#delete-a-label-from-all-nodes"},"Delete a label from all nodes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#delete-a-label-from-nodes-with-specific-labels"},"Delete a label from nodes with specific labels")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#delete-multiple-labels-from-nodes"},"Delete multiple labels from nodes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#delete-entire-database"},"Delete entire database")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#other-clauses"},"Other clauses"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#show-execution-plan"},"Show execution plan")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#count"},"Count")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#limit"},"Limit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-unique-property-constraint"},"Create unique property constraint")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#drop-unique-property-constraint"},"Drop unique property constraint")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#useful-cypher-queries-for-neo4j"},"Useful Cypher Queries for Neo4J"))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Just a bunch of cyphering I found online - all in one place for easy consumption")),(0,r.kt)("h2",{id:"cypher-fundamentals"},"Cypher Fundamentals"),(0,r.kt)("p",null,"Store any kind of data using the following graph concepts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Node"),": Graph data records"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Relationship"),": Connect nodes (has direction and a type)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Property"),": Stores data in key-value pair in nodes and relationships"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Label"),": Groups nodes and relationships (optional)")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"browser-editor"},"Browser editor"),(0,r.kt)("h3",{id:"cli"},"CLI"),(0,r.kt)("p",null,"Examples: ",(0,r.kt)("inlineCode",{parentName:"p"},":help")," ",(0,r.kt)("inlineCode",{parentName:"p"},":clear")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"match"},"Match"),(0,r.kt)("h3",{id:"match-node"},"Match node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (ee:Person)\nWHERE ee.name = "Romeo"\nRETURN ee;\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MATCH")," clause to specify a pattern of nodes and relationships"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(ee:Person)")," a single node pattern with label 'Person' which will assign matches to the variable ",(0,r.kt)("inlineCode",{parentName:"li"},"ee")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"WHERE")," clause to constrain the results"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},'ee.name = "Romeo"'),' compares name property to the value "Romeo"'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RETURN")," clause used to request particular results")),(0,r.kt)("p",null,"Gets gets the id 5  and id 0  nodes and creates a ",(0,r.kt)("inlineCode",{parentName:"p"},":KNOWS")," relationship between them"),(0,r.kt)("h3",{id:"match-nodes-and-relationships"},"Match nodes and relationships"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (ee:Person)-[:KNOWS]-(friends)\nWHERE ee.name = "Romeo"\nRETURN ee, friends\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MATCH")," clause to describe the pattern from known Nodes to found Nodes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(ee)")," starts the pattern with a Person (qualified by WHERE)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"-","[:KNOWS]","-"),' matches "KNOWS" relationships (in either direction)'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"(friends)")," will be bound to Romeo's friends")),(0,r.kt)("h3",{id:"match-labels"},"Match labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n:Person)\nRETURN n\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE n:Person\nRETURN n\n")),(0,r.kt)("h3",{id:"match-multiple-labels"},"Match multiple labels"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},":Car")," ",(0,r.kt)("strong",{parentName:"p"},"OR")," ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE n:Person OR n:Car\nRETURN n\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},":Car")," ",(0,r.kt)("strong",{parentName:"p"},"AND")," ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE n:Person:Car\nRETURN n\n")),(0,r.kt)("h3",{id:"match-same-properties"},"Match same properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (a:Person)\nWHERE a.from = "Korea"\nRETURN a\n')),(0,r.kt)("p",null,"Returns every node (and their relationships) where there's a property ",(0,r.kt)("inlineCode",{parentName:"p"},"from"),' with "Korea" value'),(0,r.kt)("h3",{id:"match-friends-of-friends-with-same-hobbies"},"Match friends of friends with same hobbies"),(0,r.kt)("p",null,"Johan is learning surfing, and wants to know any friend of his friends who already knows surfing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (js:Person)-[:KNOWS]-()-[:KNOWS]-(surfer)\nWHERE js.name = "Johan" AND surfer.hobby = "surfing"\nRETURN DISTINCT surfer\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"()")," empty parenthesis to ignore these nodes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"DISTINCT")," because more than one path will match the pattern"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"surfer")," will contain Allison, a friend of a friend who surfs")),(0,r.kt)("h3",{id:"match-by-id"},"Match by ID"),(0,r.kt)("p",null,"Every node and relationship has an internal autonumeric ID, which can be queried using ** ",(0,r.kt)("strong",{parentName:"p"},", ")," =",(0,r.kt)("strong",{parentName:"p"},", "),"=",(0,r.kt)("strong",{parentName:"p"},", "),"= ",(0,r.kt)("strong",{parentName:"p"},", "),"  ",(0,r.kt)("strong",{parentName:"p"}," and "),"IN** operators:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Search node by ID")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE id(n) = 0\nRETURN n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Search multiple nodes by ID")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE id(n) IN [1, 2, 3]\nRETURN n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Search relationship by ID")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH ()-[n]-()\nWHERE id(n) = 0\nRETURN n\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"create"},"Create"),(0,r.kt)("h3",{id:"create-node"},"Create node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'CREATE (ee:Person { name: "Romeo", from: "Korea", klout: 99 })\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CREATE")," clause to create data"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"()")," parenthesis to indicate a node"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ee:Person")," a variable ",(0,r.kt)("inlineCode",{parentName:"li"},"ee")," and label ",(0,r.kt)("inlineCode",{parentName:"li"},"Person")," for the new node"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"{}")," brackets to add properties (key-value pairs) to the node")),(0,r.kt)("h3",{id:"create-nodes-and-relationships"},"Create nodes and relationships"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (ee:Person) WHERE ee.name = "Romeo"\nCREATE (js:Person { name: "Johan", from: "Korea", learn: "surfing" }),\n(ir:Person { name: "Ian", from: "England", title: "author" }),\n(rvb:Person { name: "Rik", from: "Belgium", pet: "Orval" }),\n(ally:Person { name: "Allison", from: "California", hobby: "surfing" }),\n(ee)-[:KNOWS {since: 2001}]- (js),(ee)-[:KNOWS {rating: 5}]- (ir),\n(js)-[:KNOWS]- (ir),(js)-[:KNOWS]- (rvb),\n(ir)-[:KNOWS]- (js),(ir)-[:KNOWS]- (ally),\n(rvb)-[:KNOWS]- (ally)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MATCH"),' clause to get "Romeo" in ',(0,r.kt)("inlineCode",{parentName:"li"},"ee")," variable"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"CREATE")," clause to create multiple nodes (comma separated) with their labels and properties. Also creates directed relationships ",(0,r.kt)("inlineCode",{parentName:"li"},"(a)-[:Label {key: value}]- (b)"))),(0,r.kt)("h3",{id:"create-relationship-between-2-unrelated-nodes"},"Create relationship between 2 unrelated nodes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (n), (m)\nWHERE n.name = "Allison" AND m.name = "Romeo"\nCREATE (n)-[:KNOWS]- (m)\n')),(0,r.kt)("p",null,"Alternative with ",(0,r.kt)("inlineCode",{parentName:"p"},"MERGE"),", which ensures that the relationship is created only ",(0,r.kt)("strong",{parentName:"p"},"once")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (n:User {name: "Allison"}), (m:User {name: "Romeo"})\nMERGE (n)-[:KNOWS]- (m)\n')),(0,r.kt)("h3",{id:"create-node-with-multiple-labels"},"Create node with multiple labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CREATE (n:Actor:Director)\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"update"},"Update"),(0,r.kt)("h3",{id:"update-node-properties-add-new-or-modify"},"Update node properties (add new or modify)"),(0,r.kt)("p",null,"Add new ",(0,r.kt)("inlineCode",{parentName:"p"},".owns")," property or modify (if exists)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (n)\nWHERE n.name = "Rik"\nSET n.owns = "Audi"\n')),(0,r.kt)("h3",{id:"replace-all-node-properties-for-the-new-ones"},"Replace all node properties for the new ones"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Danger"),": It will delete all previous properties and create ",(0,r.kt)("inlineCode",{parentName:"p"},".plays")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".age")," properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (n)\nWHERE n.name = "Rik"\nSET n = {plays: "Piano", age: 23}\n')),(0,r.kt)("h3",{id:"add-new-node-properties-without-deleting-old-ones"},"Add new node properties without deleting old ones"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Danger"),": If ",(0,r.kt)("inlineCode",{parentName:"p"},".plays")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".age")," properties are already set, it will overwrite them"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (n)\nWHERE n.name = "Rik"\nSET n += {plays: "Piano", age: 23}\n')),(0,r.kt)("h3",{id:"add-new-node-property-if-property-not-already-set"},"Add new node property if property not already set"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (n)\nWHERE n.plays = "Guitar" AND NOT (EXISTS (n.likes))\nSET n.likes = "Movies"\n')),(0,r.kt)("h3",{id:"rename-a-property-in-all-nodes"},"Rename a property in all nodes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE NOT (EXISTS (n.instrument))\nSET n.instrument = n.plays\nREMOVE n.plays\n")),(0,r.kt)("p",null,"Alternative"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE n.instrument is null\nSET n.instrument = n.plays\nREMOVE n.plays\n")),(0,r.kt)("h3",{id:"add-label-to-existing-node"},"Add label to existing node"),(0,r.kt)("p",null,"Adds the ",(0,r.kt)("inlineCode",{parentName:"p"},":Food")," label to nodes id 7  and id 8 "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE id(n) IN [7, 8]\nSET n:Food\n")),(0,r.kt)("h3",{id:"creates-the-node-if-not-exists-and-updates-or-creates-a-property"},"Creates the node if not exists and updates (or creates) a property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MERGE (n:Person {name: "Rik"})\nSET n.owns = "Audi"\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"delete"},"Delete"),(0,r.kt)("h3",{id:"delete-nodes"},"Delete nodes"),(0,r.kt)("p",null,"To ",(0,r.kt)("strong",{parentName:"p"},"delete a node")," (p.e. id 5 ), first we need to ",(0,r.kt)("strong",{parentName:"p"},"delete its relationships"),". Then, the node can be deleted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)-[r]-()\nWHERE id(n) = 5\nDELETE r, n\n")),(0,r.kt)("p",null,"To ",(0,r.kt)("strong",{parentName:"p"},"delete multiple nodes")," (must have their relationships previously deleted)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE id(n) IN [1, 2, 3]\nDELETE n\n")),(0,r.kt)("h3",{id:"deletes-a-property-in-a-specific-node"},"Deletes a property in a specific node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (n)\nWHERE n:Person AND n.name = "Rik" AND n.plays is NOT null\nREMOVE n.plays\n')),(0,r.kt)("p",null,"Alternative"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (n)\nWHERE n:Person AND n.name = "Rik" AND EXISTS (n.plays)\nREMOVE n.plays\n')),(0,r.kt)("h3",{id:"delete-a-label-from-all-nodes"},"Delete a label from all nodes"),(0,r.kt)("p",null,"Deletes the ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," label from ",(0,r.kt)("strong",{parentName:"p"},"all")," nodes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nREMOVE n:Person\n")),(0,r.kt)("h3",{id:"delete-a-label-from-nodes-with-specific-labels"},"Delete a label from nodes with specific labels"),(0,r.kt)("p",null,"Deletes the ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," label from nodes with ",(0,r.kt)("inlineCode",{parentName:"p"},":Food")," and ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE n:Food:Person\nREMOVE n:Person\n")),(0,r.kt)("h3",{id:"delete-multiple-labels-from-nodes"},"Delete multiple labels from nodes"),(0,r.kt)("p",null,"Deletes the ",(0,r.kt)("inlineCode",{parentName:"p"},":Food")," and ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," labels from nodes which have ",(0,r.kt)("strong",{parentName:"p"},"both")," labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nWHERE n:Food:Person\nREMOVE n:Food:Person\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Danger"),": Deletes the ",(0,r.kt)("inlineCode",{parentName:"p"},":Food")," and ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," labels from nodes which have ",(0,r.kt)("inlineCode",{parentName:"p"},":Food")," or ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," or ",(0,r.kt)("inlineCode",{parentName:"p"},":Food:Person")," labels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nREMOVE n:Food:Person\n")),(0,r.kt)("h3",{id:"delete-entire-database"},"Delete entire database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nOPTIONAL MATCH (n)-[r]-()\nDELETE n, r\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"other-clauses"},"Other clauses"),(0,r.kt)("h3",{id:"show-execution-plan"},"Show execution plan"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"PROFILE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"EXPLAIN")," before the query"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PROFILE"),": Shows the execution plan, query information and ",(0,r.kt)("strong",{parentName:"p"},"db hits"),". Example: Cypher version: CYPHER 3.0, planner: COST, runtime: INTERPRETED. 84 total db hits in 32 ms."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EXPLAIN"),": Shows the execution plan and query information. Example: Cypher version: CYPHER 3.0, planner: COST, runtime: INTERPRETED."),(0,r.kt)("h3",{id:"count"},"Count"),(0,r.kt)("p",null,"Count all nodes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH (n)\nRETURN count(n)\n")),(0,r.kt)("p",null,"Count all relationships"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"MATCH ()-- ()\nRETURN count(*);\n")),(0,r.kt)("h3",{id:"limit"},"Limit"),(0,r.kt)("p",null,"Returns up to 2 nodes (and their relationships) where there's a property ",(0,r.kt)("inlineCode",{parentName:"p"},"from"),' with "Korea" value'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'MATCH (a:Person)\nWHERE a.from = "Korea"\nRETURN a\nLIMIT 2\n')),(0,r.kt)("h3",{id:"create-unique-property-constraint"},"Create unique property constraint"),(0,r.kt)("p",null,"Make ",(0,r.kt)("inlineCode",{parentName:"p"},".name")," property unique on nodes with ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," label"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CREATE CONSTRAINT ON (n:Person)\nASSERT n.name IS UNIQUE\n")),(0,r.kt)("h3",{id:"drop-unique-property-constraint"},"Drop unique property constraint"),(0,r.kt)("p",null,"Make ",(0,r.kt)("inlineCode",{parentName:"p"},".name")," property unique on nodes with ",(0,r.kt)("inlineCode",{parentName:"p"},":Person")," label"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"DROP CONSTRAINT ON (n:Person)\nASSERT n.name IS UNIQUE\n```## Useful Cypher Queries for Neo4J\n\n\nFind the unique labels that appear in the database:\n\n```bash\nmatch n\nreturn distinct labels(n)\n")),(0,r.kt)("p",null,"Find the unique relationships that appear in the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"match n-[r]-()\nreturn distinct type(r)\n")),(0,r.kt)("p",null,"Combine the previous two queries to return the unique combinations relationships and labels in the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"match n-[r]-()\nreturn distinct labels(n), type(r)\n")),(0,r.kt)("p",null,"Find nodes that don't have any relationships:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n-[r?]-()\nwhere r is null\nreturn n\n")),(0,r.kt)("p",null,"Find all nodes that have a specific property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n\nwhere has(n.someProperty)\nreturn n\n")),(0,r.kt)("p",null,"Find all nodes that have a specific relationship (regardless of the direction of the relationship):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n-[:SOME_RELATIONSHIP]-()\nreturn distinct n\n")),(0,r.kt)("p",null,"Show the nodes and a count of the number of relationships that they have:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n-[r]-()\nreturn n, count(r) as rel_count\norder by rel_count desc\n")),(0,r.kt)("p",null,"Get a count of all nodes in your graph:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n\nreturn count(n)\n")),(0,r.kt)("p",null,"To delete all nodes in a database (first you have to delete all relationships)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n-[r]-()\ndelete r\n\nstart n=node(*)\nmatch n\ndelete n\n")),(0,r.kt)("p",null,"A simple query to get nodes of a certain category that match a certain property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'match (n:Person) where n.name="Tim" return n\n')),(0,r.kt)("h2",{id:"useful-cypher-queries-for-neo4j"},"Useful Cypher Queries for Neo4J"),(0,r.kt)("p",null,"Find the unique labels that appear in the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"match n\nreturn distinct labels(n)\n")),(0,r.kt)("p",null,"Find the unique relationships that appear in the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"match n-[r]-()\nreturn distinct type(r)\n")),(0,r.kt)("p",null,"Combine the previous two queries to return the unique combinations relationships and labels in the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"match n-[r]-()\nreturn distinct labels(n), type(r)\n")),(0,r.kt)("p",null,"Find nodes that don't have any relationships:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n-[r?]-()\nwhere r is null\nreturn n\n")),(0,r.kt)("p",null,"Find all nodes that have a specific property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n\nwhere has(n.someProperty)\nreturn n\n")),(0,r.kt)("p",null,"Find all nodes that have a specific relationship (regardless of the direction of the relationship):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n-[:SOME_RELATIONSHIP]-()\nreturn distinct n\n")),(0,r.kt)("p",null,"Show the nodes and a count of the number of relationships that they have:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n-[r]-()\nreturn n, count(r) as rel_count\norder by rel_count desc\n")),(0,r.kt)("p",null,"Get a count of all nodes in your graph:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n\nreturn count(n)\n")),(0,r.kt)("p",null,"To delete all nodes in a database (first you have to delete all relationships)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"start n=node(*)\nmatch n-[r]-()\ndelete r\n\nstart n=node(*)\nmatch n\ndelete n\n")),(0,r.kt)("p",null,"A simple query to get nodes of a certain category that match a certain property"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'match (n:Person) where n.name="Tim" return n\n')))}u.isMDXComponent=!0},92099:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-38ec9d8e27c926288ad1334767bdcc79.jpg"}}]);