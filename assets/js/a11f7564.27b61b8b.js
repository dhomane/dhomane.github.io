"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[28527],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),h=p(a),d=i,u=h["".concat(o,".").concat(d)]||h[d]||c[d]||r;return a?n.createElement(u,l(l({ref:t},m),{},{components:a})):n.createElement(u,l({ref:t},m))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},90802:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_position:8980,slug:"2022-10-12",title:"Python - RE",authors:"mpolinowski",tags:["Python"],description:"Using Regular Expressions with Python."},l=void 0,s={unversionedId:"Development/Python/2022-10-12-python-regular-expressions/index",id:"Development/Python/2022-10-12-python-regular-expressions/index",title:"Python - RE",description:"Using Regular Expressions with Python.",source:"@site/docs/Development/Python/2022-10-12-python-regular-expressions/index.md",sourceDirName:"Development/Python/2022-10-12-python-regular-expressions",slug:"/Development/Python/2022-10-12-python-regular-expressions/2022-10-12",permalink:"/docs/Development/Python/2022-10-12-python-regular-expressions/2022-10-12",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Python/2022-10-12-python-regular-expressions/index.md",tags:[{label:"Python",permalink:"/docs/tags/python"}],version:"current",sidebarPosition:8980,frontMatter:{sidebar_position:8980,slug:"2022-10-12",title:"Python - RE",authors:"mpolinowski",tags:["Python"],description:"Using Regular Expressions with Python."},sidebar:"tutorialSidebar",previous:{title:"Python - Working with REST API Requests",permalink:"/docs/Development/Python/2022-10-13-python-rest-api/2022-10-13"},next:{title:"Python - The Filesystem",permalink:"/docs/Development/Python/2022-10-10-python-filesystem/2022-10-10"}},o={},p=[{value:"Regular Expressions",id:"regular-expressions",level:2},{value:"Metacharacters",id:"metacharacters",level:3},{value:"Special Sequences",id:"special-sequences",level:3},{value:"Sets",id:"sets",level:3},{value:"Examples",id:"examples",level:2},{value:"Filenames",id:"filenames",level:3},{value:"Filepaths",id:"filepaths",level:3},{value:"Email Addresses",id:"email-addresses",level:3},{value:"Email Addresses",id:"email-addresses-1",level:3},{value:"IP Addresses",id:"ip-addresses",level:3}],m={toc:p};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Sham Sui Po, Hong Kong",src:a(24911).Z,width:"1500",height:"548"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#regular-expressions"},"Regular Expressions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#metacharacters"},"Metacharacters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#special-sequences"},"Special Sequences")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#sets"},"Sets")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#examples"},"Examples"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#filenames"},"Filenames")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#filepaths"},"Filepaths")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#email-addresses"},"Email Addresses")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#email-addresses-1"},"Email Addresses")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#ip-addresses"},"IP Addresses"))))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/python-re"},"Github Repository")),(0,i.kt)("h2",{id:"regular-expressions"},"Regular Expressions"),(0,i.kt)("h3",{id:"metacharacters"},"Metacharacters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[]"),": A set of characters ",(0,i.kt)("inlineCode",{parentName:"li"},"[a-m]")," - remove brackets to get sequential matches ",(0,i.kt)("inlineCode",{parentName:"li"},"[arm]")," vs ",(0,i.kt)("inlineCode",{parentName:"li"},"arm")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\"),": Signals a special sequence (can also be used to escape special characters) ",(0,i.kt)("inlineCode",{parentName:"li"},"\\d")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"."),": Any character (except newline character) ",(0,i.kt)("inlineCode",{parentName:"li"},"he..o")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"^"),": Starts with ",(0,i.kt)("inlineCode",{parentName:"li"},"^hello")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$"),": Ends with ",(0,i.kt)("inlineCode",{parentName:"li"},"planet$")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*"),": Zero or more occurrences ",(0,i.kt)("inlineCode",{parentName:"li"},"he.*o")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"+"),": One or more occurrences ",(0,i.kt)("inlineCode",{parentName:"li"},"he.+o")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"?"),": Zero or one occurrences ",(0,i.kt)("inlineCode",{parentName:"li"},"he.?o")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{}"),": Exactly the specified number of occurrences ",(0,i.kt)("inlineCode",{parentName:"li"},"he.{2}o")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{n,m}"),": Match between ",(0,i.kt)("inlineCode",{parentName:"li"},"n")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"m")," number of occurrences ",(0,i.kt)("inlineCode",{parentName:"li"},"he.{1,2}o")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"|"),": Either or ",(0,i.kt)("inlineCode",{parentName:"li"},"falls|stay"))),(0,i.kt)("h3",{id:"special-sequences"},"Special Sequences"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\d"),": Matches any decimal digit; this is equivalent to the class ",(0,i.kt)("inlineCode",{parentName:"li"},"[0-9]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\D"),": Matches any non-digit character; this is equivalent to the class ",(0,i.kt)("inlineCode",{parentName:"li"},"[^0-9]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\s"),": Matches any whitespace character; this is equivalent to the class ",(0,i.kt)("inlineCode",{parentName:"li"},"[ \\t\\n\\r\\f\\v]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\S"),": Matches any non-whitespace character; this is equivalent to the class ",(0,i.kt)("inlineCode",{parentName:"li"},"[^ \\t\\n\\r\\f\\v]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\w"),": Matches any alphanumeric character; this is equivalent to the class ",(0,i.kt)("inlineCode",{parentName:"li"},"[a-zA-Z0-9_]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\W"),": Matches any non-alphanumeric character; this is equivalent to the class ",(0,i.kt)("inlineCode",{parentName:"li"},"[^a-zA-Z0-9_]"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\A"),": Returns a match if the specified characters are at the beginning of the string ",(0,i.kt)("inlineCode",{parentName:"li"},"\\AThe")," "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\b"),": Returns a match where the specified characters are at the beginning or at the end of a word\n(the ",(0,i.kt)("inlineCode",{parentName:"li"},'r"')," in the beginning is making sure that the string is being treated as a raw string)",(0,i.kt)("inlineCode",{parentName:"li"},'r"\\bain"'),(0,i.kt)("inlineCode",{parentName:"li"},'r"ain"\\b')," "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\B"),": Returns a match where the specified characters are present, but NOT at the beginning (or at the end) of a word (the ",(0,i.kt)("inlineCode",{parentName:"li"},'r"')," in the beginning is making sure that the string is being treated as a raw string",(0,i.kt)("inlineCode",{parentName:"li"},") "),'r"\\Bain"',(0,i.kt)("inlineCode",{parentName:"li"}," "),'r"ain\\B` '),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\Z"),": Returns a match if the specified characters are at the end of the string ",(0,i.kt)("inlineCode",{parentName:"li"},"Spain\\Z"))),(0,i.kt)("h3",{id:"sets"},"Sets"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[arn]"),": Returns a match where one of the specified characters (a, r, or n) is present \t"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[a-n]"),": Returns a match for any lower case character, alphabetically between a and n \t"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[^arn]"),": Returns a match for any character EXCEPT a, r, and n \t"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[0123]"),": Returns a match where any of the specified digits (0, 1, 2, or 3) are present \t"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[0-9]"),": Returns a match for any digit between 0 and 9 \t"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[0-5][0-9]"),": Returns a match for any two-digit numbers from 00 and 59 \t"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[a-zA-Z]"),": Returns a match for any character alphabetically between a and z, lower case OR upper case \t"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[+]"),": In sets, +, *, ., |, (), $,{} has no special meaning, so ","[+]"," means: return a match for any + character in the string")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"filenames"},"Filenames"),(0,i.kt)("p",null,"Search for strings in filenames:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import re\n\nfrom html_source import html\n\nfiles = [\n    "2022-10-13_archive.zip",\n    "2022-10-13.txt",\n    "2022-09-30_archive.zip",\n    "2022-09-30.txt",\n    "2022-09-15_archive.zip",\n    "2022-09-15.txt"\n    ]\n\n# get archives from a specified month\n\nfor path in files:\n    archive_match = re.search("[^ ]+_archive.zip", path)\n    # skip none archives\n    if archive_match != None:\n        # search for date\n        if "2022-09-" in archive_match.string: \n            print(archive_match.string)\n            \n# => 2022-09-30_archive.zip\n# => 2022-09-15_archive.zip\n')),(0,i.kt)("h3",{id:"filepaths"},"Filepaths"),(0,i.kt)("p",null,"Get archives from a specified month from path"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"import re\nfrom pathlib import Path\n\nroot_dir = Path('files')\nfilenames = root_dir.iterdir()\nfile_list = list(filenames)\n# print(file_list)\nfiles = [file.name for file in file_list]\n# print(files)\n\nzip_pattern = re.compile('[0-9]{4}-[0-9]{2}-[0-9]{2}_archive.zip')\ndate_pattern = re.compile('2022-09[^ ]+')\n\n# filter all non-zip files\nmatching_container = [file for file in files if zip_pattern.findall(file)]\n# get zip files of specific date\nmatching_date = [file for file in matching_container if date_pattern.findall(file)]\n\nprint(matching_date)\n# => ['2022-09-15_archive.zip', '2022-09-30_archive.zip']\n")),(0,i.kt)("h3",{id:"email-addresses"},"Email Addresses"),(0,i.kt)("p",null,"Extract Emails from text:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import re\n\ntext = "Spicy jalapeno_bacon@ipsum.com dolor amet turducken biltong frankfurter shankle porchetta. Tail buffalo anim, capicola eiusmod cupim beef ribs tenderloin shank@beef.br biltong. Laboris meatloaf swine, esse cillum est sausage t-bone dolor adipisicing ex-corned@beef.co.uk aliqua porchetta. Boudin fatback chuck meatball laborum meatloaf ground round, filet mignon.prosciutto@shankle.nz pig."\n')),(0,i.kt)("p",null,"For Emails that only use characters from ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"z"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"# [a-z] = match 1 letter between a-z\n# [a-z]+ = match n letter between a-z\nemail_pattern = re.compile(\"[a-z]+@[a-z]+.[a-z]+\")\nemail_matches = email_pattern.findall(text)\nprint(email_matches)\n# => ['bacon@ipsum.com', 'shank@beef.br', 'corned@beef.co', 'prosciutto@shankle.nz']\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[^ ]")," : Match everything but white space"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\."),' : Match a "dot" (escaping the ',(0,i.kt)("inlineCode",{parentName:"li"},".")," meta character)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"{2,}")," : TLD has 2 or more characters")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"email2_pattern = re.compile(\"[^ ]+@[^ ]+\\.[a-z]{2,}\")\nemail2_matches = email2_pattern.findall(text)\nprint(email2_matches)\n# => ['jalapeno_bacon@ipsum.com ', 'shank@beef.br ', 'ex-corned@beef.co.uk ', 'mignon.prosciutto@shankle.nz ']\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"(?:com|co.uk)")," : Match only co.uk and com addresses")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"email3_pattern = re.compile(\"[^ ]+@[^ ]+\\.(?:com|co.uk)\")\nemail3_matches = email3_pattern.findall(text)\n# => ['jalapeno_bacon@ipsum.com', 'ex-corned@beef.co.uk']\nprint(email3_matches)\n")),(0,i.kt)("h3",{id:"email-addresses-1"},"Email Addresses"),(0,i.kt)("p",null,"Only extract ",(0,i.kt)("inlineCode",{parentName:"p"},".com")," URLs from html:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"https?")," : match http and https"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"(?:www.)?")," : match with or w/o www"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[^ ]+")," : match everything but white space"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"\\.com/")," : only match .com urls"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'[^ ][^"]+'),' : break when you hit a white space or "')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"from html_source import html\n\nurl_pattern = re.compile('https?://(?:www.)?[^ ]+\\.com/[^ ][^\"]+')\nurl_matches = url_pattern.findall(html)\nprint(url_matches)\n")),(0,i.kt)("h3",{id:"ip-addresses"},"IP Addresses"),(0,i.kt)("p",null,"Extract specific IPs from file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"ip_file = 'ip.txt'\n\nwith open(ip_file, 'r') as file:\n    file_content = file.read()\n\n# only match ip addresses with a 2 in the third octet\nip_pattern = re.compile(\"[0-9]{3}\\.[0-9]{3}\\.2\\.[0-9]{3}\")\nip_matches = ip_pattern.findall(file_content)\nprint(ip_matches)\n")))}c.isMDXComponent=!0},24911:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-5f44d483789c3ce79f05418f930f5cd2.jpg"}}]);