"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[21861],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),g=i,m=d["".concat(p,".").concat(g)]||d[g]||c[g]||l;return t?a.createElement(m,r(r({ref:n},u),{},{components:t})):a.createElement(m,r({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},17438:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const l={sidebar_position:9920,slug:"2022-11-10",title:"Go Gitlab CI Pipeline",authors:"mpolinowski",tags:["Go","Gitlab"],description:"Build your Go app in Gitlab"},r=void 0,o={unversionedId:"DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline/index",id:"DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline/index",title:"Go Gitlab CI Pipeline",description:"Build your Go app in Gitlab",source:"@site/docs/DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline/index.md",sourceDirName:"DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline",slug:"/DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline/2022-11-10",permalink:"/docs/DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline/2022-11-10",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/GitOps/2022-11-10-go-gitlab-ci-pipeline/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"},{label:"Gitlab",permalink:"/docs/tags/gitlab"}],version:"current",sidebarPosition:9920,frontMatter:{sidebar_position:9920,slug:"2022-11-10",title:"Go Gitlab CI Pipeline",authors:"mpolinowski",tags:["Go","Gitlab"],description:"Build your Go app in Gitlab"},sidebar:"tutorialSidebar",previous:{title:"GitOps",permalink:"/docs/category/gitops"},next:{title:"Install Gitlab with Docker-Compose (Debian Bullseye)",permalink:"/docs/DevOps/GitOps/2022-03-16--gitlab-docker-compose-on-localhost/2022-03-16"}},p={},s=[{value:"Hello Go",id:"hello-go",level:2},{value:"Initializing the Project",id:"initializing-the-project",level:3},{value:"Verify the Project",id:"verify-the-project",level:3},{value:"Test Build",id:"test-build",level:3},{value:"Dockerize",id:"dockerize",level:2},{value:"Running the Build",id:"running-the-build",level:3},{value:"Gitlab CI Pipeline",id:"gitlab-ci-pipeline",level:2},{value:"Register a Runner",id:"register-a-runner",level:3},{value:"Download and install binary",id:"download-and-install-binary",level:4},{value:"Command to register runner",id:"command-to-register-runner",level:4},{value:"Run the Pipeline",id:"run-the-pipeline",level:2},{value:"Download the Artifacts",id:"download-the-artifacts",level:2}],u={toc:s};function c(e){let{components:n,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Shenzhen, China",src:t(20293).Z,width:"1500",height:"546"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#hello-go"},"Hello Go"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#initializing-the-project"},"Initializing the Project")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#verify-the-project"},"Verify the Project")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#test-build"},"Test Build")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#dockerize"},"Dockerize"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#running-the-build"},"Running the Build")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#gitlab-ci-pipeline"},"Gitlab CI Pipeline"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#register-a-runner"},"Register a Runner"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#download-and-install-binary"},"Download and install binary")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#command-to-register-runner"},"Command to register runner")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#run-the-pipeline"},"Run the Pipeline")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#download-the-artifacts"},"Download the Artifacts"))),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/go-cicd"},"Github Repository")),(0,i.kt)("h2",{id:"hello-go"},"Hello Go"),(0,i.kt)("h3",{id:"initializing-the-project"},"Initializing the Project"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir hello-go && cd hello-go\n")),(0,i.kt)("p",null,"Create a web hello world and a test function that can verify our application is operational:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"main.go")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "log"\n    "net/http"\n\n    "github.com/gorilla/mux"\n)\n\nvar port = "6969"\n\nfunc main() {\n    log.Fatal(http.ListenAndServe(":"+port, router()))\n}\n\nfunc router() http.Handler {\n    r := mux.NewRouter()\n    r.Path("/hi").Methods(http.MethodGet).HandlerFunc(greet)\n    return r\n}\n\nfunc greet(w http.ResponseWriter, req *http.Request) {\n    _, _ = w.Write([]byte("Go la la!"))\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"main-test.go")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "net/http"\n    "net/http/httptest"\n    "testing"\n)\n\nfunc TestRouter(t *testing.T) {\n    w := httptest.NewRecorder()\n    req := httptest.NewRequest(http.MethodGet, "/hi", nil)\n    router().ServeHTTP(w, req)\n\n    expected := "Go la la!"\n    actual := w.Body.String()\n    if expected != actual {\n        t.Fatalf("Expected %s but got %s", expected, actual)\n    }\n}\n')),(0,i.kt)("p",null,"And initialize the project with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go mod init hello-go\ngo: creating new go.mod: module hello-go\ngo: to add module requirements and sums:\n        go mod tidy\n")),(0,i.kt)("p",null,"This will generate our Go modules file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"module hello-go\n\ngo 1.19\n\nrequire github.com/gorilla/mux v1.8.0\n")),(0,i.kt)("p",null,"Now we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"tidy")," command to pull the required dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go mod tidy\ngo: finding module for package github.com/gorilla/mux\ngo: downloading github.com/gorilla/mux v1.8.0\ngo: found github.com/gorilla/mux in github.com/gorilla/mux v1.8.0\n")),(0,i.kt)("h3",{id:"verify-the-project"},"Verify the Project"),(0,i.kt)("p",null,"Run the hello world application with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go run ./main.go\n")),(0,i.kt)("p",null,"And verify that the hello world string is served as expected:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:6969/hi\nGo la la!\n")),(0,i.kt)("p",null,"And now to using our automated test:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go test ./...\nok      hello-go        0.003s\n")),(0,i.kt)("p",null,"Looking good \ud83d\udc4d"),(0,i.kt)("h3",{id:"test-build"},"Test Build"),(0,i.kt)("p",null,"We can try a build and verify that the compiled application is working:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go build -o hi .\n./hi\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:6969/hi\nGo la la!\n")),(0,i.kt)("h2",{id:"dockerize"},"Dockerize"),(0,i.kt)("p",null,"Now we can use Docker to first build the hello world application inside a (big - ",(0,i.kt)("em",{parentName:"p"},"352MB"),") ",(0,i.kt)("inlineCode",{parentName:"p"},"golang:alpine")," Docker container. And then copy the build binary into a (tiny ",(0,i.kt)("em",{parentName:"p"},"5.54MB"),") Alpine container ready for deployment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM golang:alpine as build\n\nWORKDIR /build\n\nCOPY . .\n\nRUN go mod tidy\n\nRUN go build -o hi\n\nFROM alpine:latest\n\nCOPY --from=build /build/hi /usr/local/bin/hi\n\nENTRYPOINT ["/usr/local/bin/hi"]\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note")," that both source images are based on Alpine linux to reduce the container size. You ",(0,i.kt)("strong",{parentName:"p"},"cannot")," use. e.g. the default ",(0,i.kt)("inlineCode",{parentName:"p"},"golang:latest")," container (",(0,i.kt)("em",{parentName:"p"},"non-Alpine"),") to build the binary and then run it inside an Alpine container. (",(0,i.kt)("em",{parentName:"p"},"How does that affect cross-compiling?"),")")),(0,i.kt)("h3",{id:"running-the-build"},"Running the Build"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'docker build -t hi-there .\n\nSending build context to Docker daemon   6.81MB\nStep 1/8 : FROM golang:alpine as build\n ---\x3e 6e31dcd72d8f\nStep 2/8 : WORKDIR /go/src/app\n ---\x3e Running in 793c410f2896\nRemoving intermediate container 793c410f2896\n ---\x3e 4b8c2620281a\nStep 3/8 : COPY . .\n ---\x3e b244b9819dba\nStep 4/8 : RUN go mod tidy\n ---\x3e Running in 287c8695c309\ngo: downloading github.com/gorilla/mux v1.8.0\nRemoving intermediate container 287c8695c309\n ---\x3e 8ba74df6c6e1\nStep 5/8 : RUN go build -o hi\n ---\x3e Running in d910102a1d38\nRemoving intermediate container d910102a1d38\n ---\x3e d72a114948bc\nStep 6/8 : FROM alpine:latest\n ---\x3e 9c6f07244728\nStep 7/8 : COPY --from=build /go/src/app/hi /usr/local/bin/hi\n ---\x3e 86f8a7da8842\nStep 8/8 : ENTRYPOINT ["/usr/local/bin/hi"]\n ---\x3e Running in bacdb35f27ec\nRemoving intermediate container bacdb35f27ec\n ---\x3e b4a259e2f0df\nSuccessfully built b4a259e2f0df\nSuccessfully tagged hi-there:latest\n')),(0,i.kt)("p",null,"This generated two docker images:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker images\nREPOSITORY                                TAG             IMAGE ID       CREATED          SIZE\nhi-there                                  latest          b4a259e2f0df   20 seconds ago   12.3MB\n<none>                                    <none>          d72a114948bc   22 seconds ago   367MB\n")),(0,i.kt)("p",null,"The first one is our application image and the second one is the build image that can be removed - ",(0,i.kt)("inlineCode",{parentName:"p"},"docker rmi d72a114948bc"),"."),(0,i.kt)("p",null,"We can test the application by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -ti -p 6969:6969 --name hi-there  hi-there /bin/ash /usr/local/bin/hi\n")),(0,i.kt)("p",null,"And, again, verify that everything is running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'docker ps\n\nIMAGE      COMMAND                  PORTS                    NAMES\nhi-there   "/usr/local/bin/hi /\u2026"   0.0.0.0:6969->6969/tcp   hi-there\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl localhost:6969/hi\nGo la la!\n")),(0,i.kt)("h2",{id:"gitlab-ci-pipeline"},"Gitlab CI Pipeline"),(0,i.kt)("p",null,"The project now looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"hello-go\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 hi\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 main_test.go\n\u2514\u2500\u2500 .gitlab-ci.yml\n")),(0,i.kt)("p",null,"The following commands can be used to install all dependencies, to run the application:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"go get -v -d ./...\ngo test -v ./...\ngo run src/main.go\n")),(0,i.kt)("p",null,"Now everything is set and tested we need to write a ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml")," file to configure a build pipeline:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"image: golang:latest\n\nvariables:\n  REPO: my.gitlab.com\n  GROUP: server_management\n  PROJECT: go-hello\n\nstages:\n - test\n - build\n\nbefore_script:\n  - mkdir -p $GOPATH/src/$REPO/$GROUP $GOPATH/src/_/builds\n  - cp -r $CI_PROJECT_DIR $GOPATH/src/$REPO/$GROUP/$PROJECT\n  - ln -s $GOPATH/src/$REPO/$GROUP $GOPATH/src/_/builds/$GROUP\n  - go get -v -d ./...\n\nunit_tests:\n  stage: test\n  script:\n    - go test -v ./...\n\nbuild:\n  stage: build\n  script:\n    - go build -v -o hi\n    - ls -la\n    - pwd\n  only:\n    - main\n  artifacts:\n    paths:\n      - /builds/server_management/hello-go/hi\n    expire_in: 1 hour\n")),(0,i.kt)("h3",{id:"register-a-runner"},"Register a Runner"),(0,i.kt)("p",null,"Gitlab needs a minion process to run pipeline. The following commands will install the runner on a LINUX server."),(0,i.kt)("h4",{id:"download-and-install-binary"},"Download and install binary"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Download the binary for your system\ncurl -L --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64\n\n# Give it permission to execute\nchmod +x /usr/local/bin/gitlab-runner\n\n# Create a GitLab Runner user\nuseradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash\n\n# Install and run as a service\ngitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner\ngitlab-runner start\n")),(0,i.kt)("h4",{id:"command-to-register-runner"},"Command to register runner"),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"Registration Token")," can be found in the project settings under ",(0,i.kt)("strong",{parentName:"p"},"CI/CD"),":"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Go Gitlab CI Pipeline",src:t(38578).Z,width:"1224",height:"341"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"gitlab-runner register --url GITLAB_URL --registration-token REGISTRATION_TOKEN\n\nRegistering runner... succeeded \nEnter an executor: docker\nEnter the default Docker image: golang:alpine\nRunner registered successfully\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Configuration is stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/gitlab-runner/config.toml"),".")),(0,i.kt)("h2",{id:"run-the-pipeline"},"Run the Pipeline"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'...\n\n$ mkdir -p $GOPATH/src/$REPO/$GROUP $GOPATH/src/_/builds\n$ cp -r $CI_PROJECT_DIR $GOPATH/src/$REPO/$GROUP/$PROJECT\n$ ln -s $GOPATH/src/$REPO/$GROUP $GOPATH/src/_/builds/$GROUP\n$ go get -v -d ./...\ngo: downloading github.com/gorilla/mux v1.8.0\n$ go build -v -o hi\ngithub.com/gorilla/mux\nhello-go\nUploading artifacts for successful job\n00:02\nUploading artifacts...\n/builds/server_management/hello-go/hi: found 1 matching files and directories \nUploading artifacts as "archive" to coordinator... 201 Created  id=14602 responseStatus=201 Created token=FZzQWvUQ\nCleaning up project directory and file based variables\n00:00\nJob succeeded\n')),(0,i.kt)("h2",{id:"download-the-artifacts"},"Download the Artifacts"),(0,i.kt)("p",null,"The build binary can be downloaded from:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"https://my.gitlab.com/server_management/hello-go/-/jobs/artifacts/main/browse?job=build"))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Go Gitlab CI Pipeline",src:t(45869).Z,width:"1012",height:"297"})))}c.isMDXComponent=!0},38578:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Go-Gitlab-CI-Pipeline_01-a0f58afd06931e45417b5f65f53fa507.png"},45869:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Go-Gitlab-CI-Pipeline_02-1382e9f65eda0e228fa0255b6b8631d7.png"},20293:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-0795219c47cded4f1a1480a5f18e4c60.jpg"}}]);