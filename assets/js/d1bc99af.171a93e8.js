"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[34254],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=o.createContext({}),l=function(e){var t=o.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(m.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,m=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,p=u["".concat(m,".").concat(h)]||u[h]||d[h]||r;return n?o.createElement(p,i(i({ref:t},c),{},{components:n})):o.createElement(p,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=n(87462),a=(n(67294),n(3905));const r={sidebar_position:9060,slug:"2022-05-05",title:"React Native Context & Hooks",authors:"mpolinowski",tags:["Javascript","React","ReactNative"]},i=void 0,s={unversionedId:"Development/ReactNative/2022-05-05-react-native-context-hooks/index",id:"Development/ReactNative/2022-05-05-react-native-context-hooks/index",title:"React Native Context & Hooks",description:"Victoria Harbour, Hongkong",source:"@site/docs/Development/ReactNative/2022-05-05-react-native-context-hooks/index.md",sourceDirName:"Development/ReactNative/2022-05-05-react-native-context-hooks",slug:"/Development/ReactNative/2022-05-05-react-native-context-hooks/2022-05-05",permalink:"/docs/Development/ReactNative/2022-05-05-react-native-context-hooks/2022-05-05",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/ReactNative/2022-05-05-react-native-context-hooks/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"React",permalink:"/docs/tags/react"},{label:"ReactNative",permalink:"/docs/tags/react-native"}],version:"current",sidebarPosition:9060,frontMatter:{sidebar_position:9060,slug:"2022-05-05",title:"React Native Context & Hooks",authors:"mpolinowski",tags:["Javascript","React","ReactNative"]},sidebar:"tutorialSidebar",previous:{title:"React Native Reducer",permalink:"/docs/Development/ReactNative/2022-05-06-react-native-reducer/2022-05-06"},next:{title:"React Native Hooks",permalink:"/docs/Development/ReactNative/2022-05-04-react-native-hooks/2022-05-04"}},m={},l=[{value:"Setup",id:"setup",level:2},{value:"Context Consumer vs useContext Hooks",id:"context-consumer-vs-usecontext-hooks",level:2},{value:"Navbar",id:"navbar",level:3},{value:"Before (Class Component)",id:"before-class-component",level:4},{value:"After (Functional Component)",id:"after-functional-component",level:4},{value:"ToDo List",id:"todo-list",level:3},{value:"Before (Class Component)",id:"before-class-component-1",level:4},{value:"After (Functional Component)",id:"after-functional-component-1",level:4},{value:"Creating Context with Functional Components",id:"creating-context-with-functional-components",level:2},{value:"Authentication Context",id:"authentication-context",level:3},{value:"Before (Class Component)",id:"before-class-component-2",level:4},{value:"After (Functional Component)",id:"after-functional-component-2",level:4},{value:"Theme Context",id:"theme-context",level:3},{value:"Before (Class Component)",id:"before-class-component-3",level:4},{value:"After (Functional Component)",id:"after-functional-component-3",level:4},{value:"Handling To-Do Items using Context",id:"handling-to-do-items-using-context",level:2},{value:"Adding Items using Context",id:"adding-items-using-context",level:3},{value:"Removing Items using Context",id:"removing-items-using-context",level:3}],c={toc:l};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Victoria Harbour, Hongkong",src:n(45065).Z,width:"1500",height:"565"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#setup"},"Setup")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#context-consumer-vs-usecontext-hooks"},"Context Consumer vs useContext Hooks"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#navbar"},"Navbar"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#before-class-component"},"Before (Class Component)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#after-functional-component"},"After (Functional Component)")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#todo-list"},"ToDo List"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#before-class-component-1"},"Before (Class Component)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#after-functional-component-1"},"After (Functional Component)")))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#creating-context-with-functional-components"},"Creating Context with Functional Components"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#authentication-context"},"Authentication Context"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#before-class-component-2"},"Before (Class Component)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#after-functional-component-2"},"After (Functional Component)")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#theme-context"},"Theme Context"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#before-class-component-3"},"Before (Class Component)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#after-functional-component-3"},"After (Functional Component)")))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#handling-to-do-items-using-context"},"Handling To-Do Items using Context"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#adding-items-using-context"},"Adding Items using Context")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#removing-items-using-context"},"Removing Items using Context"))))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/react-native-context-hooks"},"Github Repository")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g expo-cli\nexpo init react-native-context-hooks\n")),(0,a.kt)("p",null,"Choose the ",(0,a.kt)("strong",{parentName:"p"},"blank")," template and run the client:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd react-native-context-hooks\nnpm install styled-components\nnpm start\n")),(0,a.kt)("p",null,"I can test code by scanning the QR Code using the ",(0,a.kt)("strong",{parentName:"p"},"Expo Go")," app under Android or by pressing the ",(0,a.kt)("inlineCode",{parentName:"p"},"w")," key to activate a web preview."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"error:0308010C:digital envelope routines::unsupported"),": Newer versions of Node.js use OpenSSLv3 that brought some ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.openssl.org/index.php/OpenSSL_3.0#Upgrading_to_OpenSSL_3.0_from_OpenSSL_1.0.2"},"breaking changes"),". Can be fixed (",(0,a.kt)("strong",{parentName:"p"},">=Nodejs v17"),") by adding the following option to the start script inside your ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," -> ",(0,a.kt)("inlineCode",{parentName:"p"},'"start": "export NODE_OPTIONS=--openssl-legacy-provider && expo start"'))),(0,a.kt)("h2",{id:"context-consumer-vs-usecontext-hooks"},"Context Consumer vs useContext Hooks"),(0,a.kt)("p",null,"In a ",(0,a.kt)("a",{parentName:"p",href:"obsidian://open?vault=Obsidian%20Vault&file=2022-05-03-react-native-contextapi%2F2022-05-03-react-native-contextapi"},"previous step")," I created an React Native application that used the React Context API using Context Consumers in Class components. Thanks to the ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext")," hook we can now simplify those components."),(0,a.kt)("h3",{id:"navbar"},"Navbar"),(0,a.kt)("h4",{id:"before-class-component"},"Before (Class Component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {Text} from 'react-native'\n\nimport { NavBackground, NavHeader, NavTabs, NavTabsHeader, ThemeToggle } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\n\nclass Navbar extends React.Component {\n    render() {\n        \n        return (\n            <ThemeContext.Consumer >\n                {(context) => {\n                    const { isDarkTheme, darkTheme, lightTheme, changeTheme } = context\n                    // if isDarkTheme is true return dark state / else light\n                    const theme = isDarkTheme ? darkTheme : lightTheme\n                    return (\n                        <NavBackground style={theme}>\n                            <NavHeader style={theme}>Company Inc.</NavHeader>\n                            <NavTabs>\n                                <NavTabsHeader>Home</NavTabsHeader>\n                                <NavTabsHeader>Contact</NavTabsHeader>\n                                <ThemeToggle onPress={changeTheme}>\n                                    <Text>{theme.text}</Text>\n                                </ThemeToggle>\n                            </NavTabs>\n                        </NavBackground>\n                    )\n                }}\n            </ThemeContext.Consumer>\n        )\n    }\n }\n\n export default Navbar\n")),(0,a.kt)("h4",{id:"after-functional-component"},"After (Functional Component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {useContext} from 'react'\nimport {Text} from 'react-native'\n\nimport { NavBackground, NavHeader, NavTabs, NavTabsHeader, ThemeToggle } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\n\nconst Navbar = () => {\n    const { isDarkTheme, darkTheme, lightTheme, changeTheme } = useContext(ThemeContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n    return (\n        <NavBackground style={theme}>\n            <NavHeader style={theme}>Company Inc.</NavHeader>\n            <NavTabs>\n                <NavTabsHeader>Home</NavTabsHeader>\n                <NavTabsHeader>Contact</NavTabsHeader>\n                <ThemeToggle onPress={changeTheme}>\n                    <Text>{theme.text}</Text>\n                </ThemeToggle>\n            </NavTabs>\n        </NavBackground>\n    )\n\n}\n\n export default Navbar\n")),(0,a.kt)("h3",{id:"todo-list"},"ToDo List"),(0,a.kt)("h4",{id:"before-class-component-1"},"Before (Class Component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {Text} from 'react-native'\n\nimport { TodoBackground, TodoItem, LoginView } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\n\nclass ToDoList extends React.Component {\n    render() {\n        return (\n            <AuthContext.Consumer >\n                {(authContext) => {\n                    return (\n                        <ThemeContext.Consumer >\n                            {(themeContext) => {\n                                const { isLoggedIn, changeAuthStatus }  = authContext\n                                const { isDarkTheme, darkTheme, lightTheme } = themeContext\n                                // if isDarkTheme is true return dark state / else light\n                                const theme = isDarkTheme ? darkTheme : lightTheme\n                                if (isLoggedIn) {\n                                return (\n                                    <TodoBackground style={theme}>\n                                        <TodoItem>One thing to do</TodoItem>\n                                        <TodoItem>Another thing to do</TodoItem>\n                                        <TodoItem>And one more thing</TodoItem>\n                                        <TodoItem onPress={changeAuthStatus}>\n                                            <Text>Logout</Text>\n                                        </TodoItem>\n                                    </TodoBackground>\n                                )}\n                                return (\n                                    <LoginView>\n                                        <TodoItem onPress={changeAuthStatus}>\n                                            <Text>Login</Text>\n                                        </TodoItem>\n                                    </LoginView>\n                                )\n                            }}\n                        </ThemeContext.Consumer>   \n                    )\n                }}\n            </AuthContext.Consumer>\n        )\n    }\n}\n\nexport default ToDoList\n")),(0,a.kt)("h4",{id:"after-functional-component-1"},"After (Functional Component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useContext } from 'react'\nimport {Text} from 'react-native'\n\nimport { TodoBackground, TodoItem, LoginView } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\n\nconst ToDoList = () => {\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                <TodoItem>One thing to do</TodoItem>\n                <TodoItem>Another thing to do</TodoItem>\n                <TodoItem>And one more thing</TodoItem>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n")),(0,a.kt)("h2",{id:"creating-context-with-functional-components"},"Creating Context with Functional Components"),(0,a.kt)("h3",{id:"authentication-context"},"Authentication Context"),(0,a.kt)("h4",{id:"before-class-component-2"},"Before (Class Component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {createContext, Component} from 'react'\n\nexport const AuthContext = createContext()\n\nclass AuthContextProvider extends Component {\n    state = {\n        isLoggedIn: false\n    }\n\n    changeAuthStatus = () => {\n        this.setState({isLoggedIn: !this.state.isLoggedIn})\n    }\n\n    render() {\n        return (\n            <AuthContext.Provider value={{...this.state, changeAuthStatus: this.changeAuthStatus}}>\n                {this.props.children}\n            </AuthContext.Provider>\n        )\n    }\n}\n\nexport default AuthContextProvider\n")),(0,a.kt)("h4",{id:"after-functional-component-2"},"After (Functional Component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { createContext, useState } from 'react'\n\nexport const AuthContext = createContext()\n\nconst AuthContextProvider = ({ children }) => {\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n    const changeAuthStatus = () => {\n        setIsLoggedIn(!isLoggedIn)\n    }\n\n    return (\n        <AuthContext.Provider value={{ isLoggedIn, changeAuthStatus}} >\n            { children }\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthContextProvider\n")),(0,a.kt)("h3",{id:"theme-context"},"Theme Context"),(0,a.kt)("p",null,"In case of the theme context this makes a little less sense - it actually is more readable as a class component."),(0,a.kt)("h4",{id:"before-class-component-3"},"Before (Class Component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {createContext, Component} from 'react'\n\nexport const ThemeContext = createContext()\n\nclass ThemeContextProvider extends Component {\n    state = {\n        isDarkTheme: true,\n        lightTheme: {\n            color: 'purple',\n            backgroundColor: 'snow',\n            text: 'Dark'\n        },\n        darkTheme: {\n            color: 'plum',\n            backgroundColor: 'purple',\n            text: 'Light'\n        }\n    }\n\n    changeTheme = () => {\n        // toggle theme to opposite when called\n        this.setState({isDarkTheme: !this.state.isDarkTheme})\n    }\n\n    render() {\n        return (\n            <ThemeContext.Provider value={{ ...this.state, changeTheme: this.changeTheme }}>\n                {this.props.children}\n            </ThemeContext.Provider>\n        )\n    }\n }\n\n\nexport default ThemeContextProvider\n")),(0,a.kt)("h4",{id:"after-functional-component-3"},"After (Functional Component)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {createContext, useState } from 'react'\n\nexport const ThemeContext = createContext()\n\nconst ThemeContextProvider = ({ children }) => {\n\n    const [isDarkTheme, setIsDarkTheme] = useState(true)\n\n    const [lightTheme, setLightTheme] = useState({\n                                            color: 'purple',\n                                            backgroundColor: 'snow',\n                                            text: 'Dark'\n                                        })\n\n    const [darkTheme, setdarkTheme] = useState({\n                                            color: 'plum',\n                                            backgroundColor: 'purple',\n                                            text: 'Light'\n                                        })\n\n    const changeTheme = () => {\n        // toggle theme to opposite when called\n        setIsDarkTheme(!isDarkTheme)\n    }\n\n    return (\n        <ThemeContext.Provider value={{ isDarkTheme, changeTheme, lightTheme, darkTheme }}>\n            { children }\n        </ThemeContext.Provider>\n    )\n }\n\nexport default ThemeContextProvider\n")),(0,a.kt)("h2",{id:"handling-to-do-items-using-context"},"Handling To-Do Items using Context"),(0,a.kt)("p",null,"So far the to-do list simply rendered a few hard coded items. Let's start by copying them into context like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { createContext, useState } from 'react'\nimport {v4 as uuidv4} from 'uuid'\n\nexport const TodoItemContext = createContext()\n\nconst TodoItemContextProvider = ( {children} ) => {\n    const [items, setItems] = useState([\n        { text: 'One thing to do', id: `${uuidv4()}`},\n        { text: 'Another thing to do', id: `${uuidv4()}`},\n        { text: 'And one more thing', id: `${uuidv4()}`},\n    ])\n\n    return (\n        <TodoItemContext.Provider value={{items}}>\n            {children}\n        </TodoItemContext.Provider>\n        )\n}\n\nexport default TodoItemContextProvider\n")),(0,a.kt)("p",null,"To provide this context we have to wrap the list inside the provider tags:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\n\nimport { RootView } from './src/components/_styles'\nimport ThemeContextProvider from './src/context/ThemeContext'\nimport AuthContextProvider from './src/context/AuthContext'\nimport TodoItemContextProvider from './src/context/TodoItemContext'\nimport Navbar from './src/components/Navbar'\nimport TodoList from './src/components/ToDo'\n\nconst App = () => {\n  return (\n    <RootView>\n      <ThemeContextProvider>\n        <Navbar />\n        <TodoItemContextProvider>\n          <AuthContextProvider>\n            <TodoList />\n          </AuthContextProvider>\n        </TodoItemContextProvider>\n      </ThemeContextProvider>\n    </RootView>\n  );\n}\n\nexport default App\n")),(0,a.kt)("p",null,"And then access the context to fill a React Native ",(0,a.kt)("strong",{parentName:"p"},"FlatList")," using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useContext")," function like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useContext } from 'react'\nimport { Text } from 'react-native'\n\nimport { TodoBackground, TodoList, TodoItem, LoginView } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\nimport { TodoItemContext } from '../context/TodoItemContext'\n\nconst ToDoList = () => {\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    const { items } = useContext(TodoItemContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                {\n                    items.length ? (\n                        <TodoList \n                            data={items}\n                            keyExtractor={(item) => item.id}\n                            renderItem={({item}) => {\n                                return <TodoItem>{item.text}</TodoItem>\n                            }}\n                        />\n                    ) : (\n                        <TodoItem>Nothing to do...</TodoItem>\n                    )\n                }\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n")),(0,a.kt)("h3",{id:"adding-items-using-context"},"Adding Items using Context"),(0,a.kt)("p",null,"Start by creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"addItem")," function inside the To-Do List component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { createContext, useState } from 'react'\nimport {v4 as uuidv4} from 'uuid'\n\nexport const TodoItemContext = createContext()\n\nconst TodoItemContextProvider = ( {children} ) => {\n    const [items, setItems] = useState([\n        { text: 'Have a great day!', id: `${uuidv4()}`}\n    ])\n\n    const addItem = (item) => {\n        setItems([...items, {text: item, id: `${uuidv4()}`}])\n    }\n\n    return (\n        <TodoItemContext.Provider value={{items, addItem}}>\n            {children}\n        </TodoItemContext.Provider>\n        )\n}\n\nexport default TodoItemContextProvider\n")),(0,a.kt)("p",null,"And add an ",(0,a.kt)("strong",{parentName:"p"},"InputText")," field + a submit button that can take the text input and forward it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"addItem")," function for us:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useContext, useState, useEffect } from 'react'\nimport { Text } from 'react-native'\n\nimport { TodoBackground, TodoList, TodoItem, LoginView, InputItem } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\nimport { TodoItemContext } from '../context/TodoItemContext'\n\nconst ToDoList = () => {\n\n    const [todo, setTodo] = useState('')\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    const { items, addItem } = useContext(TodoItemContext)\n\n    const handleChange = (text) => {\n        setTodo(text)\n    }\n\n    const handleAddItem = () => {\n        if(todo.length > 0) \n        addItem(todo)\n        setTodo('')\n    }\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                {\n                    items.length ? (\n                        <TodoList \n                            data={items}\n                            keyExtractor={(item) => item.id}\n                            showsVerticalScrollIndicator={false}\n                            renderItem={({item}) => {\n                                return <TodoItem>{item.text}</TodoItem>\n                            }}\n                        />\n                    ) : (\n                        <TodoItem>Nothing to do...</TodoItem>\n                    )\n                }\n                <InputItem\n                    value={todo}\n                    onChangeText={(text) => handleChange(text)}\n                />\n                <TodoItem onPress={handleAddItem}>\n                    <Text>Add Item</Text>\n                </TodoItem>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n")),(0,a.kt)("h3",{id:"removing-items-using-context"},"Removing Items using Context"),(0,a.kt)("p",null,"Now lets add another function to our context that allows us to remove items from the list:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { createContext, useState } from 'react'\nimport {v4 as uuidv4} from 'uuid'\n\nexport const TodoItemContext = createContext()\n\nconst TodoItemContextProvider = ( {children} ) => {\n    const [items, setItems] = useState([\n        { text: 'Have a great day!', id: `${uuidv4()}`}\n    ])\n\n    const addItem = (item) => {\n        setItems([...items, {text: item, id: `${uuidv4()}`}])\n    }\n\n    const removeItem = (id) => {\n        setItems(items.filter((item) => {\n            return item.id !== id\n        }))\n    }\n\n    return (\n        <TodoItemContext.Provider value={{items, addItem, removeItem}}>\n            {children}\n        </TodoItemContext.Provider>\n        )\n}\n\nexport default TodoItemContextProvider\n")),(0,a.kt)("p",null,"We can call this function by pressing an item and providing the item id for the removal in the process:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useContext, useState } from 'react'\nimport { Text, TouchableOpacity } from 'react-native'\n\nimport { TodoBackground, TodoList, TodoItem, LoginView, InputItem } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\nimport { TodoItemContext } from '../context/TodoItemContext'\n\nconst ToDoList = () => {\n\n    const [todo, setTodo] = useState('')\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    const { items, addItem, removeItem } = useContext(TodoItemContext)\n\n    const handleChange = (text) => {\n        setTodo(text)\n    }\n\n    const handleAddItem = () => {\n        if(todo.length > 0) \n        addItem(todo)\n        setTodo('')\n    }\n\n    const handleRemoveItem = (id) => {\n        removeItem(id)\n    }\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                {\n                    items.length ? (\n                        <TodoList \n                            data={items}\n                            keyExtractor={(item) => item.id}\n                            showsVerticalScrollIndicator={false}\n                            renderItem={({item}) => {\n                                return <TouchableOpacity onPress={() => handleRemoveItem(item.id)}><TodoItem>{item.text}</TodoItem></TouchableOpacity>\n                            }}\n                        />\n                    ) : (\n                        <TodoItem>Nothing to do...</TodoItem>\n                    )\n                }\n                <InputItem\n                    value={todo}\n                    onChangeText={(text) => handleChange(text)}\n                />\n                <TodoItem onPress={handleAddItem}>\n                    <Text>Add Item</Text>\n                </TodoItem>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n")))}d.isMDXComponent=!0},45065:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-23d027067cc9016279f834178a642545.jpg"}}]);