"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[78550],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},k=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),k=p(t),u=a,d=k["".concat(s,".").concat(u)]||k[u]||m[u]||r;return t?o.createElement(d,i(i({ref:n},c),{},{components:t})):o.createElement(d,i({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=k;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}k.displayName="MDXCreateElement"},15827:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const r={sidebar_position:6080,slug:"2021-04-07",title:"Loki - Promtail & Grafana for System Logs.",authors:"mpolinowski",tags:["LINUX","Docker"]},i=void 0,l={unversionedId:"DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/index",id:"DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/index",title:"Loki - Promtail & Grafana for System Logs.",description:"Shenzhen, China",source:"@site/docs/DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/index.md",sourceDirName:"DevOps/Provisioning/2021-04-07--loki-prometheus-grafana",slug:"/DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/2021-04-07",permalink:"/docs/DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/2021-04-07",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2021-04-07--loki-prometheus-grafana/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:6080,frontMatter:{sidebar_position:6080,slug:"2021-04-07",title:"Loki - Promtail & Grafana for System Logs.",authors:"mpolinowski",tags:["LINUX","Docker"]},sidebar:"tutorialSidebar",previous:{title:"PostgreSQL 14 Database Refresher :: Introduction Part I",permalink:"/docs/DevOps/Provisioning/2021-09-13--postgres-refresher-part-i/2021-09-13"},next:{title:"ownCloud Infinite Scale Stack",permalink:"/docs/DevOps/Provisioning/2021-01-27-owncloud-ocis/2021-01-27"}},s={},p=[{value:"Installation with Docker",id:"installation-with-docker",level:2},{value:"Dry-run with Docker Compose",id:"dry-run-with-docker-compose",level:3},{value:"Configuring the Services",id:"configuring-the-services",level:3},{value:"Promtail",id:"promtail",level:4},{value:"Loki",id:"loki",level:4},{value:"Docker Compose",id:"docker-compose",level:4},{value:"Starting the Loki Environment",id:"starting-the-loki-environment",level:2},{value:"Configure Data Source",id:"configure-data-source",level:3}],c={toc:p};function m(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Shenzhen, China",src:t(55740).Z,width:"1500",height:"467"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#installation-with-docker"},"Installation with Docker"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#dry-run-with-docker-compose"},"Dry-run with Docker Compose")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#configuring-the-services"},"Configuring the Services"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#promtail"},"Promtail")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#loki"},"Loki")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#docker-compose"},"Docker Compose")))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#starting-the-loki-environment"},"Starting the Loki Environment"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#configure-data-source"},"Configure Data Source"))))),(0,a.kt)("p",null,"Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus. It is designed to be very cost effective and easy to operate. It does not index the contents of the logs, but rather a set of labels for each log stream."),(0,a.kt)("h2",{id:"installation-with-docker"},"Installation with Docker"),(0,a.kt)("p",null,"You can install Loki and Promtail with Docker or Docker Compose if you are evaluating, testing, or developing Loki."),(0,a.kt)("h3",{id:"dry-run-with-docker-compose"},"Dry-run with Docker Compose"),(0,a.kt)("p",null,"Run the following commands in your command line. They work for Windows or Linux systems."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/grafana/loki/v2.3.0/production/docker-compose.yaml -O docker-compose.yaml\n\ndocker-compose -f docker-compose.yml up\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"nano /opt/loki/docker-compose.yml"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nnetworks:\n  loki:\n\nservices:\n  loki:\n    image: grafana/loki:2.3.0\n    ports:\n      - "3100:3100"\n    command: -config.file=/etc/loki/local-config.yaml\n    networks:\n      - loki\n\n  promtail:\n    image: grafana/promtail:2.3.0\n    volumes:\n      - /var/log:/var/log\n    command: -config.file=/etc/promtail/config.yml\n    networks:\n      - loki\n\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - "3000:3000"\n    networks:\n      - loki\n')),(0,a.kt)("p",null,"Navigate to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3100/metrics")," to view the metrics and ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3100/ready")," readiness of the ",(0,a.kt)("strong",{parentName:"p"},"Loki")," database."),(0,a.kt)("p",null,"The Docker-Compose file looks like:"),(0,a.kt)("p",null,"Now visit the server IP on Port ",(0,a.kt)("inlineCode",{parentName:"p"},"3000"),". Login with ",(0,a.kt)("inlineCode",{parentName:"p"},"admin"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"admin"),", e.g.:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"http://192.168.2.111:3000/login"},"http://192.168.2.111:3000/login"))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Loki - Grafana and Prometheus",src:t(83967).Z,width:"1071",height:"611"})),(0,a.kt)("p",null,"Ok - this worked - shut everything down with ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose down")," and going to the next step:"),(0,a.kt)("h3",{id:"configuring-the-services"},"Configuring the Services"),(0,a.kt)("h4",{id:"promtail"},"Promtail"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Promtail")," - similar to ",(0,a.kt)("strong",{parentName:"p"},"Elastic Logstash")," - ingests log files for us and forwards them to our database ",(0,a.kt)("strong",{parentName:"p"},"Loki"),". We need to configure it to keep an eye on a specific log or a log directory. The ",(0,a.kt)("a",{parentName:"p",href:"https://grafana.com/docs/loki/latest/clients/promtail/configuration/"},"official config example")," is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"server:\n  http_listen_port: 9080\n  grpc_listen_port: 0\n\npositions:\n  filename: /tmp/positions.yaml\n\nclients:\n  - url: http://localhost:3100/loki/api/v1/push\n\nscrape_configs:\n- job_name: system\n  static_configs:\n  - targets:\n      - localhost\n    labels:\n      job: varlogs\n      __path__: /var/log/*log\n")),(0,a.kt)("p",null,"Which would keep an eye on our Linux system log directory. Since we are running the service inside a Docker container, we have to point Promtail to an internal directory and modify our ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose")," file to mount in the log file from our host system. The resulting configuration file looks like:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"nano /opt/loki/config/promtail-config.yml"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"server:\n  http_listen_port: 9080\n  grpc_listen_port: 0\n\npositions:\n  filename: /tmp/positions.yaml\n\nclients:\n  - url: http://loki:3100/loki/api/v1/push\n\nscrape_configs:\n- job_name: nginx_log\n  static_configs:\n  - targets:\n      - loki\n    labels:\n      job: varlogs\n      __path__: /opt/nginx_access.log\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The NGINX logfile is located in ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/loki/logs/nginx_access.log")," on my host and will be mounted to ",(0,a.kt)("inlineCode",{parentName:"p"},"/opt/nginx_access.log")," inside the ",(0,a.kt)("strong",{parentName:"p"},"Promtail")," container by the Docker-Compose file below.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"All the demo files I found online usually use the ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:3100")," URL - make sure to change this to ",(0,a.kt)("inlineCode",{parentName:"p"},"loki:3100"),". We are running our setup in an virtual environment where docker provides a DNS service that allows us to resolve container names to their IP addresses inside the docker network.")),(0,a.kt)("h4",{id:"loki"},"Loki"),(0,a.kt)("p",null,"For ",(0,a.kt)("strong",{parentName:"p"},"Loki")," I am going to use the default config you can ",(0,a.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/grafana/loki/v2.2.1/cmd/loki/loki-local-config.yaml"},"download from Github"),":"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In the downloaded version there was a path ",(0,a.kt)("inlineCode",{parentName:"p"},"/tmp/loki/rules-temp")," that I had to replace with ",(0,a.kt)("inlineCode",{parentName:"p"},"/loki/rules-temp")," for this config to work.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"nano /opt/loki/config/loki-config.yml"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"auth_enabled: false\n\nserver:\n  http_listen_port: 3100\n  grpc_listen_port: 9096\n\ningester:\n  wal:\n    enabled: true\n    dir: /tmp/wal\n  lifecycler:\n    address: 127.0.0.1\n    ring:\n      kvstore:\n        store: inmemory\n      replication_factor: 1\n    final_sleep: 0s\n  chunk_idle_period: 1h       # Any chunk not receiving new logs in this time will be flushed\n  max_chunk_age: 1h           # All chunks will be flushed when they hit this age, default is 1h\n  chunk_target_size: 1048576  # Loki will attempt to build chunks up to 1.5MB, flushing first if chunk_idle_period or max_chunk_age is reached first\n  chunk_retain_period: 30s    # Must be greater than index read cache TTL if using an index cache (Default index read cache TTL is 5m)\n  max_transfer_retries: 0     # Chunk transfers disabled\n\nschema_config:\n  configs:\n    - from: 2020-10-24\n      store: boltdb-shipper\n      object_store: filesystem\n      schema: v11\n      index:\n        prefix: index_\n        period: 24h\n\nstorage_config:\n  boltdb_shipper:\n    active_index_directory: /tmp/loki/boltdb-shipper-active\n    cache_location: /tmp/loki/boltdb-shipper-cache\n    cache_ttl: 24h         # Can be increased for faster performance over longer query periods, uses more disk space\n    shared_store: filesystem\n  filesystem:\n    directory: /tmp/loki/chunks\n\ncompactor:\n  working_directory: /tmp/loki/boltdb-shipper-compactor\n  shared_store: filesystem\n\nlimits_config:\n  reject_old_samples: true\n  reject_old_samples_max_age: 168h\n\nchunk_store_config:\n  max_look_back_period: 0s\n\ntable_manager:\n  retention_deletes_enabled: false\n  retention_period: 0s\n\nruler:\n  storage:\n    type: local\n    local:\n      directory: /tmp/loki/rules\n  rule_path: /loki/rules-temp\n  alertmanager_url: http://localhost:9093\n  ring:\n    kvstore:\n      store: inmemory\n  enable_api: true\n\n")),(0,a.kt)("h4",{id:"docker-compose"},"Docker Compose"),(0,a.kt)("p",null,"Now we need to make sure that those configuration files and logs are mounted into the correct containers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3"\n\nnetworks:\n  loki:\n\nservices:\n  loki:\n    image: grafana/loki:2.3.0\n    volumes:\n      - /opt/loki/config/loki-config.yml:/etc/loki/loki-config.yml\n    ports:\n      - "3100:3100"\n    command: -config.file=/etc/loki/loki-config.yml\n    networks:\n      - loki\n\n  promtail:\n    image: grafana/promtail:2.3.0\n    volumes:\n      - /opt/loki/config/promtail-config.yml:/etc/promtail/promtail-config.yml\n      - /opt/loki/logs/nginx_access.log:/opt/nginx_access.log\n    command: -config.file=/etc/promtail/promtail-config.yml\n    networks:\n      - loki\n\n  grafana:\n    image: grafana/grafana:latest\n    ports:\n      - "3000:3000"\n    networks:\n      - loki\n')),(0,a.kt)("h2",{id:"starting-the-loki-environment"},"Starting the Loki Environment"),(0,a.kt)("h3",{id:"configure-data-source"},"Configure Data Source"),(0,a.kt)("p",null,"Head over to ",(0,a.kt)("strong",{parentName:"p"},"Configuration/Data sources")," and select to add a new ",(0,a.kt)("strong",{parentName:"p"},"Loki Data Source"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Loki - Grafana and Prometheus",src:t(53171).Z,width:"1461",height:"443"})),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The online documentation I found usually used ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:3100"),". But since I am accessing from a different system, I have to use the server IP address instead. ",(0,a.kt)("inlineCode",{parentName:"p"},"192.168.2.111:3000"))),(0,a.kt)("p",null,"Now switch to the ",(0,a.kt)("strong",{parentName:"p"},"Explore")," tab and follow the help to come up with some queries - e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},'{job="varlogs"}')," - ",(0,a.kt)("inlineCode",{parentName:"p"},"varlogs")," is the label we assigned to our job in ",(0,a.kt)("inlineCode",{parentName:"p"},"promtail-config.yml"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Loki - Grafana and Prometheus",src:t(31271).Z,width:"1463",height:"435"})),(0,a.kt)("p",null,"Running the query will show the NGINX log data that I had ",(0,a.kt)("strong",{parentName:"p"},"Promtail")," load into ",(0,a.kt)("strong",{parentName:"p"},"Loki"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Loki - Grafana and Prometheus",src:t(56582).Z,width:"1467",height:"871"})))}m.isMDXComponent=!0},83967:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Loki_and_Grafana_01-11c95223166ea9e94df4dbab6efc4a06.png"},53171:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Loki_and_Grafana_02-c32f4ec057e043f56c883ded992eb112.png"},31271:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Loki_and_Grafana_03-c802b3508997f7105bec83194d7dc4bc.png"},56582:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/Loki_and_Grafana_04-6708e2d6e1affb54de799aeac8b6c096.png"},55740:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/photo-456tdsfggd_67gfh6dgdf4_d-d52c49feef569ff5bedc9c66dc917fcf.jpg"}}]);