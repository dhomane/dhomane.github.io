"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[86632],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=i(n),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||s;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var i=2;i<s;i++)a[i]=n[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var r=n(87462),o=(n(67294),n(3905));const s={sidebar_position:6080,slug:"2021-09-07",title:"Introduction to Websockets",authors:"mpolinowski",tags:["Javascript"]},a=void 0,l={unversionedId:"Development/Javascript/2021-09-07--intro-to-websockets/index",id:"Development/Javascript/2021-09-07--intro-to-websockets/index",title:"Introduction to Websockets",description:"Tsim Sha Tsui, Hong Kong",source:"@site/docs/Development/Javascript/2021-09-07--intro-to-websockets/index.md",sourceDirName:"Development/Javascript/2021-09-07--intro-to-websockets",slug:"/Development/Javascript/2021-09-07--intro-to-websockets/2021-09-07",permalink:"/docs/Development/Javascript/2021-09-07--intro-to-websockets/2021-09-07",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Javascript/2021-09-07--intro-to-websockets/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:6080,frontMatter:{sidebar_position:6080,slug:"2021-09-07",title:"Introduction to Websockets",authors:"mpolinowski",tags:["Javascript"]},sidebar:"tutorialSidebar",previous:{title:"HTML Video over Websockets",permalink:"/docs/Development/Javascript/2021-09-08--websockets-html-video/2021-09-08"},next:{title:"React Dashboard for MQTT",permalink:"/docs/Development/Javascript/2021-06-04--mqtt-dashboard-react/2021-06-04"}},c={},i=[{value:"TCP &amp; UDP in Node.js",id:"tcp--udp-in-nodejs",level:2},{value:"TCP Server",id:"tcp-server",level:3},{value:"UDP Server",id:"udp-server",level:3},{value:"HTTP in Node.js",id:"http-in-nodejs",level:2},{value:"Websockets in Node.js",id:"websockets-in-nodejs",level:2}],p={toc:i};function u(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Tsim Sha Tsui, Hong Kong",src:n(92970).Z,width:"1500",height:"400"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#tcp--udp-in-nodejs"},"TCP & UDP in Node.js"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#tcp-server"},"TCP Server")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#udp-server"},"UDP Server")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#http-in-nodejs"},"HTTP in Node.js")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#websockets-in-nodejs"},"Websockets in Node.js"))),(0,o.kt)("h2",{id:"tcp--udp-in-nodejs"},"TCP & UDP in Node.js"),(0,o.kt)("h3",{id:"tcp-server"},"TCP Server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const net = require("net")\n\nconst port = 8080\n\nconst server = net.createServer(socket => {\n    socket.write("Hello.")\n    socket.on("data", data => {\n        console.log(data.toString())\n    })\n})\n\nserver.listen(port)\n')),(0,o.kt)("p",null,"You can run this file in Node.js:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node tcp.js\n")),(0,o.kt)("p",null,"And connect to it using ",(0,o.kt)("strong",{parentName:"p"},"Telnet"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"telnet 127.0.0.1 8080\nHello\n")),(0,o.kt)("p",null,"Everything you type after that will be logged in your server console."),(0,o.kt)("h3",{id:"udp-server"},"UDP Server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const dgram = require('dgram');\nconst socket = dgram.createSocket('udp4');\n\nconst port = 8081\n\nsocket.on('message', (msg, rinfo) => {\n    console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n});\n\nsocket.bind(port);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'echo "hi" | nc -w1 -u 192.168.2.112 8081\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"server got: hi\n from 192.168.2.110:44757\n")),(0,o.kt)("h2",{id:"http-in-nodejs"},"HTTP in Node.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var http = require('http')\nvar url = require('url')\nvar fs = require('fs')\nvar path = require('path')\nvar baseDirectory = __dirname   // or whatever base directory you want\n\nvar port = 80\n\nhttp.createServer(function (request, response) {\n    try {\n        var requestUrl = url.parse(request.url)\n\n        // need to use path.normalize so people can't access directories underneath baseDirectory\n        var fsPath = baseDirectory+path.normalize(requestUrl.pathname)\n\n        var fileStream = fs.createReadStream(fsPath)\n        fileStream.pipe(response)\n        fileStream.on('open', function() {\n             response.writeHead(200)\n        })\n        fileStream.on('error',function(e) {\n             response.writeHead(404)     // assume the file doesn't exist\n             response.end()\n        })\n   } catch(e) {\n        response.writeHead(500)\n        response.end()     // end the response so browsers don't hang\n        console.log(e.stack)\n   }\n}).listen(port)\n\nconsole.log(\"listening on port \"+port)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content= "width=device-width, initial-scale=1.0">\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\n        <title>A HTML Page</title>\n    </head>\n    <body>\n        <h1>Just a Test</h1>\n    </body>\n</html>\n')),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"node http.js")," and open the page inside your web browser or run the following from your Terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl htttp://localhost/index.html\n\n<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content= "width=device-width, initial-scale=1.0">\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\n        <title>A HTML Page</title>\n    </head>\n    <body>\n        <h1>Just a Test</h1>\n    </body>\n</html>\n')),(0,o.kt)("h2",{id:"websockets-in-nodejs"},"Websockets in Node.js"),(0,o.kt)("p",null,"Building a Websocket server in Node.js - starting by creating a basic http /tcp server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const http = require("http")\nconst port = 8888\n\nconst server = http.createServer((req, res) => {\n    console.log("Request received")\n})\n\nserver.listen(port, () => console.log("Websocket Server listening on Port "+port))\n')),(0,o.kt)("p",null,"Run the server with Node.js and try sending a GET request from your browser on ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:8888/")," - the line ",(0,o.kt)("inlineCode",{parentName:"p"},"Request received")," should appear every time you send an request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node index.js\nWebsocket Server listening on Port 8888\nRequest received\n")),(0,o.kt)("p",null,"The server now is able to receive HTTP GET request. I now want to upgrade incoming requests to a websocket connection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const http = require("http")\nconst WebSocket = require("websocket").server\nlet connection = null;\nconst port = 8888\n\nconst server = http.createServer((req, res) => {\n    console.log("Request received")\n})\n\nconst websocket = new WebSocket({\n    "httpServer": server\n})\n\nwebsocket.on("request", request=> {\n    connection = request.accept(null, request.origin);\n    connection.on("open", () => console.log("Websocket connection established"))\n    connection.on("message", message => {\n        console.log(`message: ${message.utf8Data}`)\n    })\n    connection.on("close", () => console.log("Websocket connection closed"))\n})\n\nserver.listen(port, () => console.log("Websocket Server listening on Port "+port))\n')),(0,o.kt)("p",null,"Install the websocket module and re-run the server - sending an HTTP GET request should now initialize the websocket connection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm install websocket\nnode index.js\n")),(0,o.kt)("p",null,"And I can use my browser console as the client application and send a message to my server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'ws = new WebSocket("ws://localhost:8888")\nws.onmessage = message => console.log(`${message.data}`)\nws.send("Hi")\n')),(0,o.kt)("p",null,"To send a message from the Server to the Client I can add another to the server script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const http = require("http");\nconst WebSocket = require("websocket").server;\nlet connection = null;\nconst port = 8888;\n\nconst server = http.createServer((req, res) => {\n    console.log("Request received")\n});\n\nconst websocket = new WebSocket({\n    "httpServer": server\n});\n\nwebsocket.on("request", request=> {\n    connection = request.accept(null, request.origin);\n    connection.on("open", () => console.log("Websocket connection established"))\n    connection.on("message", message => {\n        console.log(`message: ${message.utf8Data}`)\n    })\n    connection.on("close", () => console.log("Websocket connection closed"))\n\n    heartBeat();\n});\n\nserver.listen(port, () => console.log("Websocket Server listening on Port "+port));\n\nfunction heartBeat(){\n    connection.send(`I am still here`);\n    setTimeout(heartBeat, 30000);\n};\n')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Websockets in Node.js",src:n(52001).Z,width:"952",height:"466"})))}u.isMDXComponent=!0},52001:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/WebSockets_in_Nodejs_01-8b3ed6c7f64f487defb97cf6f2b7b7fe.png"},92970:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-10ecd0d57f9ab6e91272171108738e03.jpg"}}]);