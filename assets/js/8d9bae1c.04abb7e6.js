"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[39114],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),k=a,u=d["".concat(o,".").concat(k)]||d[k]||h[k]||i;return n?r.createElement(u,s(s({ref:t},c),{},{components:n})):r.createElement(u,s({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},10946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:9040,slug:"2022-09-27",title:"Analyzing and Decrypting TLS with Wireshark",authors:"mpolinowski",tags:["LINUX","Security"],description:"Capturing session keys to decrypt TLS traffic."},s=void 0,l={unversionedId:"DevOps/Security/2022-09-27--wireshark-with-tls-encryption/index",id:"DevOps/Security/2022-09-27--wireshark-with-tls-encryption/index",title:"Analyzing and Decrypting TLS with Wireshark",description:"Capturing session keys to decrypt TLS traffic.",source:"@site/docs/DevOps/Security/2022-09-27--wireshark-with-tls-encryption/index.md",sourceDirName:"DevOps/Security/2022-09-27--wireshark-with-tls-encryption",slug:"/DevOps/Security/2022-09-27--wireshark-with-tls-encryption/2022-09-27",permalink:"/docs/DevOps/Security/2022-09-27--wireshark-with-tls-encryption/2022-09-27",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Security/2022-09-27--wireshark-with-tls-encryption/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Security",permalink:"/docs/tags/security"}],version:"current",sidebarPosition:9040,frontMatter:{sidebar_position:9040,slug:"2022-09-27",title:"Analyzing and Decrypting TLS with Wireshark",authors:"mpolinowski",tags:["LINUX","Security"],description:"Capturing session keys to decrypt TLS traffic."},sidebar:"tutorialSidebar",previous:{title:"Server Security",permalink:"/docs/category/server-security"},next:{title:"Securing Webservers - Uncomplicated Firewall",permalink:"/docs/DevOps/Security/2020-07-28--uncomplicated-firewall-ufw/2020-07-28"}},o={},p=[{value:"Capture Session Keys (LINUX)",id:"capture-session-keys-linux",level:2},{value:"Decrypt HTTPs Session in Wireshark",id:"decrypt-https-session-in-wireshark",level:2},{value:"TLSv1.3 Handshake",id:"tlsv13-handshake",level:3},{value:"Client Hello",id:"client-hello",level:4},{value:"Server Hello",id:"server-hello",level:4}],c={toc:p};function h(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"TST, Hong Kong",src:n(41920).Z,width:"1500",height:"517"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#capture-session-keys-linux"},"Capture Session Keys (LINUX)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#decrypt-https-session-in-wireshark"},"Decrypt HTTPs Session in Wireshark"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#tlsv13-handshake"},"TLSv1.3 Handshake"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#client-hello"},"Client Hello")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#server-hello"},"Server Hello"))))))),(0,a.kt)("h2",{id:"capture-session-keys-linux"},"Capture Session Keys (LINUX)"),(0,a.kt)("p",null,"Open a terminal and set the SSL keylogger variable for this session (do not add this permanently, e.g. to ",(0,a.kt)("inlineCode",{parentName:"p"},".zshrc"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export SSLKEYLOGFILE=/home/my-user/Documents/tls_keylog.log\n")),(0,a.kt)("p",null,"Now start ",(0,a.kt)("inlineCode",{parentName:"p"},"chromium"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"chrome")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"firefox")," by typing the application name into your terminal and pressing enter. Just opening the browser should trigger a few key exchanges. But you can also browse the web and then check the log file:"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"tls","_","keylog.log")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"CLIENT_HANDSHAKE_TRAFFIC_SECRET ccda30d136b2...\nSERVER_HANDSHAKE_TRAFFIC_SECRET ccda30d136b2...\nCLIENT_TRAFFIC_SECRET_0 ccda30d136b2ea601eb...\nSERVER_TRAFFIC_SECRET_0 ccda30d136b2ea601e...\n")),(0,a.kt)("p",null,"We can now use the captured keys to decrypt our web traffic with wireshark."),(0,a.kt)("h2",{id:"decrypt-https-session-in-wireshark"},"Decrypt HTTPs Session in Wireshark"),(0,a.kt)("p",null,"I now open the web interface of my INSTAR IP camera while logging the web traffic in Wireshark. Here I can see a lot of ",(0,a.kt)("inlineCode",{parentName:"p"},"TCP")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"TLSv1.3")," packets coming through:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(11908).Z,width:"1035",height:"462"})),(0,a.kt)("p",null,"Now close the browser and stop the Wireshark capture. To clean up the log I can filter for frames that contain the IP address of my IP camera:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ip.addr == 192.168.2.115\n")),(0,a.kt)("p",null,"Right click one of the ",(0,a.kt)("strong",{parentName:"p"},"Client Hello")," packages and select to follow the ",(0,a.kt)("strong",{parentName:"p"},"TCP Stream"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(26734).Z,width:"1187",height:"548"})),(0,a.kt)("p",null,"Close the opening window and select the first package that contains ",(0,a.kt)("strong",{parentName:"p"},"Application Data")," after the hello and cypher negotiation:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(79467).Z,width:"1178",height:"461"})),(0,a.kt)("p",null,"Right-click the package and open the ",(0,a.kt)("strong",{parentName:"p"},"Transport Layer Security Preferences"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(46470).Z,width:"1150",height:"725"})),(0,a.kt)("p",null,"Here you need to add the log file created earlier:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(24172).Z,width:"1092",height:"521"})),(0,a.kt)("p",null,"The entries are now successfully decrypted and what showed up as encrypted application data before can now be identified as a TLS handshake:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(47475).Z,width:"1153",height:"462"})),(0,a.kt)("h3",{id:"tlsv13-handshake"},"TLSv1.3 Handshake"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"see also ",(0,a.kt)("a",{parentName:"em",href:"https://tls13.xargs.org/"},"tls13.xargs.org"))),(0,a.kt)("p",null,"To deeper analyze our now decrypted data we can open the ",(0,a.kt)("strong",{parentName:"p"},"Conversations")," window:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(60849).Z,width:"1153",height:"276"})),(0,a.kt)("p",null,'Select a "conversation" and use it to filter our log file:'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(98990).Z,width:"1188",height:"394"})),(0,a.kt)("h4",{id:"client-hello"},"Client Hello"),(0,a.kt)("p",null,"The conversation starts with a TCP handshake that is followed by a ",(0,a.kt)("strong",{parentName:"p"},"Client Hello"),". In here our client - in this case our web-browser - states that it knows ",(0,a.kt)("inlineCode",{parentName:"p"},"TLSv1.3")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"TLSv1.2")," and insists on the Elliptical Curve Diffie Hellman Ephemeral (",(0,a.kt)("inlineCode",{parentName:"p"},"ECDHE"),") Key Exchange and supports 16 different cypher suits for the data encryption:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(86456).Z,width:"1181",height:"617"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(22508).Z,width:"1163",height:"241"})),(0,a.kt)("h4",{id:"server-hello"},"Server Hello"),(0,a.kt)("p",null,"The server (my IP camera) - now knowing what our client (the browser) supports - picks a TLS version, cypher suite and ellipsis it wants to use - ",(0,a.kt)("inlineCode",{parentName:"p"},"Supported Version: TLS 1.3 (0x0304)"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Group: x25519 (29)")," - and sends it's public key:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(43690).Z,width:"1163",height:"614"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(75904).Z,width:"1167",height:"115"})),(0,a.kt)("p",null,"Once the encryption is established the server will send it's TLS certificate:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Analyzing and Decrypting TLS with Wireshark",src:n(1448).Z,width:"1168",height:"718"})))}h.isMDXComponent=!0},41920:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-ec671595d585b88a85b017a7908fb619.jpg"},11908:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_01-2b7a820aa9632a29e23c3bcda447dd80.png"},26734:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_02-2842d40a7abd14f46733ffb3337ae641.png"},79467:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_03-9441944ba9f96ebcae3c86d833f2018a.png"},46470:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_04-92a40d6fd4a8ff77e25efb5a6572ab5e.png"},24172:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_05-a7f4f65ac958cf9944bb1da345c898df.png"},47475:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_06-288bd3e709c0927f187fa8a8fbecce62.png"},60849:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_07-c1c01d762234a682c399a59951b1fe32.png"},98990:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_08-c9565580fa98c7b8a9b07fe93d63ce05.png"},86456:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_09-d489cda33ea5192db46bf3420321cedd.png"},22508:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_10-3309e1184f84f6bffeaa100ac98819b9.png"},43690:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_11-e6b9bb4d5f33b64ff1588e230d4c3ad6.png"},75904:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_12-352a87c8f3d743d1e51cc026cae9b9f4.png"},1448:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/wireshark-with-tls-encryption_13-c01d7d32c6c02a811372466a9c2f4a89.png"}}]);