"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[19870],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},l=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),l=s(n),p=r,h=l["".concat(c,".").concat(p)]||l[p]||m[p]||a;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=l;var d={};for(var c in t)hasOwnProperty.call(t,c)&&(d[c]=t[c]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}l.displayName="MDXCreateElement"},3710:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={sidebar_position:9050,slug:"2022-05-06",title:"React Native Reducer",authors:"mpolinowski",tags:["Javascript","React","ReactNative"]},i=void 0,d={unversionedId:"Development/ReactNative/2022-05-06-react-native-reducer/index",id:"Development/ReactNative/2022-05-06-react-native-reducer/index",title:"React Native Reducer",description:"Victoria Harbour, Hongkong",source:"@site/docs/Development/ReactNative/2022-05-06-react-native-reducer/index.md",sourceDirName:"Development/ReactNative/2022-05-06-react-native-reducer",slug:"/Development/ReactNative/2022-05-06-react-native-reducer/2022-05-06",permalink:"/docs/Development/ReactNative/2022-05-06-react-native-reducer/2022-05-06",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/ReactNative/2022-05-06-react-native-reducer/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"React",permalink:"/docs/tags/react"},{label:"ReactNative",permalink:"/docs/tags/react-native"}],version:"current",sidebarPosition:9050,frontMatter:{sidebar_position:9050,slug:"2022-05-06",title:"React Native Reducer",authors:"mpolinowski",tags:["Javascript","React","ReactNative"]},sidebar:"tutorialSidebar",previous:{title:"React Native",permalink:"/docs/category/react-native"},next:{title:"React Native Context & Hooks",permalink:"/docs/Development/ReactNative/2022-05-05-react-native-context-hooks/2022-05-05"}},c={},s=[{value:"Reducer",id:"reducer",level:2},{value:"To-Do Context Provider",id:"to-do-context-provider",level:3},{value:"Without Reducer",id:"without-reducer",level:4},{value:"With Reducer",id:"with-reducer",level:4},{value:"To-Do Component",id:"to-do-component",level:3},{value:"Without Reducer",id:"without-reducer-1",level:4},{value:"With Reducer",id:"with-reducer-1",level:4}],u={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Victoria Harbour, Hongkong",src:n(40120).Z,width:"1500",height:"565"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#reducer"},"Reducer"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#to-do-context-provider"},"To-Do Context Provider"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#without-reducer"},"Without Reducer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#with-reducer"},"With Reducer")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#to-do-component"},"To-Do Component"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#without-reducer-1"},"Without Reducer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#with-reducer-1"},"With Reducer"))))))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/react-native-context-reducer"},"Github Repository")),(0,r.kt)("h2",{id:"reducer"},"Reducer"),(0,r.kt)("p",null,"In a ",(0,r.kt)("a",{parentName:"p",href:"obsidian://open?vault=Obsidian%20Vault&file=2022-05-05-react-native-context-hooks%2F2022-05-05-react-native-context-hooks"},"previous step")," I created an React Native application that used the React Context API using Context and Hooks to manage a To-Do List. We can now use reducers to centralise all methods to change the state of our application in a single function."),(0,r.kt)("h3",{id:"to-do-context-provider"},"To-Do Context Provider"),(0,r.kt)("h4",{id:"without-reducer"},"Without Reducer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { createContext, useState } from 'react'\nimport {v4 as uuidv4} from 'uuid'\n\nexport const TodoItemContext = createContext()\n\nconst TodoItemContextProvider = ( {children} ) => {\n    const [items, setItems] = useState([\n        { text: 'Have a great day!', id: `${uuidv4()}`}\n    ])\n\n    const addItem = (item) => {\n        setItems([...items, {text: item, id: `${uuidv4()}`}])\n    }\n\n    const removeItem = (id) => {\n        setItems(items.filter((item) => {\n            return item.id !== id\n        }))\n    }\n\n    return (\n        <TodoItemContext.Provider value={{items, addItem, removeItem}}>\n            {children}\n        </TodoItemContext.Provider>\n        )\n}\n\nexport default TodoItemContextProvider\n")),(0,r.kt)("h4",{id:"with-reducer"},"With Reducer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { createContext, useReducer } from 'react'\nimport {v4 as uuidv4} from 'uuid'\n\nexport const TodoItemContext = createContext()\n\nconst todosReducer = (state, action) => {\n    switch(action.type) {\n        case 'ADD_TODO':\n            return[...state, {text: action.text, id: `${uuidv4()}`}]\n\n        case 'REMOVE_TODO':\n            return state.filter((todo) => todo.id !== action.id)\n\n        default:\n            return state\n    }\n}\n\nconst TodoItemContextProvider = ( {children} ) => {\n    const [todos, dispatch] = useReducer(todosReducer, [\n        { text: 'Have a great day!', id: `${uuidv4()}`}\n    ])\n\n    return (\n        <TodoItemContext.Provider value={{todos, dispatch}}>\n            {children}\n        </TodoItemContext.Provider>\n        )\n}\n\nexport default TodoItemContextProvider\n")),(0,r.kt)("h3",{id:"to-do-component"},"To-Do Component"),(0,r.kt)("h4",{id:"without-reducer-1"},"Without Reducer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useContext, useState } from 'react'\nimport { Text, TouchableOpacity } from 'react-native'\n\nimport { TodoBackground, TodoList, TodoItem, LoginView, InputItem } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\nimport { TodoItemContext } from '../context/TodoItemContext'\n\nconst ToDoList = () => {\n\n    const [todo, setTodo] = useState('')\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n    const { items, addItem, removeItem } = useContext(TodoItemContext)\n\n    const handleChange = (text) => {\n        setTodo(text)\n    }\n\n    const handleAddItem = () => {\n        if(todo.length > 0) \n        addItem(todo)\n        setTodo('')\n    }\n\n    const handleRemoveItem = (id) => {\n        removeItem(id)\n    }\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                {\n                    items.length ? (\n                        <TodoList \n                            data={items}\n                            keyExtractor={(item) => item.id}\n                            showsVerticalScrollIndicator={false}\n                            renderItem={({item}) => {\n                                return <TouchableOpacity onPress={() => handleRemoveItem(item.id)}><TodoItem>{item.text}</TodoItem></TouchableOpacity>\n                            }}\n                        />\n                    ) : (\n                        <TodoItem>Nothing to do...</TodoItem>\n                    )\n                }\n                <InputItem\n                    value={todo}\n                    onChangeText={(text) => handleChange(text)}\n                />\n                <TodoItem onPress={handleAddItem}>\n                    <Text>Add Item</Text>\n                </TodoItem>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n")),(0,r.kt)("h4",{id:"with-reducer-1"},"With Reducer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useContext, useState } from 'react'\nimport { Text, TouchableOpacity } from 'react-native'\n\nimport { TodoBackground, TodoList, TodoItem, LoginView, InputItem } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\nimport { TodoItemContext } from '../context/TodoItemContext'\n\nconst ToDoList = () => {\n\n    const [todo, setTodo] = useState('')\n\n    const { isDarkTheme, darkTheme, lightTheme } = useContext(ThemeContext)\n    // if isDarkTheme is true return dark state / else light\n    const theme = isDarkTheme ? darkTheme : lightTheme\n\n    const { isLoggedIn, changeAuthStatus } = useContext(AuthContext)\n\n    const { todos, dispatch } = useContext(TodoItemContext)\n\n    const handleChange = (text) => {\n        setTodo(text)\n    }\n\n    const handleAddItem = () => {\n        if(todo.length > 0) \n        dispatch({type: 'ADD_TODO', text: todo})\n        setTodo('')\n    }\n\n    const handleRemoveItem = (id) => {\n        dispatch({type: 'REMOVE_TODO', id})\n    }\n\n    if (isLoggedIn) {\n        return (\n            <TodoBackground style={theme}>\n                {\n                    todos.length ? (\n                        <TodoList \n                            data={todos}\n                            keyExtractor={(todo) => todo.id}\n                            showsVerticalScrollIndicator={false}\n                            renderItem={({ item }) => {\n                                return <TouchableOpacity onPress={() => handleRemoveItem(item.id)}><TodoItem>{item.text}</TodoItem></TouchableOpacity>\n                            }}\n                        />\n                    ) : (\n                        <TodoItem>Nothing to do...</TodoItem>\n                    )\n                }\n                <InputItem\n                    value={todo}\n                    onChangeText={(text) => handleChange(text)}\n                />\n                <TodoItem onPress={handleAddItem}>\n                    <Text>Add Item</Text>\n                </TodoItem>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Logout</Text>\n                </TodoItem>\n            </TodoBackground>\n        )}\n        return (\n            <LoginView>\n                <TodoItem onPress={changeAuthStatus}>\n                    <Text>Login</Text>\n                </TodoItem>\n            </LoginView>\n        )\n}\n\nexport default ToDoList\n")))}m.isMDXComponent=!0},40120:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-23d027067cc9016279f834178a642545.jpg"}}]);