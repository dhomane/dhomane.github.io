"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[54907],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var o=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,s=function(e,n){if(null==e)return{};var t,o,s={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),u=c(t),h=s,d=u["".concat(l,".").concat(h)]||u[h]||p[h]||i;return t?o.createElement(d,a(a({ref:n},m),{},{components:t})):o.createElement(d,a({ref:n},m))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,a=new Array(i);a[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:s,a[1]=r;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},79192:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=t(87462),s=(t(67294),t(3905));const i={sidebar_position:8060,slug:"2022-03-30",title:"MQTT with RabbitMQ",authors:"mpolinowski",tags:["MQTT","Databases"]},a=void 0,r={unversionedId:"IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/index",id:"IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/index",title:"MQTT with RabbitMQ",description:"Guangzhou, China",source:"@site/docs/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/index.md",sourceDirName:"IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq",slug:"/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/2022-03-30",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/2022-03-30",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/MQTT/2022-03-30--mqtt-with-rabbit-mq/index.md",tags:[{label:"MQTT",permalink:"/docs/tags/mqtt"},{label:"Databases",permalink:"/docs/tags/databases"}],version:"current",sidebarPosition:8060,frontMatter:{sidebar_position:8060,slug:"2022-03-30",title:"MQTT with RabbitMQ",authors:"mpolinowski",tags:["MQTT","Databases"]},sidebar:"tutorialSidebar",previous:{title:"INSTAR MQTTv5 with Python - Client Connection",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-06-23-instar-mqtt-python-part-I/2022-06-23"},next:{title:"MQTT Message Server and Angular Frontend",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-03-28--mqtt-message-server/2022-03-28"}},l={},c=[{value:"Docker Compose Build",id:"docker-compose-build",level:2},{value:"RabbitMQ Configuration",id:"rabbitmq-configuration",level:3},{value:".env",id:"env",level:4},{value:"config/login.env",id:"configloginenv",level:4},{value:"MQTT Broker Configuration",id:"mqtt-broker-configuration",level:3},{value:"Build",id:"build",level:3},{value:"Adding Encryption",id:"adding-encryption",level:2},{value:"RabbitMQ Default Configuration",id:"rabbitmq-default-configuration",level:2},{value:"config/rabbitmq.conf",id:"configrabbitmqconf",level:3},{value:"config/advanced.config",id:"configadvancedconfig",level:3}],m={toc:c};function p(e){let{components:n,...i}=e;return(0,s.kt)("wrapper",(0,o.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Guangzhou, China",src:t(8378).Z,width:"1500",height:"583"})),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#docker-compose-build"},"Docker Compose Build"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#rabbitmq-configuration"},"RabbitMQ Configuration"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#env"},".env")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#configloginenv"},"config/login.env")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#mqtt-broker-configuration"},"MQTT Broker Configuration")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#build"},"Build")))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#adding-encryption"},"Adding Encryption")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#rabbitmq-default-configuration"},"RabbitMQ Default Configuration"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#configrabbitmqconf"},"config/rabbitmq.conf")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"#configadvancedconfig"},"config/advanced.config"))))),(0,s.kt)("p",null,"Installing RabbitMQ with ",(0,s.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/mqtt.html"},"MQTT")," and ",(0,s.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/web-mqtt.html"},"MQTT over Websocket")," support using Docker. Using the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/tls-gen"},"TLS Generator")," to generate a valid CA certificate for the TLS encryption."),(0,s.kt)("h2",{id:"docker-compose-build"},"Docker Compose Build"),(0,s.kt)("p",null,"Start by creating the following environment files that will set the ",(0,s.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/rabbitmq?tab=tags"},"RabbitMQ Image")," version and the default user that can be used to login to the RabbitMQ Management Interface as well as the MQTT broker."),(0,s.kt)("h3",{id:"rabbitmq-configuration"},"RabbitMQ Configuration"),(0,s.kt)("h4",{id:"env"},".env"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-conf"},"IMAGE_VERSION=management-alpine\n")),(0,s.kt)("h4",{id:"configloginenv"},"config/login.env"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-conf"},"RABBITMQ_DEFAULT_USER=admin\nRABBITMQ_DEFAULT_PASS=instar\n")),(0,s.kt)("h3",{id:"mqtt-broker-configuration"},"MQTT Broker Configuration"),(0,s.kt)("p",null,"The configuration below is part of the default ",(0,s.kt)("a",{parentName:"p",href:"#configrabbitmqconf"},"config/rabbitmq.conf"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-conf"},"# =======================================\n# MQTT section\n# =======================================\n\n## TCP listener settings.\n##\n# mqtt.listeners.tcp.1 = 127.0.0.1:61613\n# mqtt.listeners.tcp.2 = ::1:61613\nmqtt.listeners.tcp.1 = 0.0.0.0:1883\n\n## TCP listener options (as per the broker configuration).\n##\nmqtt.tcp_listen_options.backlog = 6144  \nmqtt.tcp_listen_options.recbuf  = 131072\nmqtt.tcp_listen_options.sndbuf  = 131072\n#\nmqtt.tcp_listen_options.keepalive = true\nmqtt.tcp_listen_options.nodelay   = false\n#\nmqtt.tcp_listen_options.exit_on_close = false\nmqtt.tcp_listen_options.send_timeout  = 120\n\n## TLS listener settings\n## ## See https://rabbitmq.com/mqtt.html and https://rabbitmq.com/ssl.html for details.\n#\n# mqtt.listeners.ssl.default = 8883\n#\n# ssl_options.cacertfile = /path/to/tls/ca_certificate_bundle.pem\n# ssl_options.certfile   = /path/to/tls/server_certificate.pem\n# ssl_options.keyfile    = /path/to/tls/server_key.pem\n# ssl_options.verify     = verify_peer\n# ssl_options.fail_if_no_peer_cert  = true\n#\n\n\n## Number of Erlang processes that will accept connections for the TCP\n## and TLS listeners.\n##\nmqtt.num_acceptors.tcp = 10\n# mqtt.num_acceptors.ssl = 15\n\n## Whether or not to enable proxy protocol support.\n## Once enabled, clients cannot directly connect to the broker\n## anymore. They must connect through a load balancer that sends the\n## proxy protocol header to the broker at connection time.\n## This setting applies only to STOMP clients, other protocols\n## like STOMP or AMQP have their own setting to enable proxy protocol.\n## See the plugins or broker documentation for more information.\n##\n# mqtt.proxy_protocol = false\n\n## Set the default user name and password used for anonymous connections (when client\n## provides no credentials). Anonymous connections are highly discouraged!\n##\nmqtt.default_user = admin\nmqtt.default_pass = instar\n\n## Enable anonymous connections. If this is set to false, clients MUST provide\n## credentials in order to connect. See also the mqtt.default_user/mqtt.default_pass\n## keys. Anonymous connections are highly discouraged!\n##\nmqtt.allow_anonymous = false\n\n## If you have multiple vhosts, specify the one to which the\n## adapter connects.\n##\n# mqtt.vhost = /\n\n## Specify the exchange to which messages from MQTT clients are published.\n##\n# mqtt.exchange = amq.topic\n\n## Specify TTL (time to live) to control the lifetime of non-clean sessions.\n##\nmqtt.subscription_ttl = 1800000\n\n## Set the prefetch count (governing the maximum number of unacknowledged\n## messages that will be delivered).\n##\nmqtt.prefetch = 500\n##\n## use DETS (disk-based instead of RAM) store for retained messages\nmqtt.retained_message_store = rabbit_mqtt_retained_msg_store_dets\n## only used by DETS store\nmqtt.retained_message_store_dets_sync_interval = 2000\n##\n## Using Quorum Queues https://www.rabbitmq.com/mqtt.html#quorum-queues\nmqtt.durable_queue_type = quorum\n# if quorum queues are not used, configure a lower max WAL segment\n# limit compared to the default of 512 MiB, e.g. 64 MiB\n# raft.wal_max_size_bytes = 67108864\n#\n# =======================================\n# MQTT over WS section\n# =======================================\nweb_mqtt.tcp.port = 15675\n# web_mqtt.ssl.port       = 15676\n# web_mqtt.ssl.backlog    = 1024\n# web_mqtt.ssl.certfile   = /path/to/server_certificate.pem\n# web_mqtt.ssl.keyfile    = /path/to/server_key.pem\n# web_mqtt.ssl.cacertfile = /path/to/ca_certificate_bundle.pem\n# web_mqtt.ssl.password   = changeme\n\n# web_mqtt.ssl.honor_cipher_order   = true\n# web_mqtt.ssl.honor_ecc_order      = true\n# web_mqtt.ssl.client_renegotiation = false\n# web_mqtt.ssl.secure_renegotiate   = true\n\n# web_mqtt.ssl.versions.1 = tlsv1.2\n# web_mqtt.ssl.versions.2 = tlsv1.1\n# web_mqtt.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\n# web_mqtt.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\n# web_mqtt.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\n# web_mqtt.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\n# web_mqtt.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\n# web_mqtt.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\n# web_mqtt.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\n# web_mqtt.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\n# web_mqtt.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\n# connection inactivity timeout\n#\n##  Cowboy HTTP\nweb_mqtt.cowboy_opts.idle_timeout = 60000\n# max number of pending requests allowed on a connection\nweb_mqtt.cowboy_opts.max_keepalive = 200\n# max number of headers in a request\nweb_mqtt.cowboy_opts.max_headers   = 100\n# max number of empty lines before request body\nweb_mqtt.cowboy_opts.max_empty_lines = 5\n## Websocket Options\n# WebSocket traffic compression is enabled by default\nweb_mqtt.ws_opts.compress = true\n# WebSocket connection inactivity timeout\nweb_mqtt.ws_opts.idle_timeout = 60000\nweb_mqtt.ws_opts.max_frame_size = 50000\n")),(0,s.kt)("h3",{id:"build"},"Build"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'version: "3.8"\nservices:\n  rabbitmq:\n    image: rabbitmq:${IMAGE_VERSION}\n    container_name: rabbitmq\n    restart: unless-stopped\n    build:\n      context: rabbitmq/\n    ports:\n      - "1883:1883"\n      - "5672:5672"\n      - "8080:15672"\n      - "1885:15675"\n    command: "/bin/bash -c \\"rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_web_mqtt rabbitmq_amqp1_0; rabbitmq-server\\""\n    env_file:\n      - config/login.env\n    volumes:\n      - type: bind\n        source: ./config/rabbitmq.conf\n        target: /etc/rabbitmq/rabbitmq.conf\n        read_only: true\n      - type: bind\n        source: ./config/advanced.config\n        target: /etc/rabbitmq/advanced.config\n        read_only: true\n    networks:\n      brokernet:\n        ipv4_address: 172.16.238.101\n\nnetworks:\n  brokernet:\n    driver: bridge\n    driver_opts:\n      com.docker.network.enable_ipv6: "false"\n    ipam:\n      driver: default\n      config:\n        - subnet: 172.16.238.0/24\n')),(0,s.kt)("p",null,"First run the build command ",(0,s.kt)("inlineCode",{parentName:"p"},"docker-compose build")," the prepare the Docker image based on the ",(0,s.kt)("inlineCode",{parentName:"p"},"rabbitmq/Dockerfile"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"ARG IMAGE_VERSION\n\nFROM rabbitmq:${IMAGE_VERSION}\nRUN rabbitmq-plugins enable --offline rabbitmq_mqtt rabbitmq_web_mqtt rabbitmq_amqp1_0\n")),(0,s.kt)("h2",{id:"adding-encryption"},"Adding Encryption"),(0,s.kt)("p",null,"Generate the certificates:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/mpolinowski/tls-gen\ncd tls-gen/basic\nmake PASSWORD=<your_password_here>\nmake verify\nmake info\nls -l ./resultcd result\nopenssl rsa -in client_key.pem -out client_key_unencrypted.pem\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"ca_certificate.pem\nca_key.pem\nclient_certificate.pem\nclient_key.p12\nclient_key.pem\nclient_key_unencrypted.pem\nserver_certificate.pem\nserver_key.p12\nserver_key.pem\n")),(0,s.kt)("p",null,"Add them to ",(0,s.kt)("inlineCode",{parentName:"p"},"rabbitmq.conf"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"listeners.ssl.default = 5671\nmqtt.listeners.tcp = none\nmqtt.listeners.ssl.default = 8883ssl_options.cacertfile = /etc/rabbitmq/cert/ca_certificate.pem\nssl_options.certfile   = /etc/rabbitmq/cert/server_certificate.pem\nssl_options.keyfile    = /etc/rabbitmq/cert/server_key.pem\nssl_options.password   = <your_password_here>\nssl_options.verify     = verify_peer\nssl_options.fail_if_no_peer_cert = true\nssl_options.versions.1 = tlsv1.3\nssl_options.versions.2 = tlsv1.2\nssl_options.versions.3 = tlsv1.1\n")),(0,s.kt)("p",null,"And mount the cert folder into your container ",(0,s.kt)("inlineCode",{parentName:"p"},"Dockerfile"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"COPY ./cert/ /etc/rabbitmq/cert\nRUN chown -R rabbitmq:rabbitmq /etc/rabbitmq/cert\n")),(0,s.kt)("h2",{id:"rabbitmq-default-configuration"},"RabbitMQ Default Configuration"),(0,s.kt)("h3",{id:"configrabbitmqconf"},"config/rabbitmq.conf"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-conf"},"## This example configuration file demonstrates various settings\n## available via rabbitmq.conf. It primarily focuses core broker settings\n## but some tier 1 plugin settings are also covered.\n##\n## This file is AN EXAMPLE. It is NOT MEANT TO BE USED IN PRODUCTION. Instead of\n## copying the entire (large!) file, create or generate a new rabbitmq.conf for the target system\n## and populate it with the necessary settings.\n##\n## See https://rabbitmq.com/configure.html to learn about how to configure RabbitMQ,\n## the ini-style format used by rabbitmq.conf, how it is different from `advanced.config`,\n## how to verify effective configuration, and so on.\n##\n## See https://rabbitmq.com/documentation.html for the rest of RabbitMQ documentation.\n##\n## In case you have questions, please use RabbitMQ community Slack and the rabbitmq-users Google group\n## instead of GitHub issues.\n\n# ======================================\n# Core broker section\n# ======================================\n\n\n## Networking\n## ====================\n##\n## Related doc guide: https://rabbitmq.com/networking.html.\n##\n## By default, RabbitMQ will listen on all interfaces, using\n## the standard (reserved) AMQP 0-9-1 and 1.0 port.\n##\n# listeners.tcp.default = 5672\n\n\n## To listen on a specific interface, provide an IP address with port.\n## For example, to listen only on localhost for both IPv4 and IPv6:\n##\n# IPv4\n# listeners.tcp.local    = 127.0.0.1:5672\n# IPv6\n# listeners.tcp.local_v6 = ::1:5672\n\n## You can define multiple listeners using listener names\n# listeners.tcp.other_port = 5673\n# listeners.tcp.other_ip   = 10.10.10.10:5672\n\n\n## TLS listeners are configured in the same fashion as TCP listeners,\n## including the option to control the choice of interface.\n##\n# listeners.ssl.default = 5671\n\n## It is possible to disable regular TCP (non-TLS) listeners. Clients\n## not configured to use TLS and the correct TLS-enabled port won't be able\n## to connect to this node.\n# listeners.tcp = none\n\n## Number of Erlang processes that will accept connections for the TCP\n## and TLS listeners.\n##\n# num_acceptors.tcp = 10\n# num_acceptors.ssl = 10\n\n## Socket writer will force GC every so many bytes transferred.\n## Default is 1 GiB (`1000000000`). Set to 'off' to disable.\n##\n# socket_writer.gc_threshold = 1000000000\n#\n## To disable:\n# socket_writer.gc_threshold = off\n\n## Maximum amount of time allowed for the AMQP 0-9-1 and AMQP 1.0 handshake\n## (performed after socket connection and TLS handshake) to complete, in milliseconds.\n##\n# handshake_timeout = 10000\n\n## Set to 'true' to perform reverse DNS lookups when accepting a\n## connection. rabbitmqctl and management UI will then display hostnames\n## instead of IP addresses. Default value is `false`.\n##\n# reverse_dns_lookups = false\n\n##\n## Security, Access Control\n## ==============\n##\n\n## Related doc guide: https://rabbitmq.com/access-control.html.\n\n## The default \"guest\" user is only permitted to access the server\n## via a loopback interface (e.g. localhost).\n## {loopback_users, [<<\"guest\">>]},\n##\n# loopback_users.guest = true\n\n## Uncomment the following line if you want to allow access to the\n## guest user from anywhere on the network.\n# loopback_users.guest = false\n\n## TLS configuration.\n##\n## Related doc guide: https://rabbitmq.com/ssl.html.\n##\n# listeners.ssl.1                  = 5671\n# \n# ssl_options.verify               = verify_peer\n# ssl_options.fail_if_no_peer_cert = false\n# ssl_options.cacertfile           = /path/to/cacert.pem\n# ssl_options.certfile             = /path/to/cert.pem\n# ssl_options.keyfile              = /path/to/key.pem\n#\n# ssl_options.honor_cipher_order   = true\n# ssl_options.honor_ecc_order      = true\n#\n## These are highly recommended for TLSv1.2 but cannot be used\n## with TLSv1.3. If TLSv1.3 is enabled, these lines MUST be removed.\n# ssl_options.client_renegotiation = false\n# ssl_options.secure_renegotiate   = true\n#\n## Limits what TLS versions the server enables for client TLS\n## connections. See https://www.rabbitmq.com/ssl.html#tls-versions for details.\n##\n## Cutting edge TLS version which requires recent client runtime\n## versions and has no cipher suite in common with earlier TLS versions.\n# ssl_options.versions.1 = tlsv1.3\n## Enables TLSv1.2 for best compatibility\n# ssl_options.versions.2 = tlsv1.2\n## Older TLS versions have known vulnerabilities and are being phased out\n## from wide use.\n\n## Limits what cipher suites the server will use for client TLS\n## connections. Narrowing this down can prevent some clients\n## from connecting.\n## If TLSv1.3 is enabled and cipher suites are overridden, TLSv1.3-specific\n## cipher suites must also be explicitly enabled.\n## See https://www.rabbitmq.com/ssl.html#cipher-suites and https://wiki.openssl.org/index.php/TLS1.3#Ciphersuites\n## for details.\n#\n## The example below uses TLSv1.3 cipher suites only\n#\n# ssl_options.ciphers.1  = TLS_AES_256_GCM_SHA384\n# ssl_options.ciphers.2  = TLS_AES_128_GCM_SHA256\n# ssl_options.ciphers.3  = TLS_CHACHA20_POLY1305_SHA256\n# ssl_options.ciphers.4  = TLS_AES_128_CCM_SHA256\n# ssl_options.ciphers.5  = TLS_AES_128_CCM_8_SHA256\n#\n## The example below uses TLSv1.2 cipher suites only\n#\n# ssl_options.ciphers.1  = ECDHE-ECDSA-AES256-GCM-SHA384\n# ssl_options.ciphers.2  = ECDHE-RSA-AES256-GCM-SHA384\n# ssl_options.ciphers.3  = ECDHE-ECDSA-AES256-SHA384\n# ssl_options.ciphers.4  = ECDHE-RSA-AES256-SHA384\n# ssl_options.ciphers.5  = ECDH-ECDSA-AES256-GCM-SHA384\n# ssl_options.ciphers.6  = ECDH-RSA-AES256-GCM-SHA384\n# ssl_options.ciphers.7  = ECDH-ECDSA-AES256-SHA384\n# ssl_options.ciphers.8  = ECDH-RSA-AES256-SHA384\n# ssl_options.ciphers.9  = DHE-RSA-AES256-GCM-SHA384\n# ssl_options.ciphers.10 = DHE-DSS-AES256-GCM-SHA384\n# ssl_options.ciphers.11 = DHE-RSA-AES256-SHA256\n# ssl_options.ciphers.12 = DHE-DSS-AES256-SHA256\n# ssl_options.ciphers.13 = ECDHE-ECDSA-AES128-GCM-SHA256\n# ssl_options.ciphers.14 = ECDHE-RSA-AES128-GCM-SHA256\n# ssl_options.ciphers.15 = ECDHE-ECDSA-AES128-SHA256\n# ssl_options.ciphers.16 = ECDHE-RSA-AES128-SHA256\n# ssl_options.ciphers.17 = ECDH-ECDSA-AES128-GCM-SHA256\n# ssl_options.ciphers.18 = ECDH-RSA-AES128-GCM-SHA256\n# ssl_options.ciphers.19 = ECDH-ECDSA-AES128-SHA256\n# ssl_options.ciphers.20 = ECDH-RSA-AES128-SHA256\n# ssl_options.ciphers.21 = DHE-RSA-AES128-GCM-SHA256\n# ssl_options.ciphers.22 = DHE-DSS-AES128-GCM-SHA256\n# ssl_options.ciphers.23 = DHE-RSA-AES128-SHA256\n# ssl_options.ciphers.24 = DHE-DSS-AES128-SHA256\n# ssl_options.ciphers.25 = ECDHE-ECDSA-AES256-SHA\n# ssl_options.ciphers.26 = ECDHE-RSA-AES256-SHA\n# ssl_options.ciphers.27 = DHE-RSA-AES256-SHA\n# ssl_options.ciphers.28 = DHE-DSS-AES256-SHA\n# ssl_options.ciphers.29 = ECDH-ECDSA-AES256-SHA\n# ssl_options.ciphers.30 = ECDH-RSA-AES256-SHA\n# ssl_options.ciphers.31 = ECDHE-ECDSA-AES128-SHA\n# ssl_options.ciphers.32 = ECDHE-RSA-AES128-SHA\n# ssl_options.ciphers.33 = DHE-RSA-AES128-SHA\n# ssl_options.ciphers.34 = DHE-DSS-AES128-SHA\n# ssl_options.ciphers.35 = ECDH-ECDSA-AES128-SHA\n# ssl_options.ciphers.36 = ECDH-RSA-AES128-SHA\n\n# ssl_options.bypass_pem_cache = true\n\n## Select an authentication/authorization backend to use.\n##\n## Alternative backends are provided by plugins, such as rabbitmq-auth-backend-ldap.\n##\n## NB: These settings require certain plugins to be enabled.\n##\n## Related doc guides:\n##\n##  * https://rabbitmq.com/plugins.html\n##  * https://rabbitmq.com/access-control.html\n##\n\n# auth_backends.1   = rabbit_auth_backend_internal\n\n## uses separate backends for authentication and authorization,\n## see below.\n# auth_backends.1.authn = rabbit_auth_backend_ldap\n# auth_backends.1.authz = rabbit_auth_backend_internal\n\n## The rabbitmq_auth_backend_ldap plugin allows the broker to\n## perform authentication and authorization by deferring to an\n## external LDAP server.\n##\n## Relevant doc guides:\n##\n## * https://rabbitmq.com/ldap.html\n## * https://rabbitmq.com/access-control.html\n##\n## uses LDAP for both authentication and authorization\n# auth_backends.1 = rabbit_auth_backend_ldap\n\n## uses HTTP service for both authentication and\n## authorization\n# auth_backends.1 = rabbit_auth_backend_http\n\n## uses two backends in a chain: HTTP first, then internal\n# auth_backends.1   = rabbit_auth_backend_http\n# auth_backends.2   = rabbit_auth_backend_internal\n\n## Authentication\n## The built-in mechanisms are 'PLAIN',\n## 'AMQPLAIN', and 'EXTERNAL' Additional mechanisms can be added via\n## plugins.\n##\n## Related doc guide: https://rabbitmq.com/authentication.html.\n##\n# auth_mechanisms.1 = PLAIN\n# auth_mechanisms.2 = AMQPLAIN\n\n## The rabbitmq-auth-mechanism-ssl plugin makes it possible to\n## authenticate a user based on the client's x509 (TLS) certificate.\n## Related doc guide: https://rabbitmq.com/authentication.html.\n##\n## To use auth-mechanism-ssl, the EXTERNAL mechanism should\n## be enabled:\n##\n# auth_mechanisms.1 = PLAIN\n# auth_mechanisms.2 = AMQPLAIN\n# auth_mechanisms.3 = EXTERNAL\n\n## To force x509 certificate-based authentication on all clients,\n## exclude all other mechanisms (note: this will disable password-based\n## authentication even for the management UI!):\n##\n# auth_mechanisms.1 = EXTERNAL\n\n## This pertains to both the rabbitmq-auth-mechanism-ssl plugin and\n## STOMP ssl_cert_login configurations. See the RabbitMQ STOMP plugin\n## configuration section later in this file and the README in\n## https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl for further\n## details.\n##\n## To use the TLS cert's CN instead of its DN as the username\n##\n# ssl_cert_login_from   = common_name\n\n## TLS handshake timeout, in milliseconds.\n##\n# ssl_handshake_timeout = 5000\n\n\n## Cluster name\n##\n# cluster_name = dev3.eng.megacorp.local\n\n## Password hashing implementation. Will only affect newly\n## created users. To recalculate hash for an existing user\n## it's necessary to update her password.\n##\n## To use SHA-512, set to rabbit_password_hashing_sha512.\n##\n# password_hashing_module = rabbit_password_hashing_sha256\n\n## When importing definitions exported from versions earlier\n## than 3.6.0, it is possible to go back to MD5 (only do this\n## as a temporary measure!) by setting this to rabbit_password_hashing_md5.\n##\n# password_hashing_module = rabbit_password_hashing_md5\n\n##\n## Default User / VHost\n## ====================\n##\n\n## On first start RabbitMQ will create a vhost and a user. These\n## config items control what gets created.\n## Relevant doc guide: https://rabbitmq.com/access-control.html\n##\n# default_vhost = /\n# default_user = guest\n# default_pass = guest\n\n# default_permissions.configure = .*\n# default_permissions.read = .*\n# default_permissions.write = .*\n\n## Tags for default user\n##\n## For more details about tags, see the documentation for the\n## Management Plugin at https://rabbitmq.com/management.html.\n##\n# default_user_tags.administrator = true\n\n## Define other tags like this:\n# default_user_tags.management = true\n# default_user_tags.custom_tag = true\n\n##\n## Additional network and protocol related configuration\n## =====================================================\n##\n\n## Set the server AMQP 0-9-1 heartbeat timeout in seconds.\n## RabbitMQ nodes will send heartbeat frames at roughly\n## the (timeout / 2) interval. Two missed heartbeats from\n## a client will close its connection.\n##\n## Values lower than 6 seconds are very likely to produce\n## false positives and are not recommended.\n##\n## Related doc guides:\n##\n## * https://rabbitmq.com/heartbeats.html\n## * https://rabbitmq.com/networking.html\n##\n# heartbeat = 60\n\n## Set the max permissible size of an AMQP frame (in bytes).\n##\n# frame_max = 131072\n\n## Set the max frame size the server will accept before connection\n## tuning occurs\n##\n# initial_frame_max = 4096\n\n## Set the max permissible number of channels per connection.\n## 0 means \"no limit\".\n##\n# channel_max = 128\n\n## Customising TCP Listener (Socket) Configuration.\n##\n## Related doc guides:\n##\n## * https://rabbitmq.com/networking.html\n## * https://www.erlang.org/doc/man/inet.html#setopts-2\n##\n\n# tcp_listen_options.backlog = 128\n# tcp_listen_options.nodelay = true\n# tcp_listen_options.exit_on_close = false\n#\n# tcp_listen_options.keepalive = true\n# tcp_listen_options.send_timeout = 15000\n#\n# tcp_listen_options.buffer = 196608\n# tcp_listen_options.sndbuf = 196608\n# tcp_listen_options.recbuf = 196608\n\n##\n## Resource Limits & Flow Control\n## ==============================\n##\n## Related doc guide: https://rabbitmq.com/memory.html.\n\n## Memory-based Flow Control threshold.\n##\n# vm_memory_high_watermark.relative = 0.4\n\n## Alternatively, we can set a limit (in bytes) of RAM used by the node.\n##\n# vm_memory_high_watermark.absolute = 1073741824\n\n## Or you can set absolute value using memory units (with RabbitMQ 3.6.0+).\n## Absolute watermark will be ignored if relative is defined!\n##\n# vm_memory_high_watermark.absolute = 2GB\n##\n## Supported unit symbols:\n##\n## k, kiB: kibibytes (2^10 - 1,024 bytes)\n## M, MiB: mebibytes (2^20 - 1,048,576 bytes)\n## G, GiB: gibibytes (2^30 - 1,073,741,824 bytes)\n## kB: kilobytes (10^3 - 1,000 bytes)\n## MB: megabytes (10^6 - 1,000,000 bytes)\n## GB: gigabytes (10^9 - 1,000,000,000 bytes)\n\n\n\n## Fraction of the high watermark limit at which queues start to\n## page message out to disc in order to free up memory.\n## For example, when vm_memory_high_watermark is set to 0.4 and this value is set to 0.5,\n## paging can begin as early as when 20% of total available RAM is used by the node.\n##\n## Values greater than 1.0 can be dangerous and should be used carefully.\n##\n## One alternative to this is to use durable queues and publish messages\n## as persistent (delivery mode = 2). With this combination queues will\n## move messages to disk much more rapidly.\n##\n## Another alternative is to configure queues to page all messages (both\n## persistent and transient) to disk as quickly\n## as possible, see https://rabbitmq.com/lazy-queues.html.\n##\n# vm_memory_high_watermark_paging_ratio = 0.5\n\n## Selects Erlang VM memory consumption calculation strategy. Can be `allocated`, `rss` or `legacy` (aliased as `erlang`),\n## Introduced in 3.6.11. `rss` is the default as of 3.6.12.\n## See https://github.com/rabbitmq/rabbitmq-server/issues/1223 and rabbitmq/rabbitmq-common#224 for background.\n# vm_memory_calculation_strategy = rss\n\n## Interval (in milliseconds) at which we perform the check of the memory\n## levels against the watermarks.\n##\n# memory_monitor_interval = 2500\n\n## The total memory available can be calculated from the OS resources\n## - default option - or provided as a configuration parameter.\n# total_memory_available_override_value = 2GB\n\n## Set disk free limit (in bytes). Once free disk space reaches this\n## lower bound, a disk alarm will be set - see the documentation\n## listed above for more details.\n##\n## Absolute watermark will be ignored if relative is defined!\n# disk_free_limit.absolute = 50000\n\n## Or you can set it using memory units (same as in vm_memory_high_watermark)\n## with RabbitMQ 3.6.0+.\n# disk_free_limit.absolute = 500KB\n# disk_free_limit.absolute = 50mb\n# disk_free_limit.absolute = 5GB\n\n## Alternatively, we can set a limit relative to total available RAM.\n##\n## Values lower than 1.0 can be dangerous and should be used carefully.\n# disk_free_limit.relative = 2.0\n\n##\n## Clustering\n## =====================\n##\n# cluster_partition_handling = ignore\n\n## Pauses all nodes on the minority side of a partition. The cluster\n## MUST have an odd number of nodes (3, 5, etc)\n# cluster_partition_handling = pause_minority\n\n## pause_if_all_down strategy require additional configuration\n# cluster_partition_handling = pause_if_all_down\n\n## Recover strategy. Can be either 'autoheal' or 'ignore'\n# cluster_partition_handling.pause_if_all_down.recover = ignore\n\n## Node names to check\n# cluster_partition_handling.pause_if_all_down.nodes.1 = rabbit@localhost\n# cluster_partition_handling.pause_if_all_down.nodes.2 = hare@localhost\n\n## Mirror sync batch size, in messages. Increasing this will speed\n## up syncing but total batch size in bytes must not exceed 2 GiB.\n## Available in RabbitMQ 3.6.0 or later.\n##\n# mirroring_sync_batch_size = 4096\n\n## Make clustering happen *automatically* at startup. Only applied\n## to nodes that have just been reset or started for the first time.\n##\n## Relevant doc guide: https://rabbitmq.com//cluster-formation.html\n##\n\n# cluster_formation.peer_discovery_backend     = rabbit_peer_discovery_classic_config\n#\n# cluster_formation.classic_config.nodes.1 = rabbit1@hostname\n# cluster_formation.classic_config.nodes.2 = rabbit2@hostname\n# cluster_formation.classic_config.nodes.3 = rabbit3@hostname\n# cluster_formation.classic_config.nodes.4 = rabbit4@hostname\n\n## DNS-based peer discovery. This backend will list A records\n## of the configured hostname and perform reverse lookups for\n## the addresses returned.\n\n# cluster_formation.peer_discovery_backend = rabbit_peer_discovery_dns\n# cluster_formation.dns.hostname = discovery.eng.example.local\n\n## This node's type can be configured. If you are not sure\n## what node type to use, always use 'disc'.\n# cluster_formation.node_type = disc\n\n## Interval (in milliseconds) at which we send keepalive messages\n## to other cluster members. Note that this is not the same thing\n## as net_ticktime; missed keepalive messages will not cause nodes\n## to be considered down.\n##\n# cluster_keepalive_interval = 10000\n\n##\n## Statistics Collection\n## =====================\n##\n\n## Statistics collection interval (in milliseconds). Increasing\n## this will reduce the load on management database.\n##\n# collect_statistics_interval = 5000\n\n## Fine vs. coarse statistics\n#\n# This value is no longer meant to be configured directly.\n#\n# See https://www.rabbitmq.com/management.html#fine-stats.\n\n##\n## Ra Settings\n## =====================\n##\n# raft.segment_max_entries = 65536\n# raft.wal_max_size_bytes = 1048576\n# raft.wal_max_batch_size = 4096\n# raft.snapshot_chunk_size = 1000000\n\n##\n## Misc/Advanced Options\n## =====================\n##\n## NB: Change these only if you understand what you are doing!\n##\n\n## Timeout used when waiting for Mnesia tables in a cluster to\n## become available.\n##\n# mnesia_table_loading_retry_timeout = 30000\n\n## Retries when waiting for Mnesia tables in the cluster startup. Note that\n## this setting is not applied to Mnesia upgrades or node deletions.\n##\n# mnesia_table_loading_retry_limit = 10\n\n## Size in bytes below which to embed messages in the queue index.\n## Related doc guide: https://rabbitmq.com/persistence-conf.html\n##\n# queue_index_embed_msgs_below = 4096\n\n## You can also set this size in memory units\n##\n# queue_index_embed_msgs_below = 4kb\n\n## Whether or not to enable background periodic forced GC runs for all\n## Erlang processes on the node in \"waiting\" state.\n##\n## Disabling background GC may reduce latency for client operations,\n## keeping it enabled may reduce median RAM usage by the binary heap\n## (see https://www.erlang-solutions.com/blog/erlang-garbage-collector.html).\n##\n## Before trying this option, please take a look at the memory\n## breakdown (https://www.rabbitmq.com/memory-use.html).\n##\n# background_gc_enabled = false\n\n## Target (desired) interval (in milliseconds) at which we run background GC.\n## The actual interval will vary depending on how long it takes to execute\n## the operation (can be higher than this interval). Values less than\n## 30000 milliseconds are not recommended.\n##\n# background_gc_target_interval = 60000\n\n## Whether or not to enable proxy protocol support.\n## Once enabled, clients cannot directly connect to the broker\n## anymore. They must connect through a load balancer that sends the\n## proxy protocol header to the broker at connection time.\n## This setting applies only to AMQP clients, other protocols\n## like MQTT or STOMP have their own setting to enable proxy protocol.\n## See the plugins documentation for more information.\n##\n# proxy_protocol = false\n\n## Overriden product name and version.\n## They are set to \"RabbitMQ\" and the release version by default.\n# product.name = RabbitMQ\n# product.version = 1.2.3\n\n## \"Message of the day\" file.\n## Its content is used to expand the logged and printed banners.\n## Default to /etc/rabbitmq/motd on Unix, %APPDATA%\\RabbitMQ\\motd.txt\n## on Windows.\n# motd_file = /etc/rabbitmq/motd\n\n## Consumer timeout\n## If a message delivered to a consumer has not been acknowledge before this timer\n## triggers the channel will be force closed by the broker. This ensure that\n## faultly consumers that never ack will not hold on to messages indefinitely.\n##\n# consumer_timeout = 900000\n\n## ----------------------------------------------------------------------------\n## Advanced Erlang Networking/Clustering Options.\n##\n## Related doc guide: https://rabbitmq.com/clustering.html\n## ----------------------------------------------------------------------------\n\n# ======================================\n# Kernel section\n# ======================================\n\n## Timeout used to detect peer unavailability, including CLI tools.\n## Related doc guide: https://www.rabbitmq.com/nettick.html.\n##\n# net_ticktime = 60\n\n## Inter-node communication port range.\n## The parameters inet_dist_listen_min and inet_dist_listen_max\n## can be configured in the classic config format only.\n## Related doc guide: https://www.rabbitmq.com/networking.html#epmd-inet-dist-port-range.\n\n\n## ----------------------------------------------------------------------------\n## RabbitMQ Management Plugin\n##\n## Related doc guide: https://rabbitmq.com/management.html.\n## ----------------------------------------------------------------------------\n\n# =======================================\n# Management section\n# =======================================\n\n## Preload schema definitions from the following JSON file.\n## Related doc guide: https://rabbitmq.com/management.html#load-definitions.\n##\n# management.load_definitions = /path/to/exported/definitions.json\n\n## Log all requests to the management HTTP API to a file.\n##\n# management.http_log_dir = /path/to/access.log\n\n## HTTP listener and embedded Web server settings.\n# ## See https://rabbitmq.com/management.html for details.\n#\n# management.tcp.port = 15672\n# management.tcp.ip   = 0.0.0.0\n#\n# management.tcp.shutdown_timeout   = 7000\n# management.tcp.max_keepalive      = 120\n# management.tcp.idle_timeout       = 120\n# management.tcp.inactivity_timeout = 120\n# management.tcp.request_timeout    = 120\n# management.tcp.compress           = true\n\n## HTTPS listener settings.\n## See https://rabbitmq.com/management.html and https://rabbitmq.com/ssl.html for details.\n##\n# management.ssl.port       = 15671\n# management.ssl.cacertfile = /path/to/ca_certificate.pem\n# management.ssl.certfile   = /path/to/server_certificate.pem\n# management.ssl.keyfile    = /path/to/server_key.pem\n\n## More TLS options\n# management.ssl.honor_cipher_order   = true\n# management.ssl.honor_ecc_order      = true\n\n## These are highly recommended for TLSv1.2 but cannot be used\n## with TLSv1.3. If TLSv1.3 is enabled, these lines MUST be removed.\n# management.ssl.client_renegotiation = false\n# management.ssl.secure_renegotiate   = true\n\n## Supported TLS versions\n# management.ssl.versions.1 = tlsv1.2\n\n## Cipher suites the server is allowed to use\n# management.ssl.ciphers.1 = ECDHE-ECDSA-AES256-GCM-SHA384\n# management.ssl.ciphers.2 = ECDHE-RSA-AES256-GCM-SHA384\n# management.ssl.ciphers.3 = ECDHE-ECDSA-AES256-SHA384\n# management.ssl.ciphers.4 = ECDHE-RSA-AES256-SHA384\n# management.ssl.ciphers.5 = ECDH-ECDSA-AES256-GCM-SHA384\n# management.ssl.ciphers.6 = ECDH-RSA-AES256-GCM-SHA384\n# management.ssl.ciphers.7 = ECDH-ECDSA-AES256-SHA384\n# management.ssl.ciphers.8 = ECDH-RSA-AES256-SHA384\n# management.ssl.ciphers.9 = DHE-RSA-AES256-GCM-SHA384\n\n## URL path prefix for HTTP API and management UI\n# management.path_prefix = /a-prefix\n\n## One of 'basic', 'detailed' or 'none'. See\n## https://rabbitmq.com/management.html#fine-stats for more details.\n# management.rates_mode = basic\n\n## Configure how long aggregated data (such as message rates and queue\n## lengths) is retained. Please read the plugin's documentation in\n## https://rabbitmq.com/management.html#configuration for more\n## details.\n## Your can use 'minute', 'hour' and 'day' keys or integer key (in seconds)\n# management.sample_retention_policies.global.minute    = 5\n# management.sample_retention_policies.global.hour  = 60\n# management.sample_retention_policies.global.day = 1200\n\n# management.sample_retention_policies.basic.minute   = 5\n# management.sample_retention_policies.basic.hour = 60\n\n# management.sample_retention_policies.detailed.10 = 5\n\n## ----------------------------------------------------------------------------\n## RabbitMQ Shovel Plugin\n##\n## Related doc guide: https://rabbitmq.com/shovel.html\n## ----------------------------------------------------------------------------\n\n## See advanced.config.example for a Shovel plugin example\n\n\n## ----------------------------------------------------------------------------\n## RabbitMQ STOMP Plugin\n##\n## Related doc guide: https://rabbitmq.com/stomp.html\n## ----------------------------------------------------------------------------\n\n# =======================================\n# STOMP section\n# =======================================\n\n## See https://rabbitmq.com/stomp.html for details.\n\n## TCP listeners.\n##\n# stomp.listeners.tcp.1 = 127.0.0.1:61613\n# stomp.listeners.tcp.2 = ::1:61613\n\n## TCP listener settings\n##\n# stomp.tcp_listen_options.backlog   = 2048\n# stomp.tcp_listen_options.recbuf    = 131072\n# stomp.tcp_listen_options.sndbuf    = 131072\n#\n# stomp.tcp_listen_options.keepalive = true\n# stomp.tcp_listen_options.nodelay   = true\n#\n# stomp.tcp_listen_options.exit_on_close = true\n# stomp.tcp_listen_options.send_timeout  = 120\n\n## Proxy protocol support\n##\n# stomp.proxy_protocol = false\n\n## TLS listeners\n## See https://rabbitmq.com/stomp.html and https://rabbitmq.com/ssl.html for details.\n# stomp.listeners.ssl.default = 61614\n#\n# ssl_options.cacertfile = path/to/cacert.pem\n# ssl_options.certfile   = path/to/cert.pem\n# ssl_options.keyfile    = path/to/key.pem\n# ssl_options.verify     =  verify_peer\n# ssl_options.fail_if_no_peer_cert = true\n\n\n## Number of Erlang processes that will accept connections for the TCP\n## and TLS listeners.\n##\n# stomp.num_acceptors.tcp = 10\n# stomp.num_acceptors.ssl = 1\n\n## Additional TLS options\n\n## Extract a name from the client's certificate when using TLS.\n##\n# stomp.ssl_cert_login = true\n\n## Set a default user name and password. This is used as the default login\n## whenever a CONNECT frame omits the login and passcode headers.\n##\n## Please note that setting this will allow clients to connect without\n## authenticating!\n##\n# stomp.default_user = guest\n# stomp.default_pass = guest\n\n## If a default user is configured, or you have configured use TLS client\n## certificate based authentication, you can choose to allow clients to\n## omit the CONNECT frame entirely. If set to true, the client is\n## automatically connected as the default user or user supplied in the\n## TLS certificate whenever the first frame sent on a session is not a\n## CONNECT frame.\n##\n# stomp.implicit_connect = true\n\n## Whether or not to enable proxy protocol support.\n## Once enabled, clients cannot directly connect to the broker\n## anymore. They must connect through a load balancer that sends the\n## proxy protocol header to the broker at connection time.\n## This setting applies only to STOMP clients, other protocols\n## like MQTT or AMQP have their own setting to enable proxy protocol.\n## See the plugins or broker documentation for more information.\n##\n# stomp.proxy_protocol = false\n\n## ----------------------------------------------------------------------------\n## RabbitMQ MQTT Adapter\n##\n## See https://github.com/rabbitmq/rabbitmq-mqtt/blob/stable/README.md\n## for details\n## ----------------------------------------------------------------------------\n\n# =======================================\n# MQTT section\n# =======================================\n\n## TCP listener settings.\n##\n# mqtt.listeners.tcp.1 = 127.0.0.1:61613\n# mqtt.listeners.tcp.2 = ::1:61613\n\n## TCP listener options (as per the broker configuration).\n##\n# mqtt.tcp_listen_options.backlog = 4096\n# mqtt.tcp_listen_options.recbuf  = 131072\n# mqtt.tcp_listen_options.sndbuf  = 131072\n#\n# mqtt.tcp_listen_options.keepalive = true\n# mqtt.tcp_listen_options.nodelay   = true\n#\n# mqtt.tcp_listen_options.exit_on_close = true\n# mqtt.tcp_listen_options.send_timeout  = 120\n\n## TLS listener settings\n## ## See https://rabbitmq.com/mqtt.html and https://rabbitmq.com/ssl.html for details.\n#\n# mqtt.listeners.ssl.default = 8883\n#\n# ssl_options.cacertfile = /path/to/tls/ca_certificate_bundle.pem\n# ssl_options.certfile   = /path/to/tls/server_certificate.pem\n# ssl_options.keyfile    = /path/to/tls/server_key.pem\n# ssl_options.verify     = verify_peer\n# ssl_options.fail_if_no_peer_cert  = true\n#\n\n\n## Number of Erlang processes that will accept connections for the TCP\n## and TLS listeners.\n##\n# mqtt.num_acceptors.tcp = 10\n# mqtt.num_acceptors.ssl = 10\n\n## Whether or not to enable proxy protocol support.\n## Once enabled, clients cannot directly connect to the broker\n## anymore. They must connect through a load balancer that sends the\n## proxy protocol header to the broker at connection time.\n## This setting applies only to STOMP clients, other protocols\n## like STOMP or AMQP have their own setting to enable proxy protocol.\n## See the plugins or broker documentation for more information.\n##\n# mqtt.proxy_protocol = false\n\n## Set the default user name and password used for anonymous connections (when client\n## provides no credentials). Anonymous connections are highly discouraged!\n##\n# mqtt.default_user = guest\n# mqtt.default_pass = guest\n\n## Enable anonymous connections. If this is set to false, clients MUST provide\n## credentials in order to connect. See also the mqtt.default_user/mqtt.default_pass\n## keys. Anonymous connections are highly discouraged!\n##\n# mqtt.allow_anonymous = true\n\n## If you have multiple vhosts, specify the one to which the\n## adapter connects.\n##\n# mqtt.vhost = /\n\n## Specify the exchange to which messages from MQTT clients are published.\n##\n# mqtt.exchange = amq.topic\n\n## Specify TTL (time to live) to control the lifetime of non-clean sessions.\n##\n# mqtt.subscription_ttl = 1800000\n\n## Set the prefetch count (governing the maximum number of unacknowledged\n## messages that will be delivered).\n##\n# mqtt.prefetch = 10\n\n\n## ----------------------------------------------------------------------------\n## RabbitMQ AMQP 1.0 Support\n##\n## See https://github.com/rabbitmq/rabbitmq-amqp1.0/blob/stable/README.md.\n## ----------------------------------------------------------------------------\n\n# =======================================\n# AMQP 1.0 section\n# =======================================\n\n\n## Connections that are not authenticated with SASL will connect as this\n## account. See the README for more information.\n##\n## Please note that setting this will allow clients to connect without\n## authenticating!\n##\n# amqp1_0.default_user = guest\n\n## Enable protocol strict mode. See the README for more information.\n##\n# amqp1_0.protocol_strict_mode = false\n\n## Logging settings.\n##\n## See https://rabbitmq.com/logging.html for details.\n##\n\n## Log directory, taken from the RABBITMQ_LOG_BASE env variable by default.\n##\n# log.dir = /var/log/rabbitmq\n\n## Logging to file. Can be false or a filename.\n## Default:\n# log.file = rabbit.log\n\n## To disable logging to a file\n# log.file = false\n\n## Log level for file logging\n##\n# log.file.level = info\n\n## File rotation config. No rotation by default.\n## DO NOT SET rotation date to ''. Leave the value unset if \"\" is the desired value\n# log.file.rotation.date = $D0\n# log.file.rotation.size = 0\n\n## Logging to console (can be true or false)\n##\n# log.console = false\n\n## Log level for console logging\n##\n# log.console.level = info\n\n## Logging to the amq.rabbitmq.log exchange (can be true or false)\n##\n# log.exchange = false\n\n## Log level to use when logging to the amq.rabbitmq.log exchange\n##\n# log.exchange.level = info\n\n\n\n## ----------------------------------------------------------------------------\n## RabbitMQ LDAP Plugin\n##\n## Related doc guide: https://rabbitmq.com/ldap.html.\n##\n## ----------------------------------------------------------------------------\n\n# =======================================\n# LDAP section\n# =======================================\n\n##\n## Connecting to the LDAP server(s)\n## ================================\n##\n\n## Specify servers to bind to. You *must* set this in order for the plugin\n## to work properly.\n##\n# auth_ldap.servers.1 = your-server-name-goes-here\n\n## You can define multiple servers\n# auth_ldap.servers.2 = your-other-server\n\n## Connect to the LDAP server using TLS\n##\n# auth_ldap.use_ssl = false\n\n## Specify the LDAP port to connect to\n##\n# auth_ldap.port = 389\n\n## LDAP connection timeout, in milliseconds or 'infinity'\n##\n# auth_ldap.timeout = infinity\n\n## Or number\n# auth_ldap.timeout = 500\n\n## Enable logging of LDAP queries.\n## One of\n##   - false (no logging is performed)\n##   - true (verbose logging of the logic used by the plugin)\n##   - network (as true, but additionally logs LDAP network traffic)\n##\n## Defaults to false.\n##\n# auth_ldap.log = false\n\n## Also can be true or network\n# auth_ldap.log = true\n# auth_ldap.log = network\n\n##\n## Authentication\n## ==============\n##\n\n## Pattern to convert the username given through AMQP to a DN before\n## binding\n##\n# auth_ldap.user_dn_pattern = cn=${username},ou=People,dc=example,dc=com\n\n## Alternatively, you can convert a username to a Distinguished\n## Name via an LDAP lookup after binding. See the documentation for\n## full details.\n\n## When converting a username to a dn via a lookup, set these to\n## the name of the attribute that represents the user name, and the\n## base DN for the lookup query.\n##\n# auth_ldap.dn_lookup_attribute = userPrincipalName\n# auth_ldap.dn_lookup_base      = DC=gopivotal,DC=com\n\n## Controls how to bind for authorization queries and also to\n## retrieve the details of users logging in without presenting a\n## password (e.g., SASL EXTERNAL).\n## One of\n##  - as_user (to bind as the authenticated user - requires a password)\n##  - anon    (to bind anonymously)\n##  - {UserDN, Password} (to bind with a specified user name and password)\n##\n## Defaults to 'as_user'.\n##\n# auth_ldap.other_bind = as_user\n\n## Or can be more complex:\n# auth_ldap.other_bind.user_dn  = User\n# auth_ldap.other_bind.password = Password\n\n## If user_dn and password defined - other options is ignored.\n\n# -----------------------------\n# Too complex section of LDAP\n# -----------------------------\n\n##\n## Authorisation\n## =============\n##\n\n## The LDAP plugin can perform a variety of queries against your\n## LDAP server to determine questions of authorization.\n##\n## Related doc guide: https://rabbitmq.com/ldap.html#authorization.\n\n## Following configuration should be defined in advanced.config file\n## DO NOT UNCOMMENT THESE LINES!\n\n## Set the query to use when determining vhost access\n##\n## {vhost_access_query, {in_group,\n##                       \"ou=${vhost}-users,ou=vhosts,dc=example,dc=com\"}},\n\n## Set the query to use when determining resource (e.g., queue) access\n##\n## {resource_access_query, {constant, true}},\n\n## Set queries to determine which tags a user has\n##\n## {tag_queries, []}\n#   ]},\n# -----------------------------\n")),(0,s.kt)("h3",{id:"configadvancedconfig"},"config/advanced.config"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'[\n\n\n %% ----------------------------------------------------------------------------\n %% Advanced Erlang Networking/Clustering Options.\n %%\n %% See https://www.rabbitmq.com/clustering.html for details\n %% ----------------------------------------------------------------------------\n %% Sets the net_kernel tick time.\n %% Please see http://erlang.org/doc/man/kernel_app.html and\n %% https://www.rabbitmq.com/nettick.html for further details.\n %%\n %% {kernel, [{net_ticktime, 60}]},\n %% ----------------------------------------------------------------------------\n %% RabbitMQ Shovel Plugin\n %%\n %% See https://www.rabbitmq.com/shovel.html for details\n %% ----------------------------------------------------------------------------\n\n {rabbitmq_shovel,\n  [{shovels,\n    [%% A named shovel worker.\n     %% {my_first_shovel,\n     %%  [\n\n     %% List the source broker(s) from which to consume.\n     %%\n     %%   {sources,\n     %%    [%% URI(s) and pre-declarations for all source broker(s).\n     %%     {brokers, ["amqp://user:password@host.domain/my_vhost"]},\n     %%     {declarations, []}\n     %%    ]},\n\n     %% List the destination broker(s) to publish to.\n     %%   {destinations,\n     %%    [%% A singular version of the \'brokers\' element.\n     %%     {broker, "amqp://"},\n     %%     {declarations, []}\n     %%    ]},\n\n     %% Name of the queue to shovel messages from.\n     %%\n     %% {queue, <<"your-queue-name-goes-here">>},\n\n     %% Optional prefetch count.\n     %%\n     %% {prefetch_count, 10},\n\n     %% when to acknowledge messages:\n     %% - no_ack: never (auto)\n     %% - on_publish: after each message is republished\n     %% - on_confirm: when the destination broker confirms receipt\n     %%\n     %% {ack_mode, on_confirm},\n\n     %% Overwrite fields of the outbound basic.publish.\n     %%\n     %% {publish_fields, [{exchange,    <<"my_exchange">>},\n     %%                   {routing_key, <<"from_shovel">>}]},\n\n     %% Static list of basic.properties to set on re-publication.\n     %%\n     %% {publish_properties, [{delivery_mode, 2}]},\n\n     %% The number of seconds to wait before attempting to\n     %% reconnect in the event of a connection failure.\n     %%\n     %% {reconnect_delay, 2.5}\n\n     %% ]} %% End of my_first_shovel\n    ]}\n   %% Rather than specifying some values per-shovel, you can specify\n   %% them for all shovels here.\n   %%\n   %% {defaults, [{prefetch_count,     0},\n   %%             {ack_mode,           on_confirm},\n   %%             {publish_fields,     []},\n   %%             {publish_properties, [{delivery_mode, 2}]},\n   %%             {reconnect_delay,    2.5}]}\n  ]},\n\n  {rabbitmq_auth_backend_ldap, [\n    %%\n    %% Authorisation\n    %% =============\n    %%\n\n    %% The LDAP plugin can perform a variety of queries against your\n    %% LDAP server to determine questions of authorization. See\n    %% https://www.rabbitmq.com/ldap.html#authorization for more\n    %% information.\n\n    %% Set the query to use when determining vhost access\n    %%\n    %% {vhost_access_query, {in_group,\n    %%                       "ou=${vhost}-users,ou=vhosts,dc=example,dc=com"}},\n\n    %% Set the query to use when determining resource (e.g., queue) access\n    %%\n    %% {resource_access_query, {constant, true}},\n\n    %% Set queries to determine which tags a user has\n    %%\n    %% {tag_queries, []}\n  ]}\n].\n')))}p.isMDXComponent=!0},8378:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-8ced3c54d38a6194434c5e7d8e5c77ba.jpg"}}]);