"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[95065],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=s,g=u["".concat(i,".").concat(m)]||u[m]||p[m]||o;return t?a.createElement(g,r(r({ref:n},d),{},{components:t})):a.createElement(g,r({ref:n},d))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,r=new Array(o);r[0]=u;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:s,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},96308:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(87462),s=(t(67294),t(3905));const o={sidebar_position:9080,slug:"2021-09-10",title:"Go Websockets",authors:"mpolinowski",tags:["Go","Javascript"]},r=void 0,l={unversionedId:"Development/Go/2021-09-10--go-websockets/index",id:"Development/Go/2021-09-10--go-websockets/index",title:"Go Websockets",description:"Jomsom, Nepal",source:"@site/docs/Development/Go/2021-09-10--go-websockets/index.md",sourceDirName:"Development/Go/2021-09-10--go-websockets",slug:"/Development/Go/2021-09-10--go-websockets/2021-09-10",permalink:"/docs/Development/Go/2021-09-10--go-websockets/2021-09-10",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2021-09-10--go-websockets/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"},{label:"Javascript",permalink:"/docs/tags/javascript"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2021-09-10",title:"Go Websockets",authors:"mpolinowski",tags:["Go","Javascript"]},sidebar:"tutorialSidebar",previous:{title:"Golang Refresher :: fmt & strings",permalink:"/docs/Development/Go/2021-09-11--golang-refresher-fmt-strings/2021-09-11"},next:{title:"Paho MQTT Client with Golang",permalink:"/docs/Development/Go/2021-06-03--mqtt-with-golang/2021-06-03"}},i={},c=[{value:"Project Setup",id:"project-setup",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Working with Jet",id:"working-with-jet",level:3},{value:"Create a HTML Page",id:"create-a-html-page",level:4},{value:"Create a Route",id:"create-a-route",level:4},{value:"Create a Handler",id:"create-a-handler",level:4},{value:"Create the Webserver",id:"create-the-webserver",level:4},{value:"Setting up a Websocket Connection",id:"setting-up-a-websocket-connection",level:2},{value:"Using the Websocket Connection",id:"using-the-websocket-connection",level:3},{value:"Handling Connected Users",id:"handling-connected-users",level:4},{value:"Sending Messages",id:"sending-messages",level:4}],d={toc:c};function p(e){let{components:n,...o}=e;return(0,s.kt)("wrapper",(0,a.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Jomsom, Nepal",src:t(48539).Z,width:"1500",height:"405"})),(0,s.kt)("h2",{id:"project-setup"},"Project Setup"),(0,s.kt)("p",null,"This project are my notes following along a tutorial by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tsawler/ws-udemy"},"@tsawler")," and can be found ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tsawler/ws-udemy"},"on Github"),"."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"See ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/go_gorilla_websockets"},"Github Repository"))),(0,s.kt)("h3",{id:"dependencies"},"Dependencies"),(0,s.kt)("p",null,"Initialize the project:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mod init go_gorilla_websocket\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/CloudyKit/jet"},"HTML Templating Engine"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/CloudyKit/jet/v6   \ngo get: added github.com/CloudyKit/fastprinter v0.0.0-20200109182630-33d98a066a53\ngo get: added github.com/CloudyKit/jet/v6 v6.1.0\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/bmizerany/pat"},"Routing package"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/bmizerany/pat   \ngo get: added github.com/bmizerany/pat v0.0.0-20210406213842-e4b6760bdd6f\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/gorilla/websocket"},"Websocket package"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"go get github.com/gorilla/websocket\ngo get: added github.com/gorilla/websocket v1.4.2\n")),(0,s.kt)("h3",{id:"working-with-jet"},"Working with Jet"),(0,s.kt)("p",null,"Jet is a templating engine for Go - just like EJS or Handlebar for Node.js - start by creating a simple home page with the ",(0,s.kt)("inlineCode",{parentName:"p"},".jet")," extension."),(0,s.kt)("h4",{id:"create-a-html-page"},"Create a HTML Page"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content= "width=device-width, initial-scale=1.0">\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\n        <title>Home</title>\n    </head>\n    <body>\n        <h1>Frontpage</h1>\n    </body>\n')),(0,s.kt)("h4",{id:"create-a-route"},"Create a Route"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"cmd\\web\\routes.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "go_gorilla_websocket/internal/handlers"\n    "net/http"\n    "github.com/bmizerany/pat"\n)\n\nfunc routes() http.Handler {\n    m := pat.New()\n\n    m.Get("/", http.HandlerFunc(handlers.Home))\n\n    return m\n}\n')),(0,s.kt)("h4",{id:"create-a-handler"},"Create a Handler"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"internal\\handlers\\handlers.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'package handlers\n\nimport (\n    "log"\n    "net/http"\n    "github.com/CloudyKit/jet/v6"\n)\n\nvar views = jet.NewSet(\n    jet.NewOSFileSystemLoader("./html"),\n    jet.InDevelopmentMode(),\n)\n\nfunc Home(w http.ResponseWriter, r *http.Request) {\n    err := renderPage(w, "home.jet", nil)\n    if err != nil {\n        log.Println(err)\n    }\n}\n\nfunc renderPage(w http.ResponseWriter, tmpl string, data jet.VarMap) error {\n    view, err := views.GetTemplate(tmpl)\n    if err != nil {\n        log.Println(err)\n        return err\n    }\n\n    err = view.Execute(w, data, nil)\n    if err != nil {\n        log.Println(err)\n        return err\n    }\n\n    return nil\n}\n')),(0,s.kt)("h4",{id:"create-the-webserver"},"Create the Webserver"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"cmd\\web\\main.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "log"\n    "net/http"\n)\n\nfunc main() {\n    m := routes()\n\n    log.Println("Starting Webserver on Port 8080")\n\n    _ = http.ListenAndServe(":8080", m)\n}\n')),(0,s.kt)("p",null,"You can start the app with:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"go mod tidy\ngo run cmd/web/*.go\n2021/09/26 20:31:26 Starting Webserver on Port 8080\n")),(0,s.kt)("p",null,"Go to ",(0,s.kt)("inlineCode",{parentName:"p"},"http://localhost:8080")," to verify that the page is available."),(0,s.kt)("h2",{id:"setting-up-a-websocket-connection"},"Setting up a Websocket Connection"),(0,s.kt)("p",null,"We can now add the Websocket Upgrade to our handlers:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"internal\\handlers\\handlers.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'var upgradeConnection = websocket.Upgrader {\n    ReadBufferSize: 1024,\n    WriteBufferSize: 1024,\n    CheckOrigin: func(r *http.Request) bool {return true},\n}\n\n// Define the response returned from the websocket\ntype WsJsonResponse struct {\n    Action          string `json: "action"`\n    Message         string `json: "message"`\n    MessageType     string `json: "message_type"`\n    ConnectedUsers []string `json:"connected_users"`\n}\n\n// Upgrade http connection to websocket\nfunc WsEndpoint(w http.ResponseWriter, r *http.Request) {\n    ws, err := upgradeConnection.Upgrade(w, r, nil)\n    if err != nil {\n        log.Println(err)\n    }\n    \n    log.Println("Client Connected to Endpoint")\n\n    var response WsJsonResponse\n    response.Message = `<em><small>Connected to Server</small></em>`\n\n    err = ws.WriteJSON(response)\n    if err != nil {\n        log.Println(err)\n    }\n}\n')),(0,s.kt)("p",null,"And add a route to this WS Endpoint:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"cmd\\web\\routes.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "go_gorilla_websocket/internal/handlers"\n    "net/http"\n\n    "github.com/bmizerany/pat"\n)\n\nfunc routes() http.Handler {\n    m := pat.New()\n\n    m.Get("/", http.HandlerFunc(handlers.Home))\n    m.Get("/ws", http.HandlerFunc(handlers.WsEndpoint))\n\n    return m\n}\n')),(0,s.kt)("p",null,"And add a WS client script to our Home page:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content= "width=device-width, initial-scale=1.0">\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\n        <title>Home</title>\n    </head>\n    <body>\n        <h1>Frontpage</h1>\n    </body>\n    <script>\n        let socket = null;\n        // Wait for the page to be loaded then connect to the websocket\n        document.addEventListener("DOMContentLoaded", function() {\n            socket = new WebSocket("ws://127.0.0.1:8080/ws");\n            // Console log when successful\n            socket.onopen = () => {\n                console.log("Websocket connection established")\n            }\n            // Console log when closed\n            socket.onclose = () => {\n                console.log("Websocket connection closed")\n            }\n            // Console log errors\n            socket.onerror = error => {\n                console.log(error)\n            }\n            // Console log messages\n            socket.onmessage = msg => {\n                console.log(msg)\n                //Our message will be in `msg.data` and be in JSON\n                let jmsg = JSON.parse(msg.data)\n                console.log(jmsg)\n            }\n        })\n    <\/script>\n</html>\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Go Websockets",src:t(15361).Z,width:"1248",height:"210"})),(0,s.kt)("p",null,"Restart the application and reload the Home page - you should now see a ",(0,s.kt)("inlineCode",{parentName:"p"},"Websocket connection established")," inside your browser console as well as having a connection message on your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"go run cmd/web/*.go\n2021/09/26 21:00:28 Starting Webserver on Port 8080\n2021/09/26 21:00:56 Client Connected to Endpoint\n")),(0,s.kt)("h3",{id:"using-the-websocket-connection"},"Using the Websocket Connection"),(0,s.kt)("p",null,"Now I need to handle the messages that I want to be send through the connection. For this I first define the necessary types and variables for chat clients channels:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"internal\\handlers\\handlers.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'var wsChn = make(chan WsPayload)\nvar clients = make(map[WebSocketConnection] string)\n\n...\n\n// Websocket type provided by the websocket package\ntype WebSocketConnection struct {\n    *websocket.Conn\n}\n\n// Define the response returned from the websocket\ntype WsPayload struct {\n    Action      string `json: "action"`\n    Username    string `json: "username"`\n    Message     string `json: "message"`\n    Conn WebSocketConnection `json: "-"`\n}\n')),(0,s.kt)("p",null,"We need a function that listens to the ws connection and expects a payload of type ",(0,s.kt)("inlineCode",{parentName:"p"},"WsPayload"),":"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"internal\\handlers\\handlers.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'func ListenForWs(conn *WebSocketConnection) {\n    //If listener crashes restart it\n    defer func() {\n        if r := recover(); r != nil {\n            log.Println("Error", fmt.Sprintf("%v", r))\n        }\n    }()\n\n    var payload WsPayload\n\n    // If there is payload send it to the ws Channel defined as a var of type `WsPayload`\n    for {\n        err := conn.ReadJSON(&payload)\n        if err != nil {\n            // do nothing\n        } else {\n            payload.Conn = *conn\n            wsChn <- payload\n        }\n    }\n}\n')),(0,s.kt)("p",null,"When the function above receives a payload it writes it to ",(0,s.kt)("inlineCode",{parentName:"p"},"wsChn")," which we need to store in a variable ",(0,s.kt)("inlineCode",{parentName:"p"},"e")," and forward it to a broadcast function that forwards it to all connected clients:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"internal\\handlers\\handlers.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'func ListenToWsChannel() {\n    var response WsJsonResponse\n\n    for {\n        // forward the payload stored in `wsChn` to the broadcast function\n        e := <- wsChn\n        response.Action = "Got here"\n        response.Message = fmt.Sprintf("A message and action was %s", e.Action)\n        broadcastToAll(response)\n    }\n}\n\nfunc broadcastToAll(response WsJsonResponse) {\n    // Broadcast payload to all connected clients\n    for client := range clients {\n        err := client.WriteJSON(response)\n        // If you encounter an error delete the client\n        if err != nil {\n            log.Println("Websocket err")\n            _ = client.Close()\n            delete(clients, client)\n        }\n    }\n}\n')),(0,s.kt)("p",null,"We will trigger this routine by calling ",(0,s.kt)("inlineCode",{parentName:"p"},"ListenForWs")," from the main ",(0,s.kt)("inlineCode",{parentName:"p"},"WsEndpoint"),":"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"internal\\handlers\\handlers.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'func WsEndpoint(w http.ResponseWriter, r *http.Request) {\n    ws, err := upgradeConnection.Upgrade(w, r, nil)\n    if err != nil {\n        log.Println(err)\n    }\n    \n    log.Println("Client Connected to Endpoint")\n\n    var response WsJsonResponse\n    response.Message = `<em><small>Connected to Server</small></em>`\n\n    conn := WebSocketConnection{Conn: ws}\n    clients[conn] = ""\n\n    err = ws.WriteJSON(response)\n    if err != nil {\n        log.Println(err)\n    }\n\n    go ListenForWs(&conn)\n}\n')),(0,s.kt)("p",null,"And adding it to our main function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"cmd\\web\\main.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    m := routes()\n\n    log.Println("Starting channel listener")\n    go handlers.ListenToWsChannel()\n\n    log.Println("Starting Webserver on Port 8080")\n\n    _ = http.ListenAndServe(":8080", m)\n}\n')),(0,s.kt)("p",null,"Restart the server - you should now see the new message that the channel listener is active:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"go run cmd/web/*.go\n2021/09/27 12:21:33 Starting channel listener\n2021/09/27 12:21:33 Starting Webserver on Port 8080\n")),(0,s.kt)("p",null,"And also see the JSON formatted message in our browser console:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Go Websockets",src:t(5932).Z,width:"1251",height:"658"})),(0,s.kt)("h4",{id:"handling-connected-users"},"Handling Connected Users"),(0,s.kt)("p",null,"Our chat app has a input field where the user can type in a name he wants to use. We can now add a script to the Home html template that takes this name after the input field looses focus (user toggled from the username field to the message field) and writes it to a variable we can send to our backend:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'let userName = document.getElementById("username");\nuserName.addEventListener("change", function() {\n    let jsonData = {};\n    jsonData["action"] = "username";\n    jsonData["username"] = this.value;\n    socket.send(JSON.stringify(jsonData))\n})\n')),(0,s.kt)("p",null,"And the event is successfully fired - the message is send to our handler and the update was logged:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Go Websockets",src:t(75354).Z,width:"1252",height:"461"})),(0,s.kt)("p",null,"But the result is not very useful yet - we first need to get rid of our placeholder content in ",(0,s.kt)("inlineCode",{parentName:"p"},"ListenToWsChannel()"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'response.Action = "Got here"\nresponse.Message = fmt.Sprintf("A message and action was %s", e.Action)\n')),(0,s.kt)("p",null,"Instead I need to add each connected user to a list, sort it (because I can) and return it to the broadcast function:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"internal\\handlers\\handlers.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'func ListenToWsChannel() {\n    var response WsJsonResponse\n\n    for {\n        // forward the payload stored in `wsChn` to the broadcast function\n        e := <- wsChn\n\n        // Do different things based on the action that triggered you\n        switch e.Action {\n        // If action is `username` send it to `getUserList` and broadcast the return\n        case "username":\n            // get a list of all users and send it to the broadcast function\n            clients[e.Conn] = e.Username\n            users := getUserList()\n            response.Action = "list_users"\n            response.ConnectedUsers = users\n            broadcastToAll(response)\n        // If action is `left` delete user from list that send the message\n        case "left":\n            response.Action = "list_users"\n            delete(clients, e.Conn)\n            users := getUserList()\n            response.ConnectedUsers = users\n            broadcastToAll(response)\n\n        }\n\n        // Placeholder\n        // response.Action = "Got here"\n        // response.Message = fmt.Sprintf("A message and action was %s", e.Action)\n        // broadcastToAll(response)\n    }\n}\n\n\n// Collect all connected user\'s names and return a sorted list\nfunc getUserList() []string {\n\n    var userList []string\n\n    for _, x := range clients {\n        // If user name is not empty string append it\n        if x != "" {\n            userList = append(userList, x)\n        }\n    }\n    sort.Strings(userList)\n    return userList\n}\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Go Websockets",src:t(75354).Z,width:"1252",height:"461"})),(0,s.kt)("p",null,"Ok, now we can handle this response from the backend by adding a script to our Home page:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// send a message to server when user leaves\nwindow.onbeforeunload = function() {\n    console.log("User disconnected")\n    let jsonData = {};\n    jsonData["action"] = "left";\n    socket.send(JSON.stringify(jsonData));\n}\n\nsocket.onmessage = msg => {\n    // console.log(msg)\n    // Our message will be in `msg.data` and be in JSON\n    let data = JSON.parse(msg.data)\n    console.log("Action:", data.Action)\n\n    switch (data.Action) {\n        case "list_users":\n            // grab a unordered list by ID\n            let ul = document.getElementById("online_users");\n            // empty the list\n            while (ul.firstChild) ul.removeChild(ul.firstChild);\n            // if at least one user is connected\n            if (data.connected_users.length > 0) {\n                // loop through every user and create a list item for them\n                data.connected_users.forEach(function(item) {\n                    let li = document.createElement("li")\n                    li.classList.add("list-group-item");\n                    li.appendChild(document.createTextNode(item))\n                    ul.appendChild(li)\n                })\n            }\n            break;\n    }\n}\n')),(0,s.kt)("p",null,"We can use the list we are getting from our backend to render on our frontend by adding the unordered list with ID ",(0,s.kt)("inlineCode",{parentName:"p"},"online users"),":"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<h3>Who is online?</h3>\n<ul id="online_users">\n</ul>\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Go Websockets",src:t(86260).Z,width:"1245",height:"328"})),(0,s.kt)("h4",{id:"sending-messages"},"Sending Messages"),(0,s.kt)("p",null,"I now want to be able send data through the ws connection to my client and have it displayed on the web page. For this I first need to to create a place for it in the Home html template with ID ",(0,s.kt)("inlineCode",{parentName:"p"},"output")," and a button with id ",(0,s.kt)("inlineCode",{parentName:"p"},"sendBtn")," that takes the string from the message input with ID ",(0,s.kt)("inlineCode",{parentName:"p"},"message")," and send it to our backend:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<input type="text" name="message" id="message" />\n<a href="javascript:void(0)" role="button" id="sendBtn">Send Message</a>\n<input id="action" />\n<div id="output">\n</div>\n')),(0,s.kt)("p",null,"When the send button is pressed take the username and message and send them through the websocket connection. To be able to identify it set label ",(0,s.kt)("inlineCode",{parentName:"p"},"action")," to broadcast. Once send empty the message field:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'function sendMessage() {\n    let jsonData = {};\n    // Set `action` to be `broadcast`\n    jsonData["action"] = "broadcast";\n    // Take username and message\n    jsonData["username"] = document.getElementById("username").value;\n    jsonData["message"] = document.getElementById("message").value;\n    // and send them to the backend\n    socket.send(JSON.stringify(jsonData))\n    // Empty message field after message was send\n    document.getElementById("message").value = ""\n}\n')),(0,s.kt)("p",null,"I will add 2 ways of triggering the ",(0,s.kt)("inlineCode",{parentName:"p"},"sendMessage")," function - the first one is by clicking ENTER on your keyboard:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// When user types in a message and presses Enter send message\ndocument.getElementById("message").addEventListener("keydown", function(event) {\n    if (event.code === "Enter") {\n        // First check if you are connected\n        if (!socket) {\n            console.log("You are not connected")\n            return false\n        }\n        // Prevent having browser overthink the event\n        event.preventDefault();\n        event.stopPropagation();\n        // Trigger send message function below\n        sendMessage();\n    }\n})\n')),(0,s.kt)("p",null,"In our handler file we now need a case for action ",(0,s.kt)("inlineCode",{parentName:"p"},"broadcast")," that takes the username and message and sends them to all connected users:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"internal\\handlers\\handlers.go")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'// If action is `broadcast` receive message and broadcast to all connected users\ncase "broadcast":\n    // Broadcast sends the username and a message\n    response.Action = "broadcast"\n    // Prepend Username in front of message\n    response.Message = fmt.Sprintf("<strong>%s</strong>: %s", e.Username, e.Message)\n    // And send to everyone\n    broadcastToAll(response)\n\n}\n')),(0,s.kt)("p",null,"On the client side we now have to take the broadcast and print it in our chat field with ID ",(0,s.kt)("inlineCode",{parentName:"p"},"output"),":"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Define the variable\nlet outPut = document.getElementById("output")\n\n...\n\n// Create the switch case for `broadcast`\n case "broadcast":\n    // Take the message broadcast and output it into div with ID output\n    outPut.innerHTML = outPut.innerHTML + data.Message + "<br/>";\n    break;\n')),(0,s.kt)("p",null,"To send the message via the send button we can first add a check that verifies that the message field is not empty before triggering the send function - if false ",(0,s.kt)("inlineCode",{parentName:"p"},"sendMessage"),":"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"html\\home.jet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'let sendButton = document.getElementById("sendBtn")\n\n...\n\nsendButton.addEventListener("click", function() {\n    if ((userField.value === "") || (messageField.value === "")) {\n        alert ("Username and Message cannot be empty!");\n        return false;\n    } else {\n        sendMessage();\n        }\n    })\n})\n')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Go Websockets",src:t(28932).Z,width:"1105",height:"647"})))}p.isMDXComponent=!0},15361:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/GO_Websockets_02-f7e64a54e132735160714d74bcf36378.png"},5932:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/GO_Websockets_03-429634ae3fa61f1982c01d3ec84e3e1d.png"},75354:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/GO_Websockets_04-5e6fed3885c81eda2eb3f5f33167e1cd.png"},86260:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/GO_Websockets_06-41392ef8daf667112e4af092925f7826.png"},28932:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/GO_Websockets_07-3ed24372210f1554c0225ad4a2e8b55d.png"},48539:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-dcb76a807c307d19098cad056104ab42.jpg"}}]);