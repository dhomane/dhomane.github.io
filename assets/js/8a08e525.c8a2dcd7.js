"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[22950],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),h=o,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||r;return t?a.createElement(m,i(i({ref:n},c),{},{components:t})):a.createElement(m,i({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},84921:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=t(87462),o=(t(67294),t(3905));const r={sidebar_position:5070,slug:"2022-05-22",title:"Hashicorp Nomad with Consul II - The Reckoning",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"]},i=void 0,s={unversionedId:"DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/index",id:"DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/index",title:"Hashicorp Nomad with Consul II - The Reckoning",description:"Shen Zhen, China",source:"@site/docs/DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/index.md",sourceDirName:"DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2",slug:"/DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/2022-05-22",permalink:"/docs/DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/2022-05-22",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-05-22-hashicorp-dojo-nomad-consul-part-2/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5070,frontMatter:{sidebar_position:5070,slug:"2022-05-22",title:"Hashicorp Nomad with Consul II - The Reckoning",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad for NGINX Web Proxies",permalink:"/docs/DevOps/Hashicorp/2022-05-24-hashicorp-nomad-with-nginx/2022-05-24"},next:{title:"Hashicorp Dojo Consul Refresher",permalink:"/docs/DevOps/Hashicorp/2022-05-21-hashicorp-dojo-consul-refresher/2022-05-21"}},l={},d=[{value:"Consul Service Discovery",id:"consul-service-discovery",level:2},{value:"Register your Service with Consul",id:"register-your-service-with-consul",level:3},{value:"Adding the Fabio Load Balancer",id:"adding-the-fabio-load-balancer",level:2},{value:"Start Load Balancing",id:"start-load-balancing",level:3},{value:"Canary Deployment",id:"canary-deployment",level:2}],c={toc:d};function p(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Shen Zhen, China",src:t(26662).Z,width:"2230",height:"839"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#consul-service-discovery"},"Consul Service Discovery"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#register-your-service-with-consul"},"Register your Service with Consul")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#adding-the-fabio-load-balancer"},"Adding the Fabio Load Balancer"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#start-load-balancing"},"Start Load Balancing")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#canary-deployment"},"Canary Deployment"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Continuation of ",(0,o.kt)("a",{parentName:"p",href:"/docs/DevOps/Hashicorp/2022-05-20-hashicorp-dojo-nomad-consul/2022-05-20"},"Hashicorp Nomad Dojo"))),(0,o.kt)("h2",{id:"consul-service-discovery"},"Consul Service Discovery"),(0,o.kt)("p",null,"When two services need to communicate in a Nomad cluster, they need to know where to find each other and that's called Service Discovery. Because Nomad is purely a cluster manager and scheduler, you will need another piece of software to help you with service discovery: ",(0,o.kt)("a",{parentName:"p",href:"https://www.consul.io/"},"Consul"),"."),(0,o.kt)("h3",{id:"register-your-service-with-consul"},"Register your Service with Consul"),(0,o.kt)("p",null,"We can now add a service block to our frontend configuration file that tells Consul how to verify that the service is operational. This can be done by using the randomly assigned HTTP port and send an HTTP request on ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'job "frontend" {\n    datacenters = ["instaryun"]\n  type = "service"\n\n    group "frontend" {\n    count = 2\n\n    scaling {\n      enabled = true\n      min     = 2\n      max     = 3\n    }\n        \n        network {\n            mode = "host"\n            port "http" {\n                to = "8080"\n            }\n        }\n\n    service {\n      name = "frontend"\n      tags = [\n        "frontend",\n        "urlprefix-/website"\n      ]\n      port = "http"\n\n      check {\n        name     = "Frontend HTTP Healthcheck"\n        path     = "/"\n        type     = "http"\n        protocol = "http"\n        interval = "10s"\n        timeout  = "2s"\n      }\n    }\n\n        task "frontend" {\n            driver = "docker"\n\n            config {\n                image = "thedojoseries/frontend:latest"\n                ports = ["http"]\n            }\n        }\n    }\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note")," I am also adding a tag ",(0,o.kt)("inlineCode",{parentName:"p"},"urlprefix-/")," that will be used by the load balancer later on for routing. In the example above there is the ",(0,o.kt)("inlineCode",{parentName:"p"},"/website")," prefix. The web frontend will be available on the corresponding route.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'nomad plan frontend.nomad\n+ Job: "frontend"\n+ Task Group: "frontend" (2 create)\n  + Task: "app" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 frontend.nomad\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nomad job run -check-index 0 frontend.nomad\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hashicorp Nomad Docker Deployment",src:t(50578).Z,width:"990",height:"256"})),(0,o.kt)("p",null,"After running the app we can use Consul's UI to see if the ",(0,o.kt)("strong",{parentName:"p"},"Health Check")," is working:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hashicorp Nomad Docker Deployment",src:t(87765).Z,width:"1239",height:"828"})),(0,o.kt)("p",null,"Or use the REST API to check if our frontend service has been registered by running the following queries on the Nomad Master server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --insecure https://localhost:8501/v1/catalog/services\n\n{\n    "consul": [],\n    "frontend": ["frontend", "urlprefix-/website"],\n    "nomad-client": ["http"]\n}\n')),(0,o.kt)("p",null,"To get the two service ports we can check:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl --insecure \'https://localhost:8501/v1/health/service/frontend?passing\'\n\n[\n    {\n        ...\n            "Address": "my.minion.com",\n            "TaggedAddresses": {\n                "lan_ipv4": {\n                    "Address": "my.minion.com",\n                    "Port": 22568\n                },\n                "wan_ipv4": {\n                    "Address": "my.minion.com",\n                    "Port": 22568\n                }\n            },\n        ...\n            "Address": "my.minion.com",\n            "TaggedAddresses": {\n                "lan_ipv4": {\n                    "Address": "my.minion.com",\n                    "Port": 29222\n                },\n                "wan_ipv4": {\n                    "Address": "my.minion.com",\n                    "Port": 29222\n                }\n            },\n        ...\n    }\n]\n')),(0,o.kt)("p",null,"And here we see that the two service instances run on port ",(0,o.kt)("inlineCode",{parentName:"p"},"22568")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"29222")," - which can be confirmed on our Minion:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker ps\nCONTAINER ID  IMAGE                           PORTS\neec03c397329  thedojoseries/frontend:latest   my.minion.com:29222->8080/tcp\nbf06acaf078e  thedojoseries/frontend:latest   my.minion.com:27906->8080/tcp\n")),(0,o.kt)("h2",{id:"adding-the-fabio-load-balancer"},"Adding the Fabio Load Balancer"),(0,o.kt)("p",null,"Define a job called ",(0,o.kt)("inlineCode",{parentName:"p"},"fabio")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"fabio.nomad"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Define a group called fabio.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Define a task called fabio.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Fabio should be using the ",(0,o.kt)("a",{parentName:"li",href:"https://www.nomadproject.io/docs/drivers/docker"},"Docker driver"),"."),(0,o.kt)("li",{parentName:"ul"},"The image for this container should be ",(0,o.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/fabiolb/fabio/tags"},"fabiolb/fabio"),"."),(0,o.kt)("li",{parentName:"ul"},"Usually, Docker containers run in a network mode called Bridge. In a bridge mode, containers run on a different network stack than the host. Because Fabio needs to be able to communicate easily with Consul, which is running as a process on the host and not as a Docker container, you should configure fabio to run in a network mode called host instead (which will run the container in the same network stack as the host)."),(0,o.kt)("li",{parentName:"ul"},"Nomad should ",(0,o.kt)("a",{parentName:"li",href:"https://www.nomadproject.io/docs/job-specification/resources"},"allocate 200 MHz of cpu and 128 MB of memory")," to this task."),(0,o.kt)("li",{parentName:"ul"},"You should allocate two static ports for Fabio: ",(0,o.kt)("inlineCode",{parentName:"li"},"9999 - Load Balancer")," & ",(0,o.kt)("inlineCode",{parentName:"li"},"9998 - UI"),".")))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'job "fabio" {\n  datacenters = ["instaryun"]\n  type = "system"\n\n  group "fabio" {\n\n    network {\n      port "http" {\n        static = 9998\n      }\n      port "lb" {\n        static = 9999\n      }\n    }\n\n        task "fabio" {\n            driver = "docker"\n\n            config {\n                image = "fabiolb/fabio:latest"\n        network_mode = "host"\n                ports = ["http", "lb"]\n            }\n\n      resources {\n        cpu    = 200\n        memory = 128\n          }\n    }\n  }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'nomad plan fabio.nomad\n+ Job: "fabio"\n+ Task Group: "fabio" (1 create)\n  + Task: "fabio" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 fabio.nomad\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nomad job run -check-index 0 fabio.nomad\n")),(0,o.kt)("p",null,"Now check the Fabio log to see if there are any error messages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nomad status fabio\n\nAllocations\nID        Node ID   Task Group  Version  Desired  Status   Created  Modified\n029b5c1c  005f708b  fabio       0        run      running  35s ago  31s ago\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nomad alloc logs -stderr 029b5c1c\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'2022/06/25 09:57:44 [INFO] consul: Connecting to "localhost:8500" in datacenter "consul"\n2022/06/25 09:57:44 [INFO] Admin server access mode "rw"\n2022/06/25 09:57:44 [INFO] Admin server listening on ":9998"\n2022/06/25 09:57:44 [INFO] Waiting for first routing table\n2022/06/25 09:57:44 [INFO] consul: Using dynamic routes\n2022/06/25 09:57:44 [INFO] consul: Using tag prefix "urlprefix-"\n2022/06/25 09:57:44 [INFO] consul: Watching KV path "/fabio/config"\n2022/06/25 09:57:44 [INFO] consul: Watching KV path "/fabio/noroute.html"\n2022/06/25 09:57:44 [INFO] Config updates\n+ route add frontend /login http://my.minion.com:29222/ tags "frontend"\n+ route add frontend /login http://my.minion.com:22568/ tags "frontend"\n2022/06/25 09:57:44 [INFO] consul: Registered fabio as "fabio"\n2022/06/25 09:57:44 [INFO] consul: Registered fabio with id "fabio-mydatacenter-9998"\n2022/06/25 09:57:44 [INFO] consul: Registered fabio with address "my.minion.com"\n')),(0,o.kt)("p",null,"The service is running and it successfully picked up the routes from our frontend containers. We can also check the Fabio UI on Port ",(0,o.kt)("inlineCode",{parentName:"p"},"9998")," on our Minion IP:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Fabio Load Balancer",src:t(27002).Z,width:"921",height:"435"})),(0,o.kt)("h3",{id:"start-load-balancing"},"Start Load Balancing"),(0,o.kt)("p",null,"The frontend (",(0,o.kt)("inlineCode",{parentName:"p"},"http"),") above is available on port ",(0,o.kt)("inlineCode",{parentName:"p"},"9998")," (as defined inside the Nomad job file). The load balancing happens on the port we defined as ",(0,o.kt)("inlineCode",{parentName:"p"},"lb")," -> default ",(0,o.kt)("inlineCode",{parentName:"p"},"9999"),". So I should now be round-robbin'ed between my two frontend container when opening ",(0,o.kt)("inlineCode",{parentName:"p"},"my.minion.com:9999/website"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Problem 1"),": I did get an error ",(0,o.kt)("inlineCode",{parentName:"p"},"504")," inside my browser when I tried to access the URL - the load balancer did not get a reply from the frontend container. Fabio's error log said ",(0,o.kt)("inlineCode",{parentName:"p"},"No route for my.minion.com:9999"),". I had to restart Fabio for it to actually start catching the traffic.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Problem 2"),": After the restart the route was actually leading somewhere. But this particular container does not like the URL prefix ",(0,o.kt)("inlineCode",{parentName:"p"},"/website")," I added. I started seeing requests to the root URL that obviously failed ",(0,o.kt)("inlineCode",{parentName:"p"},"GET http://my.minion.com:9999/app.js [HTTP/1.1 404 Not Found 268ms]"),". So I needed to remove it.")),(0,o.kt)("p",null,"Changing the URL prefix inside ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend.nomad"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'+/- Tags {\n      + Tags: "urlprefix-/"\n        Tags: "frontend"\n      - Tags: "urlprefix-/website"\n    }\n')),(0,o.kt)("p",null,"And redeploying the application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nomad plan frontend.nomad\nnomad job run -check-index 27785 frontend.nomad\n")),(0,o.kt)("p",null,"Now I can cycle the Fabio deployment off/on:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Fabio Load Balancer",src:t(83832).Z,width:"1246",height:"292"})),(0,o.kt)("p",null,"Checking the Fabio UI I can now see that the load balancer is now using the root ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," for both containers. And I am redirected to the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," service on ",(0,o.kt)("inlineCode",{parentName:"p"},"my.minion.com:9999/"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Fabio Load Balancer",src:t(32838).Z,width:"1247",height:"320"})),(0,o.kt)("h2",{id:"canary-deployment"},"Canary Deployment"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," block inside the Nomad job configuration allows us to run a new version of our app next to the older one. Enabling us to slowly switch our cluster to a new version and keeping an eye open for potential issues in the progress:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"max_parallel"),": Only one instance should be updated at a time."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"min_healthy_time"),": Minimum time that the allocation needs to remain healthy to be successful."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"healthy_deadline"),": Maximum time to wait before failing the allocation."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"auto_revert"),": Revert back to the old version if allocation failed ",(0,o.kt)("em",{parentName:"li"},"true"),":",(0,o.kt)("em",{parentName:"li"},"false")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"auto_promote"),": A successful allocation should promote the next one ",(0,o.kt)("em",{parentName:"li"},"true"),":",(0,o.kt)("em",{parentName:"li"},"false")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"canary"),": Number of updated allocations after update is successful.")),(0,o.kt)("p",null,"I can now update the Nomad job file to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," configuration to deploy version 2 of the ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," container ",(0,o.kt)("inlineCode",{parentName:"p"},"thedojoseries/frontend:2.0"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'job "frontend" {\n    datacenters = ["instaryun"]\n  type = "service"\n\n    group "frontend" {\n    count = 2\n\n    scaling {\n      enabled = true\n      min     = 2\n      max     = 3\n    }\n\n    update {\n      max_parallel = 1\n      min_healthy_time = "5s"\n      healthy_deadline = "30s"\n      auto_revert = false\n      auto_promote = false\n      canary = 1\n    }\n        \n        network {\n            mode = "host"\n            port "http" {\n                to = "8080"\n            }\n        }\n\n    service {\n      name = "frontend"\n      tags = [\n        "frontend",\n        "urlprefix-/"\n      ]\n      port = "http"\n\n      check {\n        name     = "Frontend HTTP Healthcheck"\n        path     = "/"\n        type     = "http"\n        protocol = "http"\n        interval = "10s"\n        timeout  = "2s"\n      }\n    }\n\n        task "frontend" {\n            driver = "docker"\n\n            config {\n                image = "thedojoseries/frontend:2.0"\n                ports = ["http"]\n            }\n        }\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'nomad plan frontend.nomad                                                                               \n+/- Job: "frontend"\n+/- Task Group: "frontend" (1 canary, 2 ignore)\n  +/- Update {\n        AutoPromote:      "false"\n        AutoRevert:       "false"\n    +/- Canary:           "0" => "1"\n        HealthCheck:      "checks"\n    +/- HealthyDeadline:  "300000000000" => "30000000000"\n        MaxParallel:      "1"\n    +/- MinHealthyTime:   "10000000000" => "5000000000"\n        ProgressDeadline: "600000000000"\n      }\n  +/- Task: "app" (forces create/destroy update)\n    +/- Config {\n      +/- image:    "thedojoseries/frontend:latest" => "thedojoseries/frontend:2.0"\n          ports[0]: "http"\n        }\n\nScheduler dry-run:\n- All tasks successfully allocated.\n')),(0,o.kt)("p",null,"Re-running the job now stops after deploying one canary allocation using the new frontend:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nomad job run -check-index 27823 frontend.nomad\n\n\nDeployed\n    Task Group  Promoted  Desired  Canaries  Placed  Healthy  Unhealthy  Progress Deadline\n    frontend    false     2        1         1       0        1          2022-06-25T14:40:54+02:00\n")),(0,o.kt)("p",null,"I can see that the old version is still parallel to the canary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'fd1180eead0e        thedojoseries/frontend:2.0      "docker-entrypoint.s\u2026"   3 minutes ago \nd1446f86e3f8        thedojoseries/frontend:latest   "sh -c \'npm start\'"      3 hours ago\nc2eee382ffe5        thedojoseries/frontend:latest   "sh -c \'npm start\'"      3 hours ago \n')),(0,o.kt)("p",null,'And the Nomad UI tells me that it is waiting for me to confirm that everything worked - but the failed deployment in this list - under "unhealthy" prevents me from doing so. I am not sure why this allocation failed - I assume that I waited to long so that broke the ',(0,o.kt)("inlineCode",{parentName:"p"},"30s")," time limit that I set above?"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hashicorp Nomad Canary Deployment",src:t(32833).Z,width:"984",height:"263"})),(0,o.kt)("p",null,"So I made a small change to the job file and re-run it. Fabio picks up the third container:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hashicorp Nomad Canary Deployment",src:t(71401).Z,width:"914",height:"485"})),(0,o.kt)("p",null,"To verify the load balancing is working, refresh the frontend URL until you end up on the canary instance:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hashicorp Nomad Canary Deployment",src:t(97022).Z,width:"1255",height:"319"})),(0,o.kt)("p",null,"And it seems that this time I was quick enough and can promote the deployment:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Hashicorp Nomad Canary Deployment",src:t(25059).Z,width:"986",height:"261"})),(0,o.kt)("p",null,"This can also be done by running the following command on your Nomad master:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nomad job promote frontend\n")),(0,o.kt)("p",null,"Now all allocations will be updated:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'0a36c884066d        thedojoseries/frontend:2.0    "docker-entrypoint.s\u2026"\nd655d75c75a8        thedojoseries/frontend:2.0    "docker-entrypoint.s\u2026"\n')))}p.isMDXComponent=!0},50578:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_01-0f08b7ced521e09b00ae64e625afe4de.png"},87765:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_02-235807ad3a2e4e574bb18f4980b85e95.png"},27002:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_03-0beaf248c8ad0c7fe3fca3400698a59f.png"},83832:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_04-1cf72322d29da889b1f92ed1719d2f50.png"},32838:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_05-6dcb650bcaf63c994e6502a9e540ce4a.png"},32833:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_06-e7add25530df6143b02035b8eafa1a70.png"},71401:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_07-11ab39ba5017b368905c51ecf386484b.png"},97022:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_08-0e74bb612f288e03261455e4af897212.png"},25059:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/Hashicorp_Consul_09-32746b2b63d739c46bb0c29511915b6b.png"},26662:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);