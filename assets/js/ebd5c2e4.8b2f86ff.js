"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[20688],{3905:(t,n,e)=>{e.d(n,{Zo:()=>p,kt:()=>d});var o=e(67294);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function a(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,o)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?a(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function l(t,n){if(null==t)return{};var e,o,r=function(t,n){if(null==t)return{};var e,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)e=a[o],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(o=0;o<a.length;o++)e=a[o],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var c=o.createContext({}),s=function(t){var n=o.useContext(c),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},p=function(t){var n=s(t.components);return o.createElement(c.Provider,{value:n},t.children)},m={inlineCode:"code",wrapper:function(t){var n=t.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(t,n){var e=t.components,r=t.mdxType,a=t.originalType,c=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),u=s(e),d=r,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return e?o.createElement(g,i(i({ref:n},p),{},{components:e})):o.createElement(g,i({ref:n},p))}));function d(t,n){var e=arguments,r=n&&n.mdxType;if("string"==typeof t||r){var a=e.length,i=new Array(a);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=t,l.mdxType="string"==typeof t?t:r,i[1]=l;for(var s=2;s<a;s++)i[s]=e[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,e)}u.displayName="MDXCreateElement"},59240:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=e(87462),r=(e(67294),e(3905));const a={sidebar_position:9010,slug:"2021-09-12",title:"Go Paho MQTT Client",authors:"mpolinowski",tags:["Go","MQTT"]},i=void 0,l={unversionedId:"IoT-and-Machine-Learning/MQTT/2021-09-12--golang-paho-mqtt/index",id:"IoT-and-Machine-Learning/MQTT/2021-09-12--golang-paho-mqtt/index",title:"Go Paho MQTT Client",description:"Victoria Harbour, Hongkong",source:"@site/docs/IoT-and-Machine-Learning/MQTT/2021-09-12--golang-paho-mqtt/index.md",sourceDirName:"IoT-and-Machine-Learning/MQTT/2021-09-12--golang-paho-mqtt",slug:"/IoT-and-Machine-Learning/MQTT/2021-09-12--golang-paho-mqtt/2021-09-12",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2021-09-12--golang-paho-mqtt/2021-09-12",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/MQTT/2021-09-12--golang-paho-mqtt/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"},{label:"MQTT",permalink:"/docs/tags/mqtt"}],version:"current",sidebarPosition:9010,frontMatter:{sidebar_position:9010,slug:"2021-09-12",title:"Go Paho MQTT Client",authors:"mpolinowski",tags:["Go","MQTT"]},sidebar:"tutorialSidebar",previous:{title:"Mosquitto v2 MQTT Broker on Debian Bullseye",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2022-02-01--mosquitto-2-broker/2022-02-01"},next:{title:"MQTT Networks with Home Assistant",permalink:"/docs/IoT-and-Machine-Learning/MQTT/2019-08-11--mqtt-home-assistant/2019-08-11"}},c={},s=[{value:"Project initialization",id:"project-initialization",level:2},{value:"Connect to the MQTT broker",id:"connect-to-the-mqtt-broker",level:2},{value:"Topic Subscription",id:"topic-subscription",level:2},{value:"Topic Update",id:"topic-update",level:2},{value:"Testing",id:"testing",level:2},{value:"Running the Program",id:"running-the-program",level:3}],p={toc:s};function m(t){let{components:n,...a}=t;return(0,r.kt)("wrapper",(0,o.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Victoria Harbour, Hongkong",src:e(52500).Z,width:"1500",height:"368"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#project-initialization"},"Project initialization")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#connect-to-the-mqtt-broker"},"Connect to the MQTT broker")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#topic-subscription"},"Topic Subscription")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#topic-update"},"Topic Update")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#testing"},"Testing"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#running-the-program"},"Running the Program"))))),(0,r.kt)("p",null,"I want to create a Go MQTT client that can connect to the ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.instar.com/enhttps://wiki.instar.com/en/Advanced_User/INSTAR_MQTT_Broker/"},"INSTAR MQTT Broker")," on an IN-8015 FHD camera on local IP ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.2.77"),". I want to be able to add topic subscriptions as well as publishing MQTT updates to the broker."),(0,r.kt)("h2",{id:"project-initialization"},"Project initialization"),(0,r.kt)("p",null,"This project uses paho.mqtt.golang as MQTT client library, install:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go mod init go/paho-mqtt\ngo get github.com/eclipse/paho.mqtt.golang\n")),(0,r.kt)("h2",{id:"connect-to-the-mqtt-broker"},"Connect to the MQTT broker"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"./src/client/main.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    mqtt "github.com/eclipse/paho.mqtt.golang"\n)\n\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\n    fmt.Printf("Topic: %s | %s\\n", msg.Topic(), msg.Payload())\n}\n\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\n    fmt.Println("Connected")\n}\n\nvar connectLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\n    fmt.Printf("Connect lost: %+v", err)\n}\n\nfunc main() {\n    var broker = "192.168.2.70"\n    var port = 1883\n    opts := mqtt.NewClientOptions()\n    opts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\n    opts.SetClientID("go_mqtt_client")\n    opts.SetUsername("admin")\n    opts.SetPassword("instar")\n    opts.SetDefaultPublishHandler(messagePubHandler)\n    opts.OnConnect = connectHandler\n    opts.OnConnectionLost = connectLostHandler\n    client := mqtt.NewClient(opts)\n    if token := client.Connect(); token.Wait() && token.Error() != nil {\n        panic(token.Error())\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"messagePubHandler"),": global MQTT pub message processing"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"connectHandler"),": callback for the connection"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"connectLostHandler"),": callback for connection loss"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ClientOptions"),": used to set broker, port, client id, username, password and other options.")),(0,r.kt)("h2",{id:"topic-subscription"},"Topic Subscription"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func sub(client mqtt.Client) {\n    // Subscribe to the LWT connection status\n    topic := "cameras/77/status/connection"\n    token := client.Subscribe(topic, 1, nil)\n    token.Wait()\n    fmt.Printf("Subscribed to LWT %s", topic)\n}\n')),(0,r.kt)("h2",{id:"topic-update"},"Topic Update"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func publish(client mqtt.Client) {\n    // Go to PTZ preset 2 and return to 1 after 15s\n    nums := []int{2, 1}\n    for _, num := range nums {\n        value := fmt.Sprintf("%d", num)\n        token := client.Publish("cameras/77/features/ptz/preset/raw", 0, false, value)\n        token.Wait()\n        time.Sleep(15 * time.Second)\n    }\n}\n')),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Now bringing it all together:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "time"\n\n    mqtt "github.com/eclipse/paho.mqtt.golang"\n)\n\nvar messagePubHandler mqtt.MessageHandler = func(client mqtt.Client, msg mqtt.Message) {\n    fmt.Printf("Topic: %s | %s\\n", msg.Topic(), msg.Payload())\n}\n\nvar connectHandler mqtt.OnConnectHandler = func(client mqtt.Client) {\n    fmt.Println("Connected")\n}\n\nvar connectLostHandler mqtt.ConnectionLostHandler = func(client mqtt.Client, err error) {\n    fmt.Printf("Connect lost: %+v", err)\n}\n\nfunc main() {\n    var broker = "192.168.2.77"\n    var port = 1883\n    opts := mqtt.NewClientOptions()\n    opts.AddBroker(fmt.Sprintf("tcp://%s:%d", broker, port))\n    opts.SetClientID("go_mqtt_client")\n    opts.SetUsername("admin")\n    opts.SetPassword("instar")\n    opts.SetDefaultPublishHandler(messagePubHandler)\n    opts.OnConnect = connectHandler\n    opts.OnConnectionLost = connectLostHandler\n    client := mqtt.NewClient(opts)\n    if token := client.Connect(); token.Wait() && token.Error() != nil {\n        panic(token.Error())\n  }\n\n    sub(client)\n    publish(client)\n\n    client.Disconnect(250)\n}\n\nfunc publish(client mqtt.Client) {\n    // Go to PTZ preset 2 and return to 1 after 15s\n    nums := []int{2, 1}\n    for _, num := range nums {\n        value := fmt.Sprintf("%d", num)\n        token := client.Publish("cameras/77/features/ptz/preset/raw", 0, false, value)\n        token.Wait()\n        time.Sleep(15 * time.Second)\n    }\n}\n\nfunc sub(client mqtt.Client) {\n    // Subscribe to the LWT connection status\n    topic := "cameras/77/status/connection"\n    token := client.Subscribe(topic, 1, nil)\n    token.Wait()\n    fmt.Println("Subscribed to LWT", topic)\n}\n')),(0,r.kt)("h3",{id:"running-the-program"},"Running the Program"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'go run .\\main.go\nConnected\nSubscribed to LWT cameras/77/status/connection        \nTopic: cameras/77/status/connection | {"val":"online"}\n')),(0,r.kt)("p",null,"The program will pan your camera to preset position 2, return it to preset 1 and then stop running."))}m.isMDXComponent=!0},52500:(t,n,e)=>{e.d(n,{Z:()=>o});const o=e.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-d59d1fe8aa35f1cb9f663bce683552c2.jpg"}}]);