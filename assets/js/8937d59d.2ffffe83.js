"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[28201],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:4060,slug:"2022-10-21",title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",authors:"mpolinowski",tags:["Nomad","Consul","LINUX","osTicket"],description:"Porting a OSTicket/MariaDB helpdesk service from Docker-Compose to Nomad"},i=void 0,s={unversionedId:"DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/index",id:"DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/index",title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",description:"Porting a OSTicket/MariaDB helpdesk service from Docker-Compose to Nomad",source:"@site/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/index.md",sourceDirName:"DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i",slug:"/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/2022-10-21",permalink:"/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/2022-10-21",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-10-21-hashicorp-nomad-for-osticket-part-i/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"},{label:"osTicket",permalink:"/docs/tags/os-ticket"}],version:"current",sidebarPosition:4060,frontMatter:{sidebar_position:4060,slug:"2022-10-21",title:"Hashicorp Nomad to set up an OSTicket Helpdesk - Part I",authors:"mpolinowski",tags:["Nomad","Consul","LINUX","osTicket"],description:"Porting a OSTicket/MariaDB helpdesk service from Docker-Compose to Nomad"},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad Sidecar Pattern",permalink:"/docs/DevOps/Hashicorp/2022-10-22-hashicorp-nomad-sidecar-pattern/2022-10-22"},next:{title:"NGINX Ingress with Nomad",permalink:"/docs/DevOps/Hashicorp/2022-09-24--nomad-nginx-ingress/2022-09-24"}},l={},c=[{value:"Data Persistence",id:"data-persistence",level:2},{value:"Client Configuration",id:"client-configuration",level:3},{value:"Job Specification",id:"job-specification",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Run the Job File",id:"run-the-job-file",level:2},{value:"Complete Job File (Part I)",id:"complete-job-file-part-i",level:2}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Shen Zhen, China",src:n(82239).Z,width:"2230",height:"839"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#data-persistence"},"Data Persistence"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#client-configuration"},"Client Configuration")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#job-specification"},"Job Specification")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#environment-variables"},"Environment Variables")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#run-the-job-file"},"Run the Job File")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#complete-job-file-part-i"},"Complete Job File (Part I)"))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/osticket-nomad"},"Github Repository")),(0,o.kt)("p",null,"I now have a ",(0,o.kt)("a",{parentName:"p",href:"/docs/DevOps/Provisioning/2022-10-16--os-ticket-docker/2022-10-16#docker-compose"},"Docker-Compose File")," that allows me to provision an instance of the OSTicket Helpdesk with a MariaDB backend. Now I need to get this into my Nomad/Consul cluster."),(0,o.kt)("h2",{id:"data-persistence"},"Data Persistence"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," adds a volumen mount to the MariaDB container to make sure that the generated database is not destroyed when the container is shut down."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"volumes:\n  - /opt/osticket/db:/var/lib/mysql\n")),(0,o.kt)("p",null,"In Nomad we will have to define this volume mount in the Nomad client configuration."),(0,o.kt)("h3",{id:"client-configuration"},"Client Configuration"),(0,o.kt)("p",null,"First we need to create a volume that allows us to persist the data that MariaDB is going to generate. Add the following configs in your ",(0,o.kt)("inlineCode",{parentName:"p"},"client.hcl")," file [",(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/drivers/docker#client-requirements"},"Plugin Stanza")," | ",(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/configuration/client#host_volume-stanza"},"Host Volume Stanza"),"]:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"nano /etc/nomad.d/client.hcl")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'\nclient {\n  enabled = true\n  servers = ["myhost:port"]\n  host_volume "letsencrypt" {\n    path = "/etc/letsencrypt"\n    read_only = false\n  }\n  host_volume "osticket_db" {\n    path = "/opt/osticket/db"\n    read_only = false\n  }\n}\n\n# Docker Configuration\nplugin "docker" {\n\n  volumes {\n    enabled      = true\n    selinuxlabel = "z"\n  }\n\n  allow_privileged = false\n  allow_caps       = ["chown", "net_raw"]\n\n}\n')),(0,o.kt)("p",null,"This client already uses a volume to allow containers access to the Let's Encrypt generated TLS certificates. I can add the database volume below. And make sure that the directory you define here as a volume does exist ",(0,o.kt)("inlineCode",{parentName:"p"},"mkdir -p /opt/osticket/db"),"."),(0,o.kt)("p",null,"Restart the service ",(0,o.kt)("inlineCode",{parentName:"p"},"service nomad restart")," and verify that the volume was picked up:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Nomad for Elasticsearch",src:n(40261).Z,width:"1169",height:"383"})),(0,o.kt)("h3",{id:"job-specification"},"Job Specification"),(0,o.kt)("p",null,"And then in the job specifications, inside the ",(0,o.kt)("strong",{parentName:"p"},"Group Stanza")," define the ",(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/job-specification/volume#volume-interpolation"},"volume"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'volume "osticket_db" {\n    type      = "host"\n    read_only = false\n    source    = "osticket_db"\n}\n')),(0,o.kt)("p",null,"and then finally add following in the ",(0,o.kt)("strong",{parentName:"p"},"Task Stanza")," use the defined volume:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'volume_mount {\n    volume      = "osticket_db"\n    destination = "/var/lib/mysql" #<-- in the container\n    read_only   = false\n}\n')),(0,o.kt)("p",null,"The OSTicket frontend does not need any persistence or volume mounts in general since I already ",(0,o.kt)("a",{parentName:"p",href:"/docs/DevOps/Provisioning/2022-10-16--os-ticket-docker/2022-10-16"},"added all customized files to the docker file")," itself."),(0,o.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,o.kt)("p",null,"The only thing missing now are the environment variables that allow our two containers - frontend and database - to connect. These have to be placed inside the corresponding ",(0,o.kt)("strong",{parentName:"p"},"Task Stanza"),":"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"MariaDB")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'env {\n    MYSQL_ROOT_PASSWORD = "secret"\n    MYSQL_USER = "osticket"\n    MYSQL_PASSWORD = "secret"\n    MYSQL_DATABASE = "osticket"\n    CONTAINER_NAME = "osticket-db"\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"OSTicket")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'env {\n    CONTAINER_NAME = "osticket"\n    MYSQL_USER = "osticket"\n    MYSQL_HOST = "osticket-db"\n    MYSQL_PASSWORD = "secret"\n    MYSQL_DATABASE = "osticket"\n}\n')),(0,o.kt)("h2",{id:"run-the-job-file"},"Run the Job File"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'nomad plan osticket.tf\n\n+ Job: "osticket"\n+ Task Group: "docker" (1 create)\n  + Task: "osticket-container" (forces create)\n  + Task: "osticket-db-container" (forces create)\n\nScheduler dry-run:\n- All tasks successfully allocated.\n\nJob Modify Index: 0\nTo submit the job with version verification run:\n\nnomad job run -check-index 0 osticket.tf\n')),(0,o.kt)("p",null,"Running the job looks good - the ERROR logs remain empty:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Nomad for Elasticsearch",src:n(11095).Z,width:"1188",height:"631"})),(0,o.kt)("p",null,"After a little tweaking I now have the following ",(0,o.kt)("a",{parentName:"p",href:"#complete-job-file-part-i"},"Nomad job file")," that brings up both services:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Nomad for Elasticsearch",src:n(37925).Z,width:"922",height:"520"})),(0,o.kt)("p",null,"But when I bring the services up I am getting the error message that OSTicket cannot find my database. So eventually the deployment fails because the frontend never reaches a healthy state. So this is what I have to look into next:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Nomad for Elasticsearch",src:n(42495).Z,width:"928",height:"406"})),(0,o.kt)("h2",{id:"complete-job-file-part-i"},"Complete Job File (Part I)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'job "osticket" {\n  datacenters = ["mydatacenter"]\n    type = "service"\n\n    group "osticket-db" {\n        count = 1\n        \n        network {\n            mode = "host"\n            port "tcp" {\n                static = 3306\n                to = 3306\n            }\n        }\n\n        update {\n            max_parallel = 1\n            min_healthy_time  = "10s"\n            healthy_deadline  = "5m"\n            progress_deadline = "10m"\n            auto_revert = true\n            auto_promote = true\n            canary = 1\n        }\n\n        volume "osticket_db" {\n            type      = "host"\n            read_only = false\n            source    = "osticket_db"\n        }\n\n        restart {\n            attempts = 10\n            interval = "5m"\n            delay    = "25s"\n            mode     = "delay"\n        }\n\n        task "osticket-db-container" {\n            driver = "docker"\n\n            config {\n                image = "mariadb:latest"\n                ports = ["tcp"]\n                network_mode = "host"\n                force_pull = false\n            }\n\n            volume_mount {\n                volume      = "osticket_db"\n                destination = "/var/lib/mysql" #<-- in the container\n                read_only   = false\n            }\n\n            env {\n                MYSQL_ROOT_PASSWORD = "secret"\n                MYSQL_USER = "osticket"\n                MYSQL_PASSWORD = "secret"\n                MYSQL_DATABASE = "osticket"\n                # CONTAINER_NAME = "osticket-db"\n            }\n        }\n    }\n\n    group "osticket-frontend" {\n        count = 1\n        \n        network {\n            mode = "host"\n            port "http" {\n                static = 8080\n                to = 80\n            }\n        }\n\n        update {\n            max_parallel = 1\n            min_healthy_time  = "10s"\n            healthy_deadline  = "5m"\n            progress_deadline = "10m"\n            auto_revert = true\n            auto_promote = true\n            canary = 1\n        }\n\n        service {\n            name = "osticket-frontend"\n            port = "http"\n            tags = [\n                "frontend"\n            ]\n\n            check {\n                name     = "HTTP Health"\n                path     = "/"\n                type     = "http"\n                protocol = "http"\n                interval = "10s"\n                timeout  = "2s"\n            }\n        }\n\n        task "osticket-container" {\n            driver = "docker"\n\n            config {\n                image = "my.gitlab.com:12345/server/osticket-docker:latest"\n                ports = ["http"]\n                network_mode = "host"\n                force_pull = false\n\n                auth {\n                    username = "myuser"\n                    password = "secret"\n                }\n            }\n\n            env {\n                CONTAINER_NAME = "osticket"\n                MYSQL_USER = "osticket"\n                MYSQL_HOST = "osticket-db"\n                MYSQL_PASSWORD = "secret"\n                MYSQL_DATABASE = "osticket"\n            }\n        }\n    }\n}\n')))}d.isMDXComponent=!0},40261:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Hashicorp-Nomad-for-OSTicket_01-54ef1c6a1dc10b824b903fbde42504c5.png"},11095:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Hashicorp-Nomad-for-OSTicket_02-b1668115e39e2243dcfe1080e1106a7a.png"},37925:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Hashicorp-Nomad-for-OSTicket_03-a13d427e3a1e66be60101fe006110a21.png"},42495:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Hashicorp-Nomad-for-OSTicket_04-1d2f46d6793ea983467e1ad1d204e140.png"},82239:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);