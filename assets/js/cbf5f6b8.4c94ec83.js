"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[33927],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},72082:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:8050,slug:"2022-12-08",title:"NGINX Websocket Proxy",authors:"mpolinowski",tags:["NGINX","Linux"],description:"Using the NGINX as a Proxy for Websocket APIs"},s=void 0,i={unversionedId:"DevOps/NGINX/2022-12-08-nginx-websocket-proxy/index",id:"DevOps/NGINX/2022-12-08-nginx-websocket-proxy/index",title:"NGINX Websocket Proxy",description:"Using the NGINX as a Proxy for Websocket APIs",source:"@site/docs/DevOps/NGINX/2022-12-08-nginx-websocket-proxy/index.md",sourceDirName:"DevOps/NGINX/2022-12-08-nginx-websocket-proxy",slug:"/DevOps/NGINX/2022-12-08-nginx-websocket-proxy/2022-12-08",permalink:"/docs/DevOps/NGINX/2022-12-08-nginx-websocket-proxy/2022-12-08",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/NGINX/2022-12-08-nginx-websocket-proxy/index.md",tags:[{label:"NGINX",permalink:"/docs/tags/nginx"},{label:"Linux",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:8050,frontMatter:{sidebar_position:8050,slug:"2022-12-08",title:"NGINX Websocket Proxy",authors:"mpolinowski",tags:["NGINX","Linux"],description:"Using the NGINX as a Proxy for Websocket APIs"},sidebar:"tutorialSidebar",previous:{title:"NGINX",permalink:"/docs/category/nginx"},next:{title:"NGINX TCP/UDP Load Balancing",permalink:"/docs/DevOps/NGINX/2022-11-17-nginx-udp-tcp-load-balancing/2022-11-17"}},c={},l=[{value:"Basic Setup",id:"basic-setup",level:2},{value:"Minimal WS Server (Node.js)",id:"minimal-ws-server-nodejs",level:3},{value:"NGINX WS Proxy",id:"nginx-ws-proxy",level:3},{value:"Testing the Service",id:"testing-the-service",level:2},{value:"Secure Websocket Proxy",id:"secure-websocket-proxy",level:2},{value:"Secure Websocket Proxy with Path Re-Writing",id:"secure-websocket-proxy-with-path-re-writing",level:2},{value:"Secure Websocket Proxy with Load-Balancing",id:"secure-websocket-proxy-with-load-balancing",level:2}],p={toc:l};function d(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Shen Zhen, China",src:n(80896).Z,width:"1500",height:"598"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#basic-setup"},"Basic Setup"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#minimal-ws-server-nodejs"},"Minimal WS Server (Node.js)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#nginx-ws-proxy"},"NGINX WS Proxy")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#testing-the-service"},"Testing the Service")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#secure-websocket-proxy"},"Secure Websocket Proxy")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#secure-websocket-proxy-with-path-re-writing"},"Secure Websocket Proxy with Path Re-Writing")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#secure-websocket-proxy-with-load-balancing"},"Secure Websocket Proxy with Load-Balancing"))),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See also:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.nginx.com/blog/websocket-nginx/"},"NGINX as a WebSocket Proxy")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/nicokaiser/nginx-websocket-proxy"},"nginx WebSocket Proxy")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/mpolinowski/nginx_docker_ingress"},"NGINX Docker Ingress")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/mpolinowski/ws-api-proxy"},"Github Repository"))),(0,a.kt)("h2",{id:"basic-setup"},"Basic Setup"),(0,a.kt)("p",null,"This example uses ",(0,a.kt)("inlineCode",{parentName:"p"},"ws"),", a WebSocket implementation built on Node.js. NGINX acts as a reverse proxy for this simple WebSocket application."),(0,a.kt)("h3",{id:"minimal-ws-server-nodejs"},"Minimal WS Server (Node.js)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm init\nnpm install ws\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"server1.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// import the ws library\nvar WebSocketServer = require('ws').Server;\n\n// start websocket service on port 8010\nwss = new WebSocketServer({port: 8010});\n\n// tell me when you are ready\nconsole.log(\"Server started\");\n\n// handle connection, send msg to console and\n// confirm reception to client\nwss.on('connection', function(ws) {\n        ws.on('message', function(message) {\n        console.log('Received from client: %s', message);\n        ws.send('Server received from client: ' + message);\n    });\n});\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node server1.js\nServer started\n")),(0,a.kt)("h3",{id:"nginx-ws-proxy"},"NGINX WS Proxy"),(0,a.kt)("p",null,"To have NGINX proxy these requests, create the following configuration using a map block so that the ",(0,a.kt)("strong",{parentName:"p"},"Connection header")," is correctly set to close when the ",(0,a.kt)("strong",{parentName:"p"},"Upgrade header")," in the request is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"''"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"http {\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        '' close;\n    }\n \n    upstream websocket {\n        server 127.0.0.1:8010;\n    }\n \n    server {\n        listen 8020;\n        location / {\n            proxy_pass http://websocket;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n            proxy_set_header Host $host;\n        }\n    }\n}\n")),(0,a.kt)("p",null,"Start the container with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm --network host -v /path/to/docker_ws_proxy:/etc/nginx --name proxy nginx:alpine\n")),(0,a.kt)("h2",{id:"testing-the-service"},"Testing the Service"),(0,a.kt)("p",null,"To test the service we can use ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/wscat"},"wscat"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g wscat\n")),(0,a.kt)("p",null,"Run the WS client to listen on port ",(0,a.kt)("inlineCode",{parentName:"p"},"8020")," - the NGINX proxy port - and send a text message:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wscat --connect ws://127.0.0.1:8020\nConnected (press CTRL+C to quit)\n> Echo\n< Server received from client: Echo\n")),(0,a.kt)("p",null,"Check your console running the WS server and you should see your message there as well:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node server1.js\nServer started\nReceived from client: Echo\n")),(0,a.kt)("h2",{id:"secure-websocket-proxy"},"Secure Websocket Proxy"),(0,a.kt)("p",null,"Now we have a websocket server and a proxy that can be used as an ingress to forward traffic to our ws server. The next step is to use the proxy to terminate incoming encrypted traffic and direct the unencrypted backend service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'# WebSocketSecure SSL Endpoint\n\nupstream websocket {\n    server 127.0.0.1:8010;\n}\n\nserver {\n    listen 8020 ssl;\n\n    # host name to respond to\n    server_name 127.0.0.1;\n\n    # your SSL configuration\n    # ssl_certificate /etc/letsencrypt/live/my.domain.com/fullchain.pem;\n    # ssl_certificate_key /etc/letsencrypt/live/my.domain.com/privkey.pem;\n    ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt; # Replace with the 2 lines above when using CA Cert\n    ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;\n\n    location / {\n        # switch off logging\n        access_log off;\n\n        # redirect all HTTP traffic to 127.0.0.1:8010\n        proxy_pass http://websocket;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # WebSocket support (nginx 1.4)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n    }\n}\n')),(0,a.kt)("p",null,"Here I am including a self-signed TLS certificate and key that still needs to be created:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd docker_ws_proxy/certs\nopenssl req -new -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out nginx-selfsigned.crt -keyout nginx-selfsigned.key\n")),(0,a.kt)("p",null,"Here you should set the ",(0,a.kt)("strong",{parentName:"p"},"Common Name")," to your server address or domain. I will use ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost")," for this test-run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Country Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:127.0.0.1\nEmail Address []:\n")),(0,a.kt)("p",null,"When trying to connect with a self-signed certificate using ",(0,a.kt)("strong",{parentName:"p"},"wscat")," you run into ",(0,a.kt)("inlineCode",{parentName:"p"},"error: self-signed certificate"),". You can get around it with ",(0,a.kt)("inlineCode",{parentName:"p"},"-n")," (",(0,a.kt)("inlineCode",{parentName:"p"},"--no-check"),") flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wscat --connect wss://127.0.0.1:8020 -n\n")),(0,a.kt)("h2",{id:"secure-websocket-proxy-with-path-re-writing"},"Secure Websocket Proxy with Path Re-Writing"),(0,a.kt)("p",null,"To be able to add our WSS backend into a frontend service we usually have to add routes different from what the backend provides - e.g. the backend provides the service on ",(0,a.kt)("inlineCode",{parentName:"p"},"/")," but our frontend sends API calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/ws"),". NGINX allows us to re-write these calls according to our backend requirements:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'upstream websocket {\n    server 127.0.0.1:8010;\n}\n\nserver {\n    listen 8020 ssl;\n\n    # host name to respond to\n    server_name 127.0.0.1;\n\n    # your SSL configuration\n    # ssl_certificate /etc/letsencrypt/live/my.domain.com/fullchain.pem;\n    # ssl_certificate_key /etc/letsencrypt/live/my.domain.com/privkey.pem;\n    ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt; # Replace with the 2 lines above when using CA Cert\n    ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;\n\n    location /api/ws {\n        # switch off logging\n        access_log off;\n\n        # redirect all HTTP traffic to localhost:8010\n        proxy_pass http://websocket;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # WebSocket support (nginx 1.4)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n\n        # Path rewriting\n        rewrite /api/ws/(.*) /$1 break;\n        proxy_redirect off;\n    }\n}\n')),(0,a.kt)("p",null,"The service can be tested with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wscat --connect wss://127.0.0.1:8020/api/ws -n \n")),(0,a.kt)("h2",{id:"secure-websocket-proxy-with-load-balancing"},"Secure Websocket Proxy with Load-Balancing"),(0,a.kt)("p",null,"When traffic increases we might need to expand our backend and load-balance the incoming request. From the NGINX side we only need to ensure that every incoming request sticks to the backend server it initially negotiated the TLS connection with - this can be done with ",(0,a.kt)("a",{parentName:"p",href:"https://nginx.org/en/docs/http/load_balancing.html"},"Session persistence"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-conf"},'# WebSocket Proxy with Load Balancing\n\nupstream websocket {\n    # Clients with the same IP are redirected to the same backend\n    ip_hash;\n\n    # Available backend servers\n    server 127.0.0.1:8010;\n    server 127.0.0.1:8030;\n    server 127.0.0.1:8040;\n}\n\n\nserver {\n    listen 8020 ssl;\n\n    # host name to respond to\n    server_name 127.0.0.1;\n\n    # your SSL configuration\n    # ssl_certificate /etc/letsencrypt/live/my.domain.com/fullchain.pem;\n    # ssl_certificate_key /etc/letsencrypt/live/my.domain.com/privkey.pem;\n    ssl_certificate /etc/nginx/certs/nginx-selfsigned.crt; # Replace with the 2 lines above when using CA Cert\n    ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;\n\n    location /api/ws {\n        # switch off logging\n        access_log off;\n\n        # redirect all HTTP traffic to websocket backend\n        proxy_pass http://websocket;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        # WebSocket support (nginx 1.4)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection "upgrade";\n\n        # Path rewriting\n        rewrite /api/ws/(.*) /$1 break;\n        proxy_redirect off;\n    }\n}\n')),(0,a.kt)("p",null,"From the client side we can just make copies of the the initial ",(0,a.kt)("inlineCode",{parentName:"p"},"server1.js")," and replace the port where they are providing their service. Start all of them and re-run the test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"wscat --connect wss://127.0.0.1:8020/api/ws -n\n")))}d.isMDXComponent=!0},80896:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-0829cb95dd693c790a8ca59f3f351274.jpg"}}]);