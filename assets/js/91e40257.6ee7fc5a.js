"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[37077],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(a),k=n,h=d["".concat(l,".").concat(k)]||d[k]||u[k]||o;return a?r.createElement(h,i(i({ref:t},p),{},{components:a})):r.createElement(h,i({ref:t},p))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},72801:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const o={sidebar_position:6030,slug:"2021-10-12",title:"Traefik v2 Webproxy Configuration - 1st Attempt",authors:"mpolinowski",tags:["Traefik","Linux","Docker"]},i=void 0,s={unversionedId:"DevOps/Provisioning/2021-10-12--traefik-configuration/index",id:"DevOps/Provisioning/2021-10-12--traefik-configuration/index",title:"Traefik v2 Webproxy Configuration - 1st Attempt",description:"Central, Hong Kong",source:"@site/docs/DevOps/Provisioning/2021-10-12--traefik-configuration/index.md",sourceDirName:"DevOps/Provisioning/2021-10-12--traefik-configuration",slug:"/DevOps/Provisioning/2021-10-12--traefik-configuration/2021-10-12",permalink:"/docs/DevOps/Provisioning/2021-10-12--traefik-configuration/2021-10-12",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Provisioning/2021-10-12--traefik-configuration/index.md",tags:[{label:"Traefik",permalink:"/docs/tags/traefik"},{label:"Linux",permalink:"/docs/tags/linux"},{label:"Docker",permalink:"/docs/tags/docker"}],version:"current",sidebarPosition:6030,frontMatter:{sidebar_position:6030,slug:"2021-10-12",title:"Traefik v2 Webproxy Configuration - 1st Attempt",authors:"mpolinowski",tags:["Traefik","Linux","Docker"]},sidebar:"tutorialSidebar",previous:{title:"Traefik v2 Webproxy Configuration - 2nd Attempt",permalink:"/docs/DevOps/Provisioning/2021-10-12--traefik-second-attempt/2021-10-12"},next:{title:"PostgreSQL 14 Database Refresher :: Working with JSON & Node.js",permalink:"/docs/DevOps/Provisioning/2021-09-14--postgres-refresher-node-json/2021-09-14"}},l={},c=[{value:"Preparation",id:"preparation",level:2},{value:"Folders and Files",id:"folders-and-files",level:3},{value:"Proxy Network",id:"proxy-network",level:3},{value:"Docker Compose",id:"docker-compose",level:2},{value:"Traefik Load Balancing",id:"traefik-load-balancing",level:3},{value:"Basic Authentication",id:"basic-authentication",level:3},{value:"Logins in Docker-Compose File",id:"logins-in-docker-compose-file",level:4},{value:"External Password File",id:"external-password-file",level:4}],p={toc:c};function u(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Central, Hong Kong",src:a(73768).Z,width:"1500",height:"473"})),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"This guide is incomplete... Traefik, atm unfortunately, does not match my workflow. I am running into a lot of issues with the official documentation as well as the countless tutorials out there. I will put this project on hold until I figured it out.")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#preparation"},"Preparation"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#folders-and-files"},"Folders and Files")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#proxy-network"},"Proxy Network")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#docker-compose"},"Docker Compose"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#traefik-load-balancing"},"Traefik Load Balancing")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#basic-authentication"},"Basic Authentication"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#logins-in-docker-compose-file"},"Logins in Docker-Compose File")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#external-password-file"},"External Password File"))))))),(0,n.kt)("p",null,"So far I have been primarily ",(0,n.kt)("a",{parentName:"p",href:"/?chapter_filter=%22All+Chapters%22&type_filter=%22All+Types%22&q=%22nginx%22&tag_filter=%5B%22NGINX%22%5D"},"working with NGINX"),". But diving into ",(0,n.kt)("a",{parentName:"p",href:"https://traefik.io/blog/announcing-traefik-proxy-2-5/"},"Kubernetes and Hashicorp Consul")," the name ",(0,n.kt)("a",{parentName:"p",href:"/docs/DevOps/Hashicorp/2021-08-06--hashicorp-consul-traefik-loadbalancing/2021-08-06"},"Traefik kept coming up"),". So let's have a look what this is all about."),(0,n.kt)("h2",{id:"preparation"},"Preparation"),(0,n.kt)("h3",{id:"folders-and-files"},"Folders and Files"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /opt/traefik/{certs,shared,rules}\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"touch /opt/traefik/traefik.log\n")),(0,n.kt)("h3",{id:"proxy-network"},"Proxy Network"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker network create --gateway 192.168.144.1 --subnet 192.168.144.0/24 traefik_proxy\n")),(0,n.kt)("h2",{id:"docker-compose"},"Docker Compose"),(0,n.kt)("p",null,"Create a docker-compose.yml file where you will define a reverse-proxy service that uses the official Traefik image:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yml"},"version: '3'\n\nnetworks:\n  traefik_proxy:\n    external:\n      name: traefik_proxy\n  default:\n    driver: bridge\n\nservices:\n  reverse-proxy:\n    container_name: traefik\n    restart: unless-stopped\n    # The official v2 Traefik docker image\n    image: traefik:v2.5\n    # Enables the web UI and tells Traefik to listen to docker\n    command: --api.insecure=true --providers.docker\n    ports:\n      # The HTTP port\n      - '8080:80'\n      # The Web UI (enabled by --api.insecure=true)\n      - '8081:8080'\n    networks:\n      traefik_proxy:\n        ipv4_address: 192.168.144.254\n    command: # CLI arguments\n      - --log=true\n      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC\n      - --accessLog=true\n      - --accessLog.filePath=/traefik.log\n      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines\n      - --accessLog.filters.statusCodes=400-499\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /opt/traefik/traefik.log:/traefik.log\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d reverse-proxy\n")),(0,n.kt)("p",null,"Check the API with jq (",(0,n.kt)("inlineCode",{parentName:"p"},"apt-get install jq"),"):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:8081/api/rawdata | jq\n")),(0,n.kt)("p",null,"Traefik Detects New Services and Creates the Route for you. Add a web service to the docker-compose file and label it so it is picked up by Traefik:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yml"},"whoami:\n  # A container that exposes an API to show its IP address\n  image: traefik/whoami\n  networks:\n    - traefik_proxy\n  labels:\n    - 'traefik.http.routers.whoami.rule=Host(`whoami.localhost`)'\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d whoami\n")),(0,n.kt)("p",null,"The API now shows us that the Whoami Service is up and running;"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://localhost:8081/api/rawdata | jq\n\n"whoami@docker": {\n  "entryPoints": [\n    "http"\n  ],\n  "service": "whoami-traefik",\n  "rule": "Host(`whoami.localhost`)",\n  "status": "enabled",\n  "using": [\n    "http"\n  ]\n}\n')),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -H Host:whoami.localhost http://127.0.0.1:8080\n\nHostname: 49323f79f37b\nIP: 127.0.0.1\nIP: 192.168.144.101\nRemoteAddr: 192.168.144.254:42418\nGET / HTTP/1.1\nHost: whoami.localhost\nUser-Agent: curl/7.74.0\nAccept: */*\nAccept-Encoding: gzip\nX-Forwarded-For: 192.168.144.1\nX-Forwarded-Host: whoami.localhost\nX-Forwarded-Port: 80\nX-Forwarded-Proto: http\nX-Forwarded-Server: 3a33e661f746\nX-Real-Ip: 192.168.144.1\n")),(0,n.kt)("h3",{id:"traefik-load-balancing"},"Traefik Load Balancing"),(0,n.kt)("p",null,"Run more instances of your ",(0,n.kt)("inlineCode",{parentName:"p"},"whoami")," service with the following command:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d --scale whoami=2\n")),(0,n.kt)("p",null,"We can now send two request and will get the replies from both instances in a RR fashion:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -H Host:whoami.localhost http://127.0.0.1:8080\n\nHostname: 51ba8be4f4ec\nIP: 127.0.0.1\nIP: 192.168.144.2\n\n\ncurl -H Host:whoami.localhost http://127.0.0.1:8080\n\nHostname: 749f615cab45\nIP: 127.0.0.1\nIP: 192.168.144.3\n")),(0,n.kt)("h3",{id:"basic-authentication"},"Basic Authentication"),(0,n.kt)("h4",{id:"logins-in-docker-compose-file"},"Logins in Docker-Compose File"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yml"},"services:\n  reverse-proxy:\n    container_name: traefik\n    restart: unless-stopped\n    image: traefik:v2.5\n    ports:\n      - '8080:80'\n      - '8081:8080'\n    networks:\n      traefik_proxy:\n        ipv4_address: 192.168.144.254\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /opt/traefik/traefik.log:/traefik.log\n    command: # CLI arguments\n      - '--api.insecure=true' # Traefik 2 dashboard authentication\n      - '--providers.docker=true'\n      - '--providers.docker.exposedbydefault=false'\n      - '--providers.docker.network=default'\n      - '--entrypoints.web.address=:80'\n      - '--api'\n      - '--log=true'\n      - '--log.level=DEBUG' # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC\n      - '--accessLog=true'\n      - '--accessLog.filePath=/traefik.log'\n      - '--accessLog.bufferingSize=100' # Configuring a buffer of 100 lines\n      - '--accessLog.filters.statusCodes=400-499'\n    labels:\n      - 'traefik.enable=true'\n      - 'traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)'\n      - 'traefik.http.routers.http-catchall.entrypoints=web'\n      # auth middleware with \"test:test\" or \"test2:test2\"\n      - 'traefik.http.middlewares.my-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0'\n\n  whoami:\n    image: traefik/whoami\n    networks:\n      - traefik_proxy\n    labels:\n      - 'traefik.enable=true'\n      - 'traefik.http.routers.whoami.rule=Host(`whoami.localhost`)'\n      - 'traefik.http.routers.whoami.entrypoints=web'\n      # connect your auth middleware to a service which you want to protect\n      - 'traefik.http.routers.whoami.middlewares=my-auth'\n")),(0,n.kt)("p",null,"Test your configuration - accessing your service now requires a login:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -H Host:whoami.localhost http://127.0.0.1:8080\n401 Unauthorized\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -u test -H Host:whoami.localhost http://127.0.0.1:8080\n\nEnter host password for user 'test':\nHostname: 8e1edc591948\nIP: 127.0.0.1\nIP: 192.168.144.2\nRemoteAddr: 192.168.144.254:51444\nGET / HTTP/1.1\nHost: whoami.localhost\nUser-Agent: curl/7.74.0\nAccept: */*\nAccept-Encoding: gzip\nAuthorization: Basic dGVzdDp0ZXN0\nX-Forwarded-For: 192.168.144.1\nX-Forwarded-Host: whoami.localhost\nX-Forwarded-Port: 80\nX-Forwarded-Proto: http\nX-Forwarded-Server: a037bf49a135\nX-Real-Ip: 192.168.144.1\n")),(0,n.kt)("h4",{id:"external-password-file"},"External Password File"),(0,n.kt)("p",null,"The usersFile option is the path to an external file that contains the authorized users for the middleware. Start by creating a ",(0,n.kt)("inlineCode",{parentName:"p"},".htpasswd")," file with the login credentials:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"apt-get install apache2-utils\nhtpasswd -c /opt/traefik/shared/.htpasswd myuser\n")),(0,n.kt)("p",null,"We now need to mount both our rule and the password file into the Traefik Docker container and make sure that Traefik actually uses these files:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yml"},"services:\n  reverse-proxy:\n    container_name: traefik\n    restart: unless-stopped\n    image: traefik:v2.5\n    ports:\n      - '8080:80'\n      - '8081:8080'\n    networks:\n      traefik_proxy:\n        ipv4_address: 192.168.144.254\n    volumes:\n      - /opt/traefik/rules:/rules\n      - /opt/traefik/shared:/shared\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /opt/traefik/traefik.log:/traefik.log\n    command: # CLI arguments\n      - '--api.insecure=false' # Traefik 2 dashboard authentication\n      - '--providers.docker=true'\n      - '--providers.docker.exposedbydefault=true'\n      - '--providers.docker.network=default'\n      - '--entrypoints.web.address=:80'\n      - '--api'\n      - '--log=true'\n      - '--log.level=ERROR' # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC\n      - '--accessLog=true'\n      - '--accessLog.filePath=/traefik.log'\n      - '--accessLog.bufferingSize=100' # Configuring a buffer of 100 lines\n      - '--accessLog.filters.statusCodes=400-499'\n    labels:\n      - 'traefik.enable=true'\n      - 'traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)'\n      - 'traefik.http.routers.http-catchall.entrypoints=web'\n      # auth middleware with path to .htpasswd as mounted in volumes\n      - 'traefik.http.middlewares.my-auth.basicauth.usersfile=/shared/.htpasswd'\n\n  whoami:\n    image: traefik/whoami\n    networks:\n      - traefik_proxy\n    labels:\n      - 'traefik.enable=true'\n      - 'traefik.http.routers.whoami.rule=Host(`whoami.localhost`)'\n      - 'traefik.http.routers.whoami.entrypoints=web'\n      # connect your auth middleware to a service which you want to protect\n      - 'traefik.http.routers.whoami.middlewares=my-auth'\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -H Host:whoami.localhost http://127.0.0.1:8080\n401 Unauthorized\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"curl -u myuser -H Host:whoami.localhost http://127.0.0.1:8080\n\nEnter host password for user 'myuser':\nHostname: 8658cc0f5b2a\nIP: 127.0.0.1\nIP: 192.168.144.2\nRemoteAddr: 192.168.144.254:54796\nGET / HTTP/1.1\nHost: whoami.localhost\nUser-Agent: curl/7.74.0\nAccept: */*\nAccept-Encoding: gzip\nAuthorization: Basic\nX-Forwarded-For: 192.168.144.1\nX-Forwarded-Host: whoami.localhost\nX-Forwarded-Port: 80\nX-Forwarded-Proto: http\nX-Forwarded-Server: c5f9a76e16e6\nX-Real-Ip: 192.168.144.1\n")))}u.isMDXComponent=!0},73768:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-4118b3ab0d3d411170645e7e387ce566.jpg"}}]);