"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[4783],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||s;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},98346:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const s={sidebar_position:9060,slug:"2020-08-18",title:"Consul Service Mesh",authors:"mpolinowski",tags:["LINUX","Consul"]},i=void 0,a={unversionedId:"DevOps/Hashicorp/2020-08-18--consul-service-mesh/index",id:"DevOps/Hashicorp/2020-08-18--consul-service-mesh/index",title:"Consul Service Mesh",description:"TST, Hong Kong",source:"@site/docs/DevOps/Hashicorp/2020-08-18--consul-service-mesh/index.md",sourceDirName:"DevOps/Hashicorp/2020-08-18--consul-service-mesh",slug:"/DevOps/Hashicorp/2020-08-18--consul-service-mesh/2020-08-18",permalink:"/docs/DevOps/Hashicorp/2020-08-18--consul-service-mesh/2020-08-18",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2020-08-18--consul-service-mesh/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Consul",permalink:"/docs/tags/consul"}],version:"current",sidebarPosition:9060,frontMatter:{sidebar_position:9060,slug:"2020-08-18",title:"Consul Service Mesh",authors:"mpolinowski",tags:["LINUX","Consul"]},sidebar:"tutorialSidebar",previous:{title:"Consul Deployment Guide",permalink:"/docs/DevOps/Hashicorp/2020-08-19--consul-deployment-guide/2020-08-19"},next:{title:"Joining Consul Clients",permalink:"/docs/DevOps/Hashicorp/2020-08-18--consul-mock-datacenter/2020-08-19"}},c={},l=[{value:"Connect Services with Consul Service Mesh",id:"connect-services-with-consul-service-mesh",level:2},{value:"Register a Service and Proxy with Consul",id:"register-a-service-and-proxy-with-consul",level:3}],u={toc:l};function p(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"TST, Hong Kong",src:n(78618).Z,width:"1500",height:"562"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#connect-services-with-consul-service-mesh"},"Connect Services with Consul Service Mesh"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#register-a-service-and-proxy-with-consul"},"Register a Service and Proxy with Consul")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#register-a-dependent-service-and-proxy---"},"Register a Dependent Service and Proxy --\x3e"))),(0,o.kt)("h2",{id:"connect-services-with-consul-service-mesh"},"Connect Services with Consul Service Mesh"),(0,o.kt)("p",null,"In addition to providing IP addresses directly to services with the DNS interface or HTTP API, Consul can connect services to each other via sidecar proxies that you deploy locally with each service instance. This type of deployment, local sidecar proxies that control network traffic between service instances, is a service mesh."),(0,o.kt)("p",null,"Consul service mesh lets you secure and observe communication between your services without modifying their code. Instead Consul configures sidecar proxies to establish mutual TLS between your services and either allow or deny communication between them based on their registered names. Because sidecar proxies control all service-to-service traffic, they can gather metrics about them and export them to a third party aggregator like Prometheus."),(0,o.kt)("h3",{id:"register-a-service-and-proxy-with-consul"},"Register a Service and Proxy with Consul"),(0,o.kt)("p",null,"Begin by starting a service that is unaware of Consul. I am going to start a HTTP web services on port 80 that is serving a simple ",(0,o.kt)("inlineCode",{parentName:"p"},"hello world")," html page (see previous tutorial)."),(0,o.kt)("p",null,"Next, register the service with Consul by writing a new service definition, like you did in the last tutorial. This time you will include a Connect stanza in the registration that will register a sidecar proxy to handle traffic for this backend service instance."),(0,o.kt)("p",null,"Add a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"web.json")," to the consul.d directory with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nano /etc/consul.d/web.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "service": {\n    "name": "web",\n    "tags": [\n      "frontend"\n    ],\n    "port": 80,\n    "connect": { \n      "sidecar_service": {}\n    },\n    "check": {\n      "args": [\n        "curl",\n        "localhost"\n      ],\n      "interval": "10s"\n    }\n  }\n}\n')),(0,o.kt)("p",null,"Now run Consul so it will read the new configuration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"consul agent -dev -enable-script-checks -config-dir=/etc/consul.d\n")),(0,o.kt)("p",null,"Consul does not automatically start the proxy process for you. This is because Consul Connect service mesh allows you to chose the proxy you'd like to use."),(0,o.kt)("p",null,"Consul comes with a L4 proxy for testing purposes, and first-class support for Envoy, which you should use for production deployments and layer 7 traffic management. You'll use the L4 proxy in this tutorial, because, unlike Envoy, it comes with Consul and doesn't require any extra installation. Start the proxy process in another terminal window using the consul connect proxy command, and specify which service instance and proxy registration it corresponds to."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'consul connect proxy -sidecar-for web\n\n==> Consul Connect proxy starting...\n    Configuration mode: Agent API\n        Sidecar for ID: web\n              Proxy ID: web-sidecar-proxy\n\n==> Log data will now stream in as it occurs:\n\n    2020-08-30T14:25:30.585Z [INFO]  proxy: Proxy loaded config and ready to serve\n    2020-08-30T14:25:30.585Z [INFO]  proxy: Parsed TLS identity: uri=spiffe://db65c1da-8cb1-4641-3a8a-1996e1dc9f1e.consul/ns/default/dc/dc1/svc/web roots=[pri-7ba54zn.consul.ca.db65c1da.consul]\n    2020-08-30T14:25:30.585Z [INFO]  proxy: Starting listener: listener="public listener" bind_addr=0.0.0.0:21000\n')),(0,o.kt)("p",null,"You can check the Consul webUI - all health checks should now be ",(0,o.kt)("strong",{parentName:"p"},"green"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Consul Service Mesh",src:n(93176).Z,width:"1131",height:"678"})))}p.isMDXComponent=!0},93176:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Consul_Service_Mesh_01-83ac331591fffa073f0ea03b3cb080fd.png"},78618:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-57269f97e6ae2616c9623b1eb52b5373.jpg"}}]);