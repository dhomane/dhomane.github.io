"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[79662],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},82087:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={sidebar_position:5040,slug:"2022-05-26",title:"App Deployment with Hashicorp Nomad from Gitlab Part Deux",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"]},i=void 0,s={unversionedId:"DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2/index",id:"DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2/index",title:"App Deployment with Hashicorp Nomad from Gitlab Part Deux",description:"Shen Zhen, China",source:"@site/docs/DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2/index.md",sourceDirName:"DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2",slug:"/DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2/2022-05-26",permalink:"/docs/DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2/2022-05-26",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2022-05-26-hashicorp-nomad-with-gitlab-part-2/index.md",tags:[{label:"Nomad",permalink:"/docs/tags/nomad"},{label:"Consul",permalink:"/docs/tags/consul"},{label:"LINUX",permalink:"/docs/tags/linux"}],version:"current",sidebarPosition:5040,frontMatter:{sidebar_position:5040,slug:"2022-05-26",title:"App Deployment with Hashicorp Nomad from Gitlab Part Deux",authors:"mpolinowski",tags:["Nomad","Consul","LINUX"]},sidebar:"tutorialSidebar",previous:{title:"Hashicorp Nomad to set up an Elasticsearch Cluster",permalink:"/docs/DevOps/Hashicorp/2022-05-27-hashicorp-nomad-for-elastic/2022-05-27"},next:{title:"App Deployment with Hashicorp Nomad from Gitlab",permalink:"/docs/DevOps/Hashicorp/2022-05-25-hashicorp-nomad-with-gitlab/2022-05-25"}},l={},c=[{value:"Run a Docker Image with Gitlab Artifacts",id:"run-a-docker-image-with-gitlab-artifacts",level:2},{value:"Configuration Artifacts",id:"configuration-artifacts",level:3},{value:"Adding Volumes",id:"adding-volumes",level:3}],p={toc:c};function d(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Shen Zhen, China",src:t(64620).Z,width:"2230",height:"839"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#run-a-docker-image-with-gitlab-artifacts"},"Run a Docker Image with Gitlab Artifacts"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#configuration-artifacts"},"Configuration Artifacts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#adding-volumes"},"Adding Volumes"))))),(0,o.kt)("h2",{id:"run-a-docker-image-with-gitlab-artifacts"},"Run a Docker Image with Gitlab Artifacts"),(0,o.kt)("p",null,"I now want to run an ingress container for an existing web service. So far the NGINX ingress is configured to proxy-pass a couple of web frontend containers and direct traffic into that Docker cluster:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"default.conf"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-conf"},"server {\n    listen 80;\n    listen [::]:80;\n\n    server_name wiki.instar.com;\n\n    return 301 https://$server_name$request_uri;\n}\n\n\nserver {\n    listen 443 ssl http2 default_server;\n    listen [::]:443 ssl;\n    ssl_certificate /opt/letsencrypt/live/wiki.instar.com/fullchain.pem;\n    ssl_certificate_key /opt/letsencrypt/live/wiki.instar.com/privkey.pem;\n    # include ssl/self-signed.conf;\n    include ssl/ssl-params.conf;\n    include /etc/nginx/conf.d/header.conf;\n\n    server_name wiki.instar.com;\n\n    location / {\n        rewrite ^/(.*)$  /en/$1  permanent;\n    }\n\n    location /de/ {\n      proxy_pass http://wiki_de:9999/;\n    }\n\n    location /en/ {\n      proxy_pass http://wiki_en:8888/;\n    }\n\n    location /fr/ {\n       proxy_pass http://wiki_fr:7777/;\n    }\n    \n    location ~ /dl/.* {\n        root /opt/wiki_downloads/;\n        add_before_body /dl/theme/header.html;\n        add_after_body /dl/theme/footer.html;\n        autoindex on;\n        autoindex_exact_size off;\n        autoindex_format html;\n        autoindex_localtime on;\n    }\n\n\n    error_page  404 /404.html;\n    error_page  500 502 503 504 /50x.html;\n    location = /50x.html {\n    root   /usr/share/nginx/html;\n  }\n}\n")),(0,o.kt)("p",null,"I was using a docker network to lock-down access to those containers - except traffic that was using the ingress. Which also allowed me to use the Docker DNS service to point NGINX to those front ends: ",(0,o.kt)("inlineCode",{parentName:"p"},"proxy_pass http://wiki_de:9999/"),"."),(0,o.kt)("p",null,"With Nomad I guess I now have to run those containers on the host network instead and ",(0,o.kt)("inlineCode",{parentName:"p"},"proxy_pass")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost")," instead. This is not an issue, though. As I can bind those ports to ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost")," and/or use the firewall to block all direct traffic."),(0,o.kt)("p",null,"I can spin up each of those containers using Nomad. Unlike before I am not using a dynamic port, but instead make it static for now (I am planing to add Consul to the mix later to handle the service discovery - but let's keep it simple'ish for now):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'job "wiki_de" {\n    datacenters = ["instaryun"]\n\n    group "wiki_de" {\n    count = 1\n        \n        network {\n            mode = "host"\n            port "http" {\n                static = "9999"\n            }\n        }\n\n        task "container" {\n            driver = "docker"\n\n            config {\n                image = "mygitlab.mydomain.com:12345/wiki/wiki_de_mdx"\n                ports = ["http"]\n\n        auth {\n          username = "mynomaduserongitlab"\n          password = "acomplicatedpassword"\n        }\n            }\n        }\n    }\n}\n')),(0,o.kt)("h3",{id:"configuration-artifacts"},"Configuration Artifacts"),(0,o.kt)("p",null,"So there are three of those services and the last one is a file server - a download area. I can create this inside the Ingress job specification using the ",(0,o.kt)("strong",{parentName:"p"},"Artifact Stanza"),". This also takes care of the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/nginx_docker_ingress"},"NGINX configuration files")," that I source control on Gitlab:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'locals {\n  ports = [\n    {\n      port_label = "http"\n      port       = 80\n    },\n    {\n      port_label = "https"\n      port       = 443\n    }\n  ]\n}\n\njob "wiki_ingress" {\n  datacenters = ["instaryun"]\n\n  group "nginx" {\n    count = 1\n\n    network {\n      mode = "host"\n      dynamic "port" {\n        for_each = local.ports\n        labels   = [port.value.port_label]\n\n        content {\n          to = port.value.port\n        }\n      }\n    }\n\n    service {\n      name = "nginx"\n    }\n\n    volume "letsencrypt" {\n        type      = "host"\n        read_only = true\n        source    = "letsencrypt"\n    }\n\n    task "ingress_container" {\n      driver = "docker"\n\n      volume_mount {\n            volume      = "letsencrypt"\n            destination = "/opt/letsencrypt" #in the container\n            read_only   = false\n      }\n\n      config {\n        network_mode = "host"\n        image = "nginx:1.23.0-alpine"\n        ports = ["http","https"]\n        volumes = [\n          "local/nginx/configuration/conf.d:/etc/nginx/conf.d",\n          "local/nginx/configuration/ssl:/etc/nginx/ssl",\n          "local/nginx/configuration/nginx.conf:/etc/nginx/nginx.conf",\n          "local/wiki_downloads:/opt/wiki_downloads",\n        ]\n      }\n\n      artifact {\n        source      = "git::git@my.gitlab.address.com/group/wiki_ingress.git"\n        destination = "local/nginx"\n        options {\n          sshkey = "${base64encode(file(pathexpand("/etc/nomad.d/.ssh/id_rsa")))}"\n          depth = 1\n        }\n      }\n\n      artifact {\n        source      = "git::git@my.gitlab.address.com/group/wiki_downloads.git"\n        destination = "local/wiki_downloads"\n        options {\n          sshkey = "${base64encode(file(pathexpand("/etc/nomad.d/.ssh/id_rsa")))}"\n          depth = 1\n        }\n      }      \n    }\n  }\n}\n')),(0,o.kt)("h3",{id:"adding-volumes"},"Adding Volumes"),(0,o.kt)("p",null,"You should first create the volume path before nomad is starting, then add the following configs in your client.hcl file [",(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/drivers/docker#client-requirements"},"Plugin Stanza")," | ",(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/configuration/client#host_volume-stanza"},"Host Volume Stanza"),"]:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"nano /etc/nomad.d/client.hcl")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'\nclient {\n  enabled = true\n  servers = ["myhost:port"]\n  host_volume "letsencrypt" {\n    path = "/etc/letsencrypt"\n    read_only = true\n  }\n}\n\n# Docker Configuration\nplugin "docker" {\n    volumes {\n      enabled = true\n    }\n}\n')),(0,o.kt)("p",null,"And then in the job specifications, inside the ",(0,o.kt)("strong",{parentName:"p"},"Group Stanza")," define the ",(0,o.kt)("a",{parentName:"p",href:"https://www.nomadproject.io/docs/job-specification/volume#volume-interpolation"},"volume"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'volume "letsencrypt" {\n     type      = "host"\n     read_only = true\n     source    = "letsencrypt"\n}\n')),(0,o.kt)("p",null,"and then finally add following in the ",(0,o.kt)("strong",{parentName:"p"},"Task Stanza")," use the defined volume:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'volume_mount {\n      volume      = "letsencrypt"\n      destination = "/opt/letsencrypt" #<-- in the container\n      read_only   = false\n}\n')),(0,o.kt)("p",null,"That is a bit complicated for a simple volume mount...."))}d.isMDXComponent=!0},64620:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-6c1edb088dfea3a7d39f8eebb8e9dc23.jpg"}}]);