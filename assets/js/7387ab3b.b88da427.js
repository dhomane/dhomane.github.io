"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[99170],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>h});var n=t(67294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function d(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),l=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},c=function(e){var a=l(e.components);return n.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),m=l(t),h=o,u=m["".concat(i,".").concat(h)]||m[h]||p[h]||r;return t?n.createElement(u,s(s({ref:a},c),{},{components:t})):n.createElement(u,s({ref:a},c))}));function h(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var d={};for(var i in a)hasOwnProperty.call(a,i)&&(d[i]=a[i]);d.originalType=e,d.mdxType="string"==typeof e?e:o,s[1]=d;for(var l=2;l<r;l++)s[l]=t[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},36137:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var n=t(87462),o=(t(67294),t(3905));const r={sidebar_position:9030,slug:"2018-11-21",title:"Creating Node-RED Admin Panel using node-red-dashboard",authors:"mpolinowski",tags:["IoT","Node-RED"]},s=void 0,d={unversionedId:"IoT-and-Machine-Learning/Home_Automation/2018-11-21--nodered-dashboard-getting-started/index",id:"IoT-and-Machine-Learning/Home_Automation/2018-11-21--nodered-dashboard-getting-started/index",title:"Creating Node-RED Admin Panel using node-red-dashboard",description:"Harbin, China",source:"@site/docs/IoT-and-Machine-Learning/Home_Automation/2018-11-21--nodered-dashboard-getting-started/index.mdx",sourceDirName:"IoT-and-Machine-Learning/Home_Automation/2018-11-21--nodered-dashboard-getting-started",slug:"/IoT-and-Machine-Learning/Home_Automation/2018-11-21--nodered-dashboard-getting-started/2018-11-21",permalink:"/docs/IoT-and-Machine-Learning/Home_Automation/2018-11-21--nodered-dashboard-getting-started/2018-11-21",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IoT-and-Machine-Learning/Home_Automation/2018-11-21--nodered-dashboard-getting-started/index.mdx",tags:[{label:"IoT",permalink:"/docs/tags/io-t"},{label:"Node-RED",permalink:"/docs/tags/node-red"}],version:"current",sidebarPosition:9030,frontMatter:{sidebar_position:9030,slug:"2018-11-21",title:"Creating Node-RED Admin Panel using node-red-dashboard",authors:"mpolinowski",tags:["IoT","Node-RED"]},sidebar:"tutorialSidebar",previous:{title:"Node-RED Flows and how to Import them",permalink:"/docs/IoT-and-Machine-Learning/Home_Automation/2018-11-23--node-red-flows/2018-11-23"},next:{title:"Node-RED Interaction over HTTP",permalink:"/docs/IoT-and-Machine-Learning/Home_Automation/2018-11-20--nodered-http-connect/2018-11-20"}},i={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Adding a Dashboard",id:"adding-a-dashboard",level:2},{value:"Adding another Input",id:"adding-another-input",level:2},{value:"Adding a custom UI Widget",id:"adding-a-custom-ui-widget",level:2},{value:"Using external Libraries",id:"using-external-libraries",level:3},{value:"Export",id:"export",level:2}],c={toc:l};function p(e){let{components:a,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Harbin, China",src:t(65951).Z,width:"1500",height:"720"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#adding-a-dashboard"},"Adding a Dashboard")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#adding-another-input"},"Adding another Input")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#adding-a-custom-ui-widget"},"Adding a custom UI Widget"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#using-external-libraries"},"Using external Libraries")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#export"},"Export"))),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Before we look a how the chart node works, let's configure the inject node to send a timestamp every 5 seconds by setting the payload to timestamp and the repeat field to an interval of 5 seconds."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(85033).Z,width:"951",height:"448"})),(0,o.kt)("p",null,"This will act as our repeating trigger. Now we need to set up the function node to generate a random number \u2013 we\u2019ll use a simple JS math function to do this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"msg.payload = Math.round(Math.random()*100);\nreturn msg;\n")),(0,o.kt)("h2",{id:"adding-a-dashboard"},"Adding a Dashboard"),(0,o.kt)("p",null,"We now have a random number generator to simulate a sensor input - let's install ",(0,o.kt)("a",{parentName:"p",href:"https://flows.nodered.org/node/node-red-dashboard"},"node-red-dashboard")," to visualize the result. We can install the node by clicking the top-right hamburger menu, choosing ",(0,o.kt)("strong",{parentName:"p"},"Manage Palette")," and searching for ",(0,o.kt)("inlineCode",{parentName:"p"},"node-red-dashboard"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(87484).Z,width:"954",height:"320"})),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"chart node")," is now available to be added to our flow:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(64342).Z,width:"954",height:"531"})),(0,o.kt)("p",null,"We can ",(0,o.kt)("a",{parentName:"p",href:"http://www.steves-internet-guide.com/node-red-dashboard/"},"configure")," the chart node:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(43222).Z,width:"953",height:"626"})),(0,o.kt)("p",null,"And access it via ",(0,o.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:1880/ui/"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(84132).Z,width:"955",height:"374"})),(0,o.kt)("p",null,"We added the Graph to the Home tab - you can use the ",(0,o.kt)("a",{parentName:"p",href:"https://diyprojects.io/node-red-module-dashboard-gui/"},"dashboard settings")," to add more tabs or add more Groups to one tab:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(85187).Z,width:"955",height:"483"})),(0,o.kt)("p",null,"Let\u2019s create a gauge to show the last data value sent. Drag a ",(0,o.kt)("strong",{parentName:"p"},"gauge node")," from the UI palette and wire it to the Random Number function node. Then double click to open up and let\u2019s configure it:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(73146).Z,width:"956",height:"539"})),(0,o.kt)("p",null,"We\u2019ll us the same Tab, home and we\u2019ll also add it to the same group \u2013 \u201cSensor Chart","[Home]","\u201d. The Min and Max fields allow you to set the min and max values the gauge will shown. Make sure the max is set to 100 which is the most that the random number function node will generate."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(83030).Z,width:"952",height:"556"})),(0,o.kt)("p",null,"Let\u2019s use a couple of the other UI nodes, a slider node and a text node to show the same data on a slider and as a text string. But this time we want to add them to separate group on the same Home tab:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(34689).Z,width:"950",height:"351"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(48066).Z,width:"954",height:"535"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(50138).Z,width:"955",height:"431"})),(0,o.kt)("h2",{id:"adding-another-input"},"Adding another Input"),(0,o.kt)("p",null,"To simulate another Sensor Input, we can simply add another random number generator by editing our ",(0,o.kt)("strong",{parentName:"p"},"function node")," :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var msg = {};\nvar msg1 = {};\n\nmsg.payload = Math.round(Math.random()*100);\nmsg.topic = 'Line';\n\nmsg1.payload = Math.round(Math.random()*100);\nmsg1.topic = 'Line1';\n\nreturn [msg, msg1];\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(46976).Z,width:"955",height:"494"})),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"function node")," now has 2 outputs - lets connect our ",(0,o.kt)("strong",{parentName:"p"},"graph and gauge node")," to the first and the ",(0,o.kt)("strong",{parentName:"p"},"slider and text node")," to the second. And create a second ",(0,o.kt)("strong",{parentName:"p"},"graph node")," in a new ",(0,o.kt)("em",{parentName:"p"},"group")," that is fed both data sources:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(81905).Z,width:"955",height:"465"})),(0,o.kt)("p",null,"Et voil\xe1!"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(42580).Z,width:"956",height:"541"})),(0,o.kt)("h2",{id:"adding-a-custom-ui-widget"},"Adding a custom UI Widget"),(0,o.kt)("p",null,"Let's clone our ",(0,o.kt)("strong",{parentName:"p"},"function node"),", connect the clone to the same timestamp ",(0,o.kt)("strong",{parentName:"p"},"inject node")," the original is connected to and change the random number generator as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'min = Math.round(Math.random()*1000);\nmax = Math.round((Math.random()*10000)+1000);\n\nmsg.payload = {\n  factory: {\n    machine00: {\n      min: min,\n      max: max,\n      failProb: 20,\n      name: "GE 5200"\n    },\n    machine01: {\n      min: min*5,\n      max: max*2,\n      failProb: 10,\n      name: "BB SQ100"\n    }\n  }\n}\n\nreturn msg;\n')),(0,o.kt)("p",null,"We use the usual Math.random function to generate some fake data. However, instead of just passing this data in as payload, we insert the data into a JSON structure called factory. Factory has two elements -machine00 and machine01 which in turn have four elements min, max, failProb and name."),(0,o.kt)("p",null,"We now need to create a UI ",(0,o.kt)("strong",{parentName:"p"},"template node")," and set it up to display on our dashboard. "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(73473).Z,width:"953",height:"597"})),(0,o.kt)("p",null,"Add the following markup to the ",(0,o.kt)("strong",{parentName:"p"},"template node")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<div layout="row" layout-align="start center">\n  <span flex>RPM Min</span>\n  <span flex>RPM Max</span>\n  <span flex>Failure</span>\n  <span flex>Type</span>\n</div>\n<div layout="row" layout-align="start center" ng-repeat="machine in msg.payload.factory">\n  <span flex style="color: green">{{machine.min}}</span>\n  <span flex style="color: red">{{machine.max}}</span>\n  <span flex style="color: black">{{machine.failProb}}%</span>\n  <span flex style="color: black">{{machine.name}}</span>\n</div>\n')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(49169).Z,width:"946",height:"553"})),(0,o.kt)("p",null,"The first \\<div",">"," sets out the labels for the columns defining them using the \\<span flex",">"," tag so they will fit the space nicely. The second \\<div",">"," then uses the ng-repeat command to iterate through the JSON structure in payload and display the data in the columns. Remember, we named each set of data associated with a machine, machine00, machine01 \u2013 so we iterate through those."),(0,o.kt)("p",null,"For each machine element, we use the sub-elements; min, max, failProb and name to fill the data fields. Note how we also use a style directive to set the colour for the text. The result is shown below."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(69755).Z,width:"946",height:"634"})),(0,o.kt)("h3",{id:"using-external-libraries"},"Using external Libraries"),(0,o.kt)("p",null,"We want to build a custom widget using a 3rd party JavaScript charting library ",(0,o.kt)("a",{parentName:"p",href:"http://morrisjs.github.io/morris.js/"},"morris.js"),". For this example we'll use a ",(0,o.kt)("strong",{parentName:"p"},"donut chart")," since it's not available in the Node-RED dashboard widget set."),(0,o.kt)("p",null,"We\u2019ll create a very simple flow for this example consisting of a timer to trigger action every 5 seconds, a ",(0,o.kt)("strong",{parentName:"p"},"function node")," to generate the fake data and the ",(0,o.kt)("strong",{parentName:"p"},"template node")," to display the data."),(0,o.kt)("p",null,"The function node is a simple as possible. It generates a random number and then uses that as a seed to calculate fake values for the different areas that consume power."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"seed = Math.round(Math.random() * 1000);\n\nmsg.payload = {\n  officeW: seed,\n  storageW: seed / 4,\n  conW: seed / 12,\n  parkW:seed / 8,\n  serverW: seed / 2\n};\n\nreturn msg;\n")),(0,o.kt)("p",null,"The template node is a little more complex than previous examples because we are pulling in an external charting library (morris.js) and it\u2019s dependencies and we are writing some JavaScript code to use the incoming data (from the function node) to draw the ",(0,o.kt)("a",{parentName:"p",href:"http://morrisjs.github.io/morris.js/donuts.html"},"donut chart"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css">\n <script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"><\/script>\n <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"><\/script>\n <script src="https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"><\/script>\n\n<div id="chart-example" style="height: 250px;"></div>\n\n<h3 align="center">Power Consumption [W] </h3>\n\n<script>\n\n(function(scope) {\n var timer = setInterval(function() { //check that the Morris libs are loaded, if not wait\n if (!window.Morris) return;\n clearInterval(timer);\n \n var myData;\n \n var myDonut = Morris.Donut({\n element: \'chart-example\',\n data: [\n {label: "Office", value: 1 },\n {label: "Storage", value: 1 },\n {label: "Confernce", value: 1 },\n {label: "Parking", value: 1 },\n {label: "Server", value: 1 }\n ]\n });\n \n scope.$watch(\'msg\', function (msg) { //watch for an incoming NR msg\n if (msg) {\n \n myData = msg;\n myDonut.setData([\n {label: "Office", value: myData.payload.officeW },\n {label: "Storage", value: myData.payload.storageW },\n {label: "Confernce", value: myData.payload.conW },\n {label: "Parking", value: myData.payload.parkW },\n {label: "Server", value: myData.payload.serverW }\n ])\n };\n }); //close out the watch \n }, 100); // close out the setInterval \n})(scope);\n\n\n<\/script>\n')),(0,o.kt)("p",null,"To update the donut chart, we want to look at the incoming Node-RED message, and use its payload to update the donut chart. To do this, we use a watch function to look for changes to the scope variable msg, which contains the incoming Node-RED message."),(0,o.kt)("p",null,"A good overview is available on the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.angularjs.org/guide/concepts"},"Angular docs")," page. Briefly, Angular implements a Model-View-Controller (MVC) in which the model (the data) is separate from the view (the DOM). Controllers (code), Expressions and Directives manipulate the data which dynamically updates the view (the Dom) so you see the changes. The model is managed in a structure referred to as the scope."),(0,o.kt)("p",null,"So coming back to our example, the code at line 37 tells the template node to look at the scope (all our data) and watch for changes to the variable msg. When msg changes, in this case because a new Node-RED message has arrived, the function then executes and simply extracts the new data from the msg.payload and uses it to call the setData() function on the Morris.Donut object (myDonut) which dynamically updates the donut chart."),(0,o.kt)("p",null,"All of the above is wrapped in a function which passes the scope so that it can be accessed using the watch method."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"node-red-dashboard",src:t(53037).Z,width:"950",height:"686"})),(0,o.kt)("h2",{id:"export"},"Export"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[{"id":"aafc0f94.6fc66","type":"tab","label":"dashboard","disabled":false,"info":""},{"id":"43533492.9531bc","type":"inject","z":"aafc0f94.6fc66","name":"","topic":"","payload":"","payloadType":"date","repeat":"5","crontab":"","once":false,"onceDelay":0.1,"x":89,"y":67,"wires":[["48b6e9f0.d271a8","b9bbdc1.c9bbe2","cb239309.e7f31"]]},{"id":"48b6e9f0.d271a8","type":"function","z":"aafc0f94.6fc66","name":"random","func":"var msg = {};\\nvar msg1 = {};\\n\\nmsg.payload = Math.round(Math.random()*100);\\nmsg.topic = \'Line\';\\n\\nmsg1.payload = Math.round(Math.random()*100);\\nmsg1.topic = \'Line1\';\\n\\nreturn [msg, msg1];","outputs":2,"noerr":0,"x":170,"y":160,"wires":[["68ff1fd1.ffce4","69a616b4.778708","9417dbf0.ced388"],["9417dbf0.ced388","8381759d.688758","942e1691.340b98"]]},{"id":"68ff1fd1.ffce4","type":"ui_chart","z":"aafc0f94.6fc66","name":"Sensor Input","group":"5f5d8461.9b6d0c","order":0,"width":0,"height":0,"label":"Sensor Input","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"bezier","nodata":"Waiting for Data","dot":false,"ymin":"","ymax":"","removeOlder":"5","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"x":359.5,"y":82,"wires":[[],[]]},{"id":"69a616b4.778708","type":"ui_gauge","z":"aafc0f94.6fc66","name":"","group":"5f5d8461.9b6d0c","order":0,"width":0,"height":0,"gtype":"gage","title":"Gauge","label":"units","format":"{{value}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":340,"y":125,"wires":[]},{"id":"8381759d.688758","type":"ui_slider","z":"aafc0f94.6fc66","name":"","label":"slider","group":"a4cc4c7a.38c8d","order":0,"width":0,"height":0,"passthru":true,"topic":"","min":0,"max":"100","step":1,"x":349,"y":313,"wires":[[]]},{"id":"942e1691.340b98","type":"ui_text","z":"aafc0f94.6fc66","group":"a4cc4c7a.38c8d","order":0,"width":0,"height":0,"name":"","label":"Value","format":"{{msg.payload}}","layout":"row-spread","x":350,"y":357,"wires":[]},{"id":"9417dbf0.ced388","type":"ui_chart","z":"aafc0f94.6fc66","name":"Sensor Input","group":"89145363.61cc9","order":0,"width":0,"height":0,"label":"Sensor Input","chartType":"line","legend":"false","xformat":"HH:mm:ss","interpolate":"bezier","nodata":"Waiting for Data","dot":false,"ymin":"","ymax":"","removeOlder":"5","removeOlderPoints":"","removeOlderUnit":"60","cutout":0,"useOneColor":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"x":379,"y":204,"wires":[[],[]]},{"id":"b9bbdc1.c9bbe2","type":"function","z":"aafc0f94.6fc66","name":"random","func":"min = Math.round(Math.random()*1000);\\nmax = Math.round((Math.random()*10000)+1000);\\n\\nmsg.payload = {\\n  factory: {\\n    machine00: {\\n      min: min,\\n      max: max,\\n      failProb: 20,\\n      name: \\"GE 5200\\"\\n    },\\n    machine01: {\\n      min: min*5,\\n      max: max*2,\\n      failProb: 10,\\n      name: \\"BB SQ100\\"\\n    }\\n  }\\n}\\n\\nreturn msg;","outputs":1,"noerr":0,"x":176,"y":446,"wires":[["61f38b83.ebb474"]]},{"id":"61f38b83.ebb474","type":"ui_template","z":"aafc0f94.6fc66","group":"7a9b7006.b60ac","name":"","order":0,"width":"6","height":"2","format":"<div layout=\\"row\\" layout-align=\\"start center\\">\\n  <span flex>RPM [min]</span>\\n  <span flex>RPM [max]</span>\\n  <span flex>Failure</span>\\n  <span flex>Type</span>\\n  <br/>\\n</div>\\n<div layout=\\"row\\" layout-align=\\"start center\\" ng-repeat=\\"machine in msg.payload.factory\\">\\n  <span flex style=\\"color: green\\">{{machine.min}}</span>\\n  <span flex style=\\"color: red\\">{{machine.max}}</span>\\n  <span flex style=\\"color: black\\">{{machine.failProb}}%</span>\\n  <span flex style=\\"color: black\\">{{machine.name}}</span>\\n</div>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":361,"y":446,"wires":[[]]},{"id":"cb239309.e7f31","type":"function","z":"aafc0f94.6fc66","name":"random","func":"seed = Math.round(Math.random() * 1000);\\n\\nmsg.payload = {\\n  officeW: seed,\\n  storageW: seed / 4,\\n  conW: seed / 12,\\n  parkW:seed / 8,\\n  serverW: seed / 2\\n};\\n\\nreturn msg;","outputs":1,"noerr":0,"x":177,"y":516,"wires":[["d34891c8.a107c"]]},{"id":"d34891c8.a107c","type":"ui_template","z":"aafc0f94.6fc66","group":"7a9b7006.b60ac","name":"","order":0,"width":"6","height":"6","format":"<link rel=\\"stylesheet\\" href=\\"https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.css\\">\\n <script src=\\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js\\"><\/script>\\n <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\\"><\/script>\\n <script src=\\"https://cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js\\"><\/script>\\n\\n<div id=\\"chart-example\\" style=\\"height: 250px;\\"></div>\\n\\n<h3 align=\\"center\\">Power Consumption [W] </h3>\\n\\n<script>\\n\\n(function(scope) {\\n var timer = setInterval(function() { //check that the Morris libs are loaded, if not wait\\n if (!window.Morris) return;\\n clearInterval(timer);\\n \\n var myData;\\n \\n var myDonut = Morris.Donut({\\n element: \'chart-example\',\\n data: [\\n {label: \\"Office\\", value: 1 },\\n {label: \\"Storage\\", value: 1 },\\n {label: \\"Confernce\\", value: 1 },\\n {label: \\"Parking\\", value: 1 },\\n {label: \\"Server\\", value: 1 }\\n ]\\n });\\n \\n scope.$watch(\'msg\', function (msg) { //watch for an incoming NR msg\\n if (msg) {\\n \\n myData = msg;\\n myDonut.setData([\\n {label: \\"Office\\", value: myData.payload.officeW },\\n {label: \\"Storage\\", value: myData.payload.storageW },\\n {label: \\"Confernce\\", value: myData.payload.conW },\\n {label: \\"Parking\\", value: myData.payload.parkW },\\n {label: \\"Server\\", value: myData.payload.serverW }\\n ])\\n };\\n }); //close out the watch \\n }, 100); // close out the setInterval \\n})(scope);\\n\\n\\n<\/script>","storeOutMessages":true,"fwdInMessages":true,"templateScope":"local","x":363,"y":517,"wires":[[]]},{"id":"5f5d8461.9b6d0c","type":"ui_group","z":"","name":"Sensor Chart","tab":"e98cb2c4.c173b","order":1,"disp":true,"width":"6","collapse":false},{"id":"a4cc4c7a.38c8d","type":"ui_group","z":"","name":"Sensor Slider","tab":"e98cb2c4.c173b","order":2,"disp":true,"width":"6","collapse":false},{"id":"89145363.61cc9","type":"ui_group","z":"","name":"Both Sensors","tab":"e98cb2c4.c173b","order":3,"disp":true,"width":"6","collapse":false},{"id":"7a9b7006.b60ac","type":"ui_group","z":"","name":"Custom Widget","tab":"e98cb2c4.c173b","order":4,"disp":true,"width":"6","collapse":false},{"id":"e98cb2c4.c173b","type":"ui_tab","z":"","name":"Home","icon":"dashboard"}]\n')))}p.isMDXComponent=!0},85033:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_01-57b87c03b5378888f65554df04a90222.png"},87484:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_02-ed6484dce4b0aac1fd6a18bdfa80711f.png"},64342:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_03-15534d2a89ebd9eab071412d9c13caef.png"},43222:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_04-1b95932575b72fdd1c5a518ad8436ad4.png"},84132:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_05-217a0fd7260a1baee975936edbae3690.png"},85187:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_06-d50ed8ca9856dd26feca8445c5b7be96.png"},73146:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_07-696c7601ba8e69d010b600cd228e32c1.png"},83030:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_08-9ea98e1ec5f8126387976f1e64f50a46.png"},34689:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_09-ff285fb73fec659a2a41a682d16c226b.png"},48066:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_10-9a69b5a642f13763fd66b785deda69bc.png"},50138:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_11-bee596cf689c9b79a84869fa5b4981c0.png"},46976:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_12-d59fd4250b79d82cefe48c5cd3cc5637.png"},81905:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_13-23d542ffb749c833c34f482169604de2.png"},42580:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_14-18c5dccda9d3375e566cca249d187659.png"},73473:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_15-5e5f47cf26d84f6ac84888836e47a06e.png"},49169:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_16-35cf44d3e7088a627001137202db8a34.png"},69755:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_17-d0ccf9a949c39f464b957954d86b0e8a.png"},53037:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/node-red-dash_18-a87d8d1f8de8de32e46ffd99d41220fc.png"},65951:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/photo-34443677922_8f09e47dd3_o-62a23a377fbbd8837dd671973a25dec5.png"}}]);