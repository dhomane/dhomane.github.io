"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[64219],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>m});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=t.createContext({}),s=function(e){var a=t.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},p=function(e){var a=s(e.components);return t.createElement(c.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?t.createElement(k,o(o({ref:a},p),{},{components:n})):t.createElement(k,o({ref:a},p))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},80677:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var t=n(87462),r=(n(67294),n(3905));const i={sidebar_position:9040,slug:"2020-10-23",title:"HashiCorp Packer Machine Images Introduction",authors:"mpolinowski",tags:["LINUX","Packer"]},o=void 0,l={unversionedId:"DevOps/Hashicorp/2020-10-23--hashicorp-packer-machine-image/index",id:"DevOps/Hashicorp/2020-10-23--hashicorp-packer-machine-image/index",title:"HashiCorp Packer Machine Images Introduction",description:"TST, Hong Kong",source:"@site/docs/DevOps/Hashicorp/2020-10-23--hashicorp-packer-machine-image/index.md",sourceDirName:"DevOps/Hashicorp/2020-10-23--hashicorp-packer-machine-image",slug:"/DevOps/Hashicorp/2020-10-23--hashicorp-packer-machine-image/2020-10-23",permalink:"/docs/DevOps/Hashicorp/2020-10-23--hashicorp-packer-machine-image/2020-10-23",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/DevOps/Hashicorp/2020-10-23--hashicorp-packer-machine-image/index.md",tags:[{label:"LINUX",permalink:"/docs/tags/linux"},{label:"Packer",permalink:"/docs/tags/packer"}],version:"current",sidebarPosition:9040,frontMatter:{sidebar_position:9040,slug:"2020-10-23",title:"HashiCorp Packer Machine Images Introduction",authors:"mpolinowski",tags:["LINUX","Packer"]},sidebar:"tutorialSidebar",previous:{title:"HashiCorp Packer with Virtualbox (Preseed)",permalink:"/docs/DevOps/Hashicorp/2020-10-24--hashicorp-packer-and-virtualbox-preseed/2020-10-24"},next:{title:"Consul Deployment Guide",permalink:"/docs/DevOps/Hashicorp/2020-08-19--consul-deployment-guide/2020-08-19"}},c={},s=[{value:"Installing Packer",id:"installing-packer",level:2},{value:"Configuring ZSH (Optional)",id:"configuring-zsh-optional",level:2},{value:"Installing Packer Plugins",id:"installing-packer-plugins",level:2},{value:"Installing Golang",id:"installing-golang",level:3},{value:"Building a Packer Plugin from Source",id:"building-a-packer-plugin-from-source",level:3},{value:"Packer Builders",id:"packer-builders",level:2},{value:"Docker Builder",id:"docker-builder",level:3},{value:"Basic Example: Export",id:"basic-example-export",level:4},{value:"Basic Example: Commit",id:"basic-example-commit",level:4},{value:"Basic Example: Changes to Metadata",id:"basic-example-changes-to-metadata",level:4},{value:"Packer Communicator",id:"packer-communicator",level:2}],p={toc:s};function u(e){let{components:a,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},p,i,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"TST, Hong Kong",src:n(90351).Z,width:"1500",height:"622"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installing-packer"},"Installing Packer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuring-zsh-optional"},"Configuring ZSH (Optional)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installing-packer-plugins"},"Installing Packer Plugins"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#installing-golang"},"Installing Golang")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#building-a-packer-plugin-from-source"},"Building a Packer Plugin from Source")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#packer-builders"},"Packer Builders"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#docker-builder"},"Docker Builder"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#basic-example-export"},"Basic Example: Export")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#basic-example-commit"},"Basic Example: Commit")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#basic-example-changes-to-metadata"},"Basic Example: Changes to Metadata")))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#packer-communicator"},"Packer Communicator"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.packer.io"},"HashiCorp Packer")," automates the creation of any type of machine image. It embraces modern configuration management by encouraging you to use automated scripts to install and configure the software within your Packer-made images. Packer brings machine images into the modern age, unlocking untapped potential and opening new opportunities."),(0,r.kt)("h2",{id:"installing-packer"},"Installing Packer"),(0,r.kt)("p",null,"I am going to ",(0,r.kt)("a",{parentName:"p",href:"https://learn.hashicorp.com/tutorials/packer/getting-started-install"},"install Packer manually")," on an Arch LINUX Desktop using the ",(0,r.kt)("a",{parentName:"p",href:"https://packer.io/downloads.html"},"pre-compiled binary"),". Download the ZIP file to your Download directory and unzip it."),(0,r.kt)("p",null,"Print a colon-separated list of locations in your ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo $PATH\n")),(0,r.kt)("p",null,"Move the Packer binary to one of the listed locations. This command assumes that the binary is currently in your downloads folder and that your ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," includes ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/local/bin"),", but you can customize it if your locations are different:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mv ~/Downloads/packer /usr/local/bin/\n")),(0,r.kt)("p",null,"After installing Packer, verify the installation worked by opening a new command prompt or console, and checking that packer is available:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"packer\nusage: packer [--version] [--help] <command> [<args>]\n\nAvailable commands are:\n    build       build image(s) from template\n    fix         fixes templates from old versions of packer\n    inspect     see components of a template\n    validate    check that a template is valid\n    version     Prints the Packer version\n")),(0,r.kt)("h2",{id:"configuring-zsh-optional"},"Configuring ZSH (Optional)"),(0,r.kt)("p",null,"To install Packer autocompletion in ",(0,r.kt)("inlineCode",{parentName:"p"},"oh-my-zsh")," clone this repo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/gunzy83/packer-zsh-completion.git ~/.oh-my-zsh/plugins/packer\n")),(0,r.kt)("p",null,"Then add the plugin to your plugin list in oh-my-zsh configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano ~/.zshrc\n\nplugins=(... packer)\n")),(0,r.kt)("p",null,"After installation re-source your ",(0,r.kt)("inlineCode",{parentName:"p"},".zshrc"),": "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"source .zshrc\n")),(0,r.kt)("h2",{id:"installing-packer-plugins"},"Installing Packer Plugins"),(0,r.kt)("h3",{id:"installing-golang"},"Installing Golang"),(0,r.kt)("p",null,"Packer as well as it's plugins are written in Go. To install a plugin from source make sure that you have ",(0,r.kt)("a",{parentName:"p",href:"https://wiki.archlinux.org/index.php/Go"},"go & go-tools")," installed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -S go\n\ngo version\ngo version go1.15.2 linux/amd64\n")),(0,r.kt)("p",null,"You can check that Go is installed correctly by building a simple program ",(0,r.kt)("inlineCode",{parentName:"p"},"hello.go"),", as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "fmt"\n\nfunc main() {\n    fmt.Println("Hello, Terminal!")\n}\n')),(0,r.kt)("p",null,"Then run it with the go tool:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go run ./hello.go\n\nHello, Terminal!\n")),(0,r.kt)("h3",{id:"building-a-packer-plugin-from-source"},"Building a Packer Plugin from Source"),(0,r.kt)("p",null,"Start by cloning the repository that you want to use and enter the directory, e.g. :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/SwampDragons/packer-provisioner-comment.git\ncd ./packer-provisioner-comment\n")),(0,r.kt)("p",null,"Now install all Go dependencies the application needs and run the build command to create the binary that we can install in Packer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go mod download\ngo build\n")),(0,r.kt)("p",null,"This will output a binary file called ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," inside the directory. We can rename it and move it either into ",(0,r.kt)("inlineCode",{parentName:"p"},"/usr/local/bin/")," to have it available globally. But to keep our system clean we can also copy it into our users home directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ~/.packer.d/plugins\nmv main ~/.packer.d/plugins/packer-provisioner-comment\n")),(0,r.kt)("h2",{id:"packer-builders"},"Packer Builders"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"builders")," section we need to define the platform that want to deploy to and add the necessary configuration like API keys and source images."),(0,r.kt)("h3",{id:"docker-builder"},"Docker Builder"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://www.packer.io/docs/builders/docker"},"Docker Packer builder")," builds Docker images using Docker. The builder starts a Docker container, runs provisioners within this container, then exports the container for reuse or commits the image. Packer builds Docker containers without the use of Dockerfiles. The Docker builder must run on a machine that has Docker Engine installed."),(0,r.kt)("h4",{id:"basic-example-export"},"Basic Example: Export"),(0,r.kt)("p",null,"Below is a fully functioning example. It doesn't do anything useful, since no provisioners are defined, but it will effectively repackage an image."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "builders": [\n      {\n        "export_path": "ubuntu.tar",\n        "image": "ubuntu",\n        "type": "docker"\n      }\n    ]\n  }\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Validating and Running your Template File")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"packer validate ./packer.json\npacker fix ./packer.json\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"packer build packer.json\n\ndocker: output will be in this color.\n==> docker: Creating a temporary directory for sharing data...\n==> docker: Pulling Docker image: ubuntu\n    docker: Using default tag: latest\n    docker: latest: Pulling from library/ubuntu\n    docker: Digest: sha256:fff16eea1a8ae92867721d90c59a75652ea66d29c05294e6e2f898704bdb8cf1\n    docker: Status: Image is up to date for ubuntu:latest\n    docker: docker.io/library/ubuntu:latest\n==> docker: Starting docker container...\n    docker: Run command: docker run -v /home/user/.packer.d/tmp926764499:/packer-files -d -i -t --entrypoint=/bin/sh -- ubuntu\n    docker: Container ID: adcc271a70e326726d1fdf48e256e437c0abc1644749a86a87c4550860319ae9\n==> docker: Using docker communicator to connect: 172.17.0.2\n==> docker: Exporting the container\n==> docker: Killing the container: adcc271a70e326726d1fdf48e256e437c0abc1644749a86a87c4550860319ae9\nBuild 'docker' finished after 6 seconds 890 milliseconds.\n==> Wait completed after 6 seconds 890 milliseconds\n==> Builds finished. The artifacts of successful builds are:\n--\x3e docker: Exported Docker file: ubuntu.tar\n")),(0,r.kt)("h4",{id:"basic-example-commit"},"Basic Example: Commit"),(0,r.kt)("p",null,"Below is another example, the same as above but instead of exporting the running container, this one commits the container to an image. The image can then be more easily tagged, pushed, etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "builders": [\n    {\n      "commit": true,\n      "image": "ubuntu",\n      "type": "docker"\n    }\n  ]\n}\n')),(0,r.kt)("h4",{id:"basic-example-changes-to-metadata"},"Basic Example: Changes to Metadata"),(0,r.kt)("p",null,"Below is an example using the changes argument of the builder. This feature allows the source images metadata to be changed when committed back into the Docker environment. It is derived from the docker commit --change command line option to Docker."),(0,r.kt)("p",null,"Example uses of all of the options, assuming one is building an NGINX image from ubuntu as an simple example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "builders": [\n    {\n      "changes": [\n        "USER www-data",\n        "WORKDIR /var/www",\n        "ENV HOSTNAME www.example.com",\n        "VOLUME /test1 /test2",\n        "EXPOSE 80 443",\n        "LABEL version=1.0",\n        "ONBUILD RUN date",\n        "CMD [\\"nginx\\", \\"-g\\", \\"daemon off;\\"]",\n        "ENTRYPOINT /var/www/start.sh"\n      ],\n      "commit": true,\n      "image": "ubuntu",\n      "type": "docker"\n    }\n  ]\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Building and Committing your Image")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"packer build packer.json \n\ndocker: output will be in this color.\n==> docker: Creating a temporary directory for sharing data...\n==> docker: Pulling Docker image: ubuntu\n    docker: Using default tag: latest\n    docker: latest: Pulling from library/ubuntu\n    docker: Digest: sha256:fff16eea1a8ae92867721d90c59a75652ea66d29c05294e6e2f898704bdb8cf1\n    docker: Status: Image is up to date for ubuntu:latest\n    docker: docker.io/library/ubuntu:latest\n==> docker: Starting docker container...\n    docker: Run command: docker run -v /home/user/.packer.d/tmp556583891:/packer-files -d -i -t --entrypoint=/bin/sh -- ubuntu\n    docker: Container ID: c5126f38aa32ff58fe3ce11622be59a9f6216c4478d93e34719f89e1c522f2ac\n==> docker: Using docker communicator to connect: 172.17.0.2\n==> docker: Committing the container\n    docker: Image ID: sha256:e186c58d2da00ec11c2b273941b6c61142fcdaae3d2949e9135278fc36615713\n==> docker: Killing the container: c5126f38aa32ff58fe3ce11622be59a9f6216c4478d93e34719f89e1c522f2ac\nBuild 'docker' finished after 11 seconds 495 milliseconds.\n==> Wait completed after 11 seconds 495 milliseconds\n==> Builds finished. The artifacts of successful builds are:\n--\x3e docker: Imported Docker image: sha256:e186c58d2da00ec11c2b273941b6c61142fcdaae3d2949e9135278fc36615713\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker images\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"REPOSITORY"),(0,r.kt)("td",{parentName:"tr",align:null},"TAG"),(0,r.kt)("td",{parentName:"tr",align:null},"IMAGE ID"),(0,r.kt)("td",{parentName:"tr",align:null},"CREATED"),(0,r.kt)("td",{parentName:"tr",align:null},"SIZE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<none",">"),(0,r.kt)("td",{parentName:"tr",align:null},"<none",">"),(0,r.kt)("td",{parentName:"tr",align:null},"e186c58d2da0"),(0,r.kt)("td",{parentName:"tr",align:null},"About a minute ago"),(0,r.kt)("td",{parentName:"tr",align:null},"72.9MB")))),(0,r.kt)("h2",{id:"packer-communicator"},"Packer Communicator"),(0,r.kt)("p",null,"By default Packer uses SSH to create the machine from your template. If you need to use another communicator, e.g. WinRM on Windows images, those have to be defined."),(0,r.kt)("p",null,"The communicator needs to be configured with the default user login to the source image that you want to use, e.g. :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "ssh_username": "ubuntu",\n  "ssh_password": "ubuntu"\n}\n')))}u.isMDXComponent=!0},90351:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-d8b333d1f9ddf34ac7392aef86b14c83.jpg"}}]);