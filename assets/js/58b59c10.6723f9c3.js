"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[63798],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return t?a.createElement(g,i(i({ref:n},u),{},{components:t})):a.createElement(g,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},54098:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={sidebar_position:8070,slug:"2022-10-05",title:"Go Build!",authors:"mpolinowski",tags:["Go"],description:"Cross-compile in Go and reduce the binary size of your Go program."},i="Go Build!",l={unversionedId:"Development/Go/2022-10-05-go-reducing-binary-size/index",id:"Development/Go/2022-10-05-go-reducing-binary-size/index",title:"Go Build!",description:"Cross-compile in Go and reduce the binary size of your Go program.",source:"@site/docs/Development/Go/2022-10-05-go-reducing-binary-size/index.md",sourceDirName:"Development/Go/2022-10-05-go-reducing-binary-size",slug:"/Development/Go/2022-10-05-go-reducing-binary-size/2022-10-05",permalink:"/docs/Development/Go/2022-10-05-go-reducing-binary-size/2022-10-05",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/Go/2022-10-05-go-reducing-binary-size/index.md",tags:[{label:"Go",permalink:"/docs/tags/go"}],version:"current",sidebarPosition:8070,frontMatter:{sidebar_position:8070,slug:"2022-10-05",title:"Go Build!",authors:"mpolinowski",tags:["Go"],description:"Cross-compile in Go and reduce the binary size of your Go program."},sidebar:"tutorialSidebar",previous:{title:"Go OAuth2 Server",permalink:"/docs/Development/Go/2022-10-15-go-oauth2-server/2022-10-15"},next:{title:"Build a NTP/S Timeserver Client in Go",permalink:"/docs/Development/Go/2022-10-04-go-ntp-client/2022-10-04"}},s={},p=[{value:"Cross-compiling with Go",id:"cross-compiling-with-go",level:2},{value:"Golang on a Diet",id:"golang-on-a-diet",level:2},{value:"UPX",id:"upx",level:3}],u={toc:p};function m(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"go-build"},"Go Build!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Shenzhen, China",src:t(96780).Z,width:"1500",height:"546"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#go-build"},"Go Build!"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#cross-compiling-with-go"},"Cross-compiling with Go")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#golang-on-a-diet"},"Golang on a Diet"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#upx"},"UPX"))))))),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"/docs/Development/Go/2022-10-04-go-ntp-client/2022-10-04"},"previous post")," I build an NTS Client from source. I now need to compile it for an ARM system and reduce the file size of the generated binary."),(0,r.kt)("h2",{id:"cross-compiling-with-go"},"Cross-compiling with Go"),(0,r.kt)("p",null,"The original binary was compiled on a ",(0,r.kt)("inlineCode",{parentName:"p"},"x86-64")," Linux system and with default settings resulted in the following file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"file ntsclient\n\nntsclient: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, Go BuildID=jk1ySsUE9xCbQQElzPBj/mKJ-lNqe4rCLOALwJ0Uh/lg1ziBDAYw1FdjS_SnD_/6JHvJ15niw3mnL010nFR, with debug_info, not stripped\n")),(0,r.kt)("p",null,"To use the binary on an ARM system we need to use the amazing cross-compiling capabilities of Go. E.g. to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"arm64")," version of the file I can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"env GOOS=linux GOARCH=arm64 go build -o ntsclient_arm64\n")),(0,r.kt)("p",null,"The resulting binary can be used on an 64bit ARM system:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"file ntsclient_arm64\n\nntsclient_arm64: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, Go BuildID=MR5GvnV5S4XWxDENNLTE/ZZ2k_Dx5K6CdKRTzWlK5/Zbl1ahI9CUA-f28opmhH/0Zh0CFmxrhuWRZ-kOiMt, with debug_info, not stripped\n")),(0,r.kt)("p",null,"You can check the supported combinations of ",(0,r.kt)("strong",{parentName:"p"},"GOOS")," and ",(0,r.kt)("strong",{parentName:"p"},"GOARCH")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"go tool dist list\n\naix/ppc64 | android/386 | android/amd64 | android/arm | android/arm64 | darwin/amd64 | darwin/arm64 | dragonfly/amd64 | freebsd/386 | freebsd/amd64 | freebsd/arm | freebsd/arm64 | illumos/amd64 | ios/amd64 | ios/arm64 | js/wasm | linux/386 | linux/amd64 | linux/arm | linux/arm64 | linux/loong64 | linux/mips | linux/mips64 | linux/mips64le | linux/mipsle | linux/ppc64 | linux/ppc64le | linux/riscv64 | linux/s390x | netbsd/386 | netbsd/amd64 | netbsd/arm | netbsd/arm64 | openbsd/386 | openbsd/amd64 | openbsd/arm | openbsd/arm64 | openbsd/mips64 | plan9/386 | plan9/amd64 | plan9/arm | solaris/amd64 | windows/386 | windows/amd64 | windows/arm | windows/arm64\n")),(0,r.kt)("p",null,"We can automate a multi-architecture build with a script ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sh"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"#!/usr/bin/bash\narchs=(amd64 arm arm64)\n\nfor arch in ${archs[@]}\ndo\n        env GOOS=linux GOARCH=${arch} go build -o prepnode_${arch}\ndone\n")),(0,r.kt)("h2",{id:"golang-on-a-diet"},"Golang on a Diet"),(0,r.kt)("p",null,"The resulting files - compared to a similar C program - are generally huge. In the NTS client example I end up with 7.4 - 7.7 MB files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"7965759 Oct  5 15:37 ntsclient_amd64\n7665133 Oct  5 15:37 ntsclient_arm\n7635040 Oct  5 15:24 ntsclient_arm64\n")),(0,r.kt)("p",null,"The following build flags can help us reducing the binary size:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ldflags",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-s")," omits the symbol table and debug information"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-w")," omits DWARF debugging information.")))),(0,r.kt)("p",null,"So let's update the build script accordingly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'#!/usr/bin/bash\narchs=(amd64 arm arm64)\n\nfor arch in ${archs[@]}\ndo\n        env GOOS=linux GOARCH=${arch} go build -ldflags "-s -w" -o prepnode_${arch}\ndone\n')),(0,r.kt)("p",null,"Now we are down to 5.0 - 5.2 MB:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"5459968 Oct  5 16:55 ntsclient_amd64\n5242880 Oct  5 16:55 ntsclient_arm\n5242880 Oct  5 16:55 ntsclient_arm64\n")),(0,r.kt)("h3",{id:"upx"},"UPX"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://upx.github.io/"},"UPX")," is a free, secure, portable, extendable, high-performance executable packer for several executable formats. You can install the latest version from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/upx/upx/releases"},"Github")," or use your package manager:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pacman -S utx\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"upx --help\n\n                       Ultimate Packer for eXecutables\n                          Copyright (C) 1996 - 2020\nUPX git-d7ba31+ Markus Oberhumer, Laszlo Molnar & John Reiser   Jan 23rd 2020\n\nUsage: upx [-123456789dlthVL] [-qvfk] [-o file] file..\n\nCommands:\n  -1     compress faster                   -9    compress better\n  --best compress best (can be slow for big files)\n  -d     decompress                        -l    list compressed file\n  -t     test compressed file              -V    display version number\n  -h     give this help                    -L    display software license\n\nOptions:\n  -q     be quiet                          -v    be verbose\n  -oFILE write output to 'FILE'\n  -f     force compression of suspicious files\n  --no-color, --mono, --color, --no-progress   change look\n\nCompression tuning options:\n  --brute             try all available compression methods & filters [slow]\n  --ultra-brute       try even more compression variants [very slow]\n")),(0,r.kt)("p",null,"So to get the maximum amount of compress let's try ",(0,r.kt)("strong",{parentName:"p"},"Ultra Brute"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"upx --ultra-brute -ontsclient_upx_arm ntsclient_arm\n\n    File size         Ratio      Format      Name\n--------------------   ------   -----------   -----------\n5242880 ->   1421184   27.11%    linux/arm    ntsclient_upx_arm\n")),(0,r.kt)("p",null,"So we went from around 7 MB down to 1.4 MB."))}m.isMDXComponent=!0},96780:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-0795219c47cded4f1a1480a5f18e4c60.jpg"}}]);