"use strict";(self.webpackChunkmikes_dev_notebook=self.webpackChunkmikes_dev_notebook||[]).push([[77131],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,u=d["".concat(l,".").concat(h)]||d[h]||m[h]||r;return n?o.createElement(u,i(i({ref:t},p),{},{components:n})):o.createElement(u,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},93004:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const r={sidebar_position:9080,slug:"2022-05-03",title:"React Native Context API",authors:"mpolinowski",tags:["Javascript","React","ReactNative"]},i=void 0,s={unversionedId:"Development/ReactNative/2022-05-03-react-native-contextapi/index",id:"Development/ReactNative/2022-05-03-react-native-contextapi/index",title:"React Native Context API",description:"Victoria Harbour, Hongkong",source:"@site/docs/Development/ReactNative/2022-05-03-react-native-contextapi/index.md",sourceDirName:"Development/ReactNative/2022-05-03-react-native-contextapi",slug:"/Development/ReactNative/2022-05-03-react-native-contextapi/2022-05-03",permalink:"/docs/Development/ReactNative/2022-05-03-react-native-contextapi/2022-05-03",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Development/ReactNative/2022-05-03-react-native-contextapi/index.md",tags:[{label:"Javascript",permalink:"/docs/tags/javascript"},{label:"React",permalink:"/docs/tags/react"},{label:"ReactNative",permalink:"/docs/tags/react-native"}],version:"current",sidebarPosition:9080,frontMatter:{sidebar_position:9080,slug:"2022-05-03",title:"React Native Context API",authors:"mpolinowski",tags:["Javascript","React","ReactNative"]},sidebar:"tutorialSidebar",previous:{title:"React Native Hooks",permalink:"/docs/Development/ReactNative/2022-05-04-react-native-hooks/2022-05-04"},next:{title:"React Native Navigation",permalink:"/docs/Development/ReactNative/2022-05-02-react-native-navigation/2022-05-02"}},l={},c=[{value:"Setup",id:"setup",level:2},{value:"Theming with Context",id:"theming-with-context",level:2},{value:"Accessing Context",id:"accessing-context",level:3},{value:"Static",id:"static",level:4},{value:"Context Consumer",id:"context-consumer",level:4},{value:"Toggling State",id:"toggling-state",level:2},{value:"Nesting Multiple Contexts",id:"nesting-multiple-contexts",level:2}],p={toc:c};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Victoria Harbour, Hongkong",src:n(44882).Z,width:"1500",height:"565"})),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#setup"},"Setup")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#theming-with-context"},"Theming with Context"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#accessing-context"},"Accessing Context"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#static"},"Static")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#context-consumer"},"Context Consumer")))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#toggling-state"},"Toggling State")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#nesting-multiple-contexts"},"Nesting Multiple Contexts"))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mpolinowski/react-native-contextapi"},"Github Repository")),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g expo-cli\nexpo init react-native-contextapi\n")),(0,a.kt)("p",null,"Choose the ",(0,a.kt)("strong",{parentName:"p"},"blank")," template and run the client:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd react-native-contextapi\nnpm install styled-components\nnpm start\n")),(0,a.kt)("p",null,"I can test code by scanning the QR Code using the ",(0,a.kt)("strong",{parentName:"p"},"Expo Go")," app under Android or by pressing the ",(0,a.kt)("inlineCode",{parentName:"p"},"w")," key to activate a web preview."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"error:0308010C:digital envelope routines::unsupported"),": Newer versions of Node.js use OpenSSLv3 that brought some ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.openssl.org/index.php/OpenSSL_3.0#Upgrading_to_OpenSSL_3.0_from_OpenSSL_1.0.2"},"breaking changes"),". Can be fixed (",(0,a.kt)("strong",{parentName:"p"},">=Nodejs v17"),") by adding the following option to the start script inside your ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," -> ",(0,a.kt)("inlineCode",{parentName:"p"},'"start": "export NODE_OPTIONS=--openssl-legacy-provider && expo start"'))),(0,a.kt)("h2",{id:"theming-with-context"},"Theming with Context"),(0,a.kt)("p",null,"Creating a context to provide a ",(0,a.kt)("strong",{parentName:"p"},"Dark")," / ",(0,a.kt)("strong",{parentName:"p"},"Light")," theme to an ReactNative App. Add a folder ",(0,a.kt)("inlineCode",{parentName:"p"},"context")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," directory of your app and create a file ",(0,a.kt)("inlineCode",{parentName:"p"},"ThemeContext.jsx"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {createContext, Component} from 'react'\n\nexport const ThemeContext = createContext()\n\nclass ThemeContextProvider extends Component {\n    state = {\n        isDarkTheme: true,\n        lightTheme: {\n            color: 'purple',\n            backgroundColor: 'snow'\n        },\n        darkTheme: {\n            color: 'plum',\n            backgroundColor: 'purple'\n        }\n    }\n\n    render() {\n        return (\n            <ThemeContext.Provider value={{ ...this.state }}>\n                {this.props.children}\n            </ThemeContext.Provider>\n        )\n    }\n }\n\n\nexport default ThemeContextProvider\n")),(0,a.kt)("p",null,"And inside your apps entry point, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"App.jsx")," wrap your code inside the theme provider:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import ThemeContextProvider from './src/context/ThemeContext'\n\nconst App = () => {\n  return (\n    <RootView>\n      <ThemeContextProvider>\n        <Navbar />\n        <TodoList />\n      </ThemeContextProvider>\n    </RootView>\n  );\n}\n\nexport default App\n")),(0,a.kt)("h3",{id:"accessing-context"},"Accessing Context"),(0,a.kt)("h4",{id:"static"},"Static"),(0,a.kt)("p",null,"Now both the apps navigation bar and todo list are children of the context provider. Which means that we have access to the state it is providing by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"this.context")," :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\n\nimport { TodoBackground, TodoItem } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\n\nclass ToDoList extends React.Component {\n    static contextType = ThemeContext\n    render() {\n\n        const { isDarkTheme, darkTheme, lightTheme } = this.context\n        // if isDarkTheme is true return dark state / else light\n        const theme = isDarkTheme ? darkTheme : lightTheme\n\n        return (\n            <TodoBackground style={theme}>\n                <TodoItem>One thing to do</TodoItem>\n                <TodoItem>Another thing to do</TodoItem>\n                <TodoItem>And one more thing</TodoItem>\n            </TodoBackground>\n        )\n    }\n}\n\nexport default ToDoList\n")),(0,a.kt)("h4",{id:"context-consumer"},"Context Consumer"),(0,a.kt)("p",null,"The disadvantage of the solution above is that you can only use it in class components. But there is another way that will also work in functional components using the context consumer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\n\nimport { NavBackground, NavHeader, NavTabs, NavTabsHeader } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\n\nclass Navbar extends React.Component {\n    render() {\n        \n        return (\n            <ThemeContext.Consumer >\n                {(context) => {\n                    const { isDarkTheme, darkTheme, lightTheme } = context\n                    // if isDarkTheme is true return dark state / else light\n                    const theme = isDarkTheme ? darkTheme : lightTheme\n                    return (\n                        <NavBackground style={theme}>\n                            <NavHeader style={theme}>Company Inc.</NavHeader>\n                            <NavTabs>\n                                <NavTabsHeader>Overview</NavTabsHeader>\n                                <NavTabsHeader>Contact</NavTabsHeader>\n                            </NavTabs>\n                        </NavBackground>\n                    )\n                }}\n            </ThemeContext.Consumer>\n        )\n    }\n }\n\n export default Navbar\n")),(0,a.kt)("h2",{id:"toggling-state"},"Toggling State"),(0,a.kt)("p",null,"We now need to add a function that allows the user to toggle the used theme by creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"changeTheme")," function inside our theme context provider and passing it through to all children:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {createContext, Component} from 'react'\n\nexport const ThemeContext = createContext()\n\nclass ThemeContextProvider extends Component {\n    state = {\n        isDarkTheme: true,\n        lightTheme: {\n            color: 'purple',\n            backgroundColor: 'snow',\n            text: 'Dark'\n        },\n        darkTheme: {\n            color: 'plum',\n            backgroundColor: 'purple',\n            text: 'Light'\n        }\n    }\n\n    changeTheme = () => {\n        // toggle theme to opposite when called\n        this.setState({isDarkTheme: !this.state.isDarkTheme})\n    }\n\n    render() {\n        return (\n            <ThemeContext.Provider value={{ ...this.state, changeTheme: this.changeTheme }}>\n                {this.props.children}\n            </ThemeContext.Provider>\n        )\n    }\n }\n\n\nexport default ThemeContextProvider\n")),(0,a.kt)("p",null,"I also added another variable to the state called ",(0,a.kt)("inlineCode",{parentName:"p"},"text")," that we can call on to add the button label to our theme toggle:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {Text} from 'react-native'\nimport { NavBackground, NavHeader, NavTabs, NavTabsHeader, ThemeToggle } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\n\nclass Navbar extends React.Component {\n    render() {\n        \n        return (\n            <ThemeContext.Consumer >\n                {(context) => {\n                    const { isDarkTheme, darkTheme, lightTheme, changeTheme } = context\n                    // if isDarkTheme is true return dark state / else light\n                    const theme = isDarkTheme ? darkTheme : lightTheme\n                    return (\n                        <NavBackground style={theme}>\n                            <NavHeader style={theme}>Company Inc.</NavHeader>\n                            <NavTabs>\n                                <NavTabsHeader>Overview</NavTabsHeader>\n                                <NavTabsHeader>Contact</NavTabsHeader>\n                                <ThemeToggle onPress={changeTheme}>\n                                    <Text>{theme.text}</Text>\n                                </ThemeToggle>\n                            </NavTabs>\n                        </NavBackground>\n                    )\n                }}\n            </ThemeContext.Consumer>\n        )\n    }\n }\n\n export default Navbar\n")),(0,a.kt)("h2",{id:"nesting-multiple-contexts"},"Nesting Multiple Contexts"),(0,a.kt)("p",null,"Let's add another context that holds the logged-in state of the user:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {createContext, Component} from 'react'\n\nexport const AuthContext = createContext()\n\nclass AuthContextProvider extends Component {\n    state = {\n        isLoggedIn: false\n    }\n\n    changeAuthStatus = () => {\n        this.setState({isLoggedIn: !this.state.isLoggedIn})\n    }\n\n    render() {\n        return (\n            <AuthContext.Provider value={{...this.state, changeAuthStatus: this.changeAuthStatus}}>\n                {this.props.children}\n            </AuthContext.Provider>\n        )\n    }\n}\n\nexport default AuthContextProvider\n")),(0,a.kt)("p",null,"We want the ToDo List hidden if the logged-in state is false so wrap the list inside the authentication context provider:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\n\nimport { RootView } from './src/components/_styles'\nimport ThemeContextProvider from './src/context/ThemeContext'\nimport AuthContextProvider from './src/context/AuthContext'\nimport Navbar from './src/components/Navbar'\nimport TodoList from './src/components/ToDo'\n\nconst App = () => {\n  return (\n    <RootView>\n      <ThemeContextProvider>\n        <Navbar />\n        <AuthContextProvider>\n          <TodoList />\n        </AuthContextProvider>\n      </ThemeContextProvider>\n    </RootView>\n  );\n}\n\nexport default App\n")),(0,a.kt)("p",null,"And the ToDo itself now needs to be wrapped inside the consumer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport {Text} from 'react-native'\n\nimport { TodoBackground, TodoItem, LoginView } from './_styles'\nimport { ThemeContext } from '../context/ThemeContext'\nimport { AuthContext } from '../context/AuthContext'\n\nclass ToDoList extends React.Component {\n    render() {\n        return (\n            <AuthContext.Consumer >\n                {(authContext) => {\n                    return (\n                        <ThemeContext.Consumer >\n                            {(themeContext) => {\n                                const { isLoggedIn, changeAuthStatus }  = authContext\n                                const { isDarkTheme, darkTheme, lightTheme } = themeContext\n                                // if isDarkTheme is true return dark state / else light\n                                const theme = isDarkTheme ? darkTheme : lightTheme\n                                if (isLoggedIn) {\n                                return (\n                                    <TodoBackground style={theme}>\n                                        <TodoItem>One thing to do</TodoItem>\n                                        <TodoItem>Another thing to do</TodoItem>\n                                        <TodoItem>And one more thing</TodoItem>\n                                        <TodoItem onPress={changeAuthStatus}>\n                                            <Text>Logout</Text>\n                                        </TodoItem>\n                                    </TodoBackground>\n                                )}\n                                return (\n                                    <LoginView>\n                                        <TodoItem onPress={changeAuthStatus}>\n                                            <Text>Login</Text>\n                                        </TodoItem>\n                                    </LoginView>\n                                )\n                            }}\n                        </ThemeContext.Consumer>   \n                    )\n                }}\n            </AuthContext.Consumer>\n        )\n    }\n}\n\nexport default ToDoList\n")))}m.isMDXComponent=!0},44882:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/photo-kt443t6d_64hdh43hfh6dgjdfhg4_d-23d027067cc9016279f834178a642545.jpg"}}]);