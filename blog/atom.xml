<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mpolinowski.github.io/blog</id>
    <title>Mike Polinowski Blog</title>
    <updated>2019-06-02T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mpolinowski.github.io/blog"/>
    <subtitle>Mike Polinowski Blog</subtitle>
    <icon>https://mpolinowski.github.io/img/icons/favicon-32x32.png</icon>
    <entry>
        <title type="html"><![CDATA[GitLab CI/CD]]></title>
        <id>typical_ci_process</id>
        <link href="https://mpolinowski.github.io/blog/typical_ci_process"/>
        <updated>2019-06-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[GitLab CI/CD]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="gitlab-cicd">GitLab CI/CD<a class="hash-link" href="#gitlab-cicd" title="Direct link to heading">​</a></h2><p>GitLab CI/CD is a tool built into GitLab for software development through the continuous methodologies:</p><ul><li>Continuous Integration (CI)</li><li>Continuous Delivery (CD)</li><li>Continuous Deployment (CD)</li></ul><p><strong>Note</strong>: Out-of-the-box management systems can decrease hours spent on maintaining toolchains by 10% or more. Watch our “Mastering continuous software development” webcast to learn about continuous methods and how GitLab’s built-in CI can help you simplify and scale software development.</p><ul><li><a href="#gitlab-cicd">GitLab CI/CD</a></li><li><a href="#overview">Overview</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#migrating-from-circleci">Migrating from CircleCI</a></li><li><a href="#concepts">Concepts</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#feature-set">Feature set</a></li><li><a href="#code-repository">Code repository</a></li><li><a href="#static-analysis">Static analysis</a></li><li><a href="#gradle-build-script-with-findbugs-and-checkstyle">Gradle build script with Findbugs and Checkstyle</a></li><li><a href="#-gradle-check">$ gradle check</a></li><li><a href="#packaging-and-deployment-to-the-teststaging-environment">Packaging and deployment to the test/staging environment</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a class="hash-link" href="#overview" title="Direct link to heading">​</a></h2><p>Continuous Integration works by pushing small code chunks to your application’s code base hosted in a Git repository, and, to every push, run a pipeline of scripts to build, test, and validate the code changes before merging them into the main branch.</p><p>Continuous Delivery and Deployment consist of a step further CI, deploying your application to production at every push to the default branch of the repository.</p><p>These methodologies allow you to catch bugs and errors early in the development cycle, ensuring that all the code deployed to production complies with the code standards you established for your app.</p><p>For a complete overview of these methodologies and GitLab CI/CD, read the Introduction to CI/CD with GitLab.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="getting-started">Getting started<a class="hash-link" href="#getting-started" title="Direct link to heading">​</a></h2><p>GitLab CI/CD is configured by a file called .gitlab-ci.yml placed at the repository’s root. This file creates a pipeline, which runs for changes to the code in the repository. Pipelines consist of one or more stages that run in order and can each contain one or more jobs that run in parallel. These jobs (or scripts) get executed by the GitLab Runner agent.</p><p>To get started with GitLab CI/CD, we recommend you read through the following documents:</p><ul><li>How GitLab CI/CD works.</li><li>Fundamental pipeline architectures.</li><li>GitLab CI/CD basic workflow.</li><li>Step-by-step guide for writing .gitlab-ci.yml for the first time.</li></ul><p>If you’re migrating from another CI/CD tool, check out our handy references:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="migrating-from-circleci">Migrating from CircleCI<a class="hash-link" href="#migrating-from-circleci" title="Direct link to heading">​</a></h2><p>Migrating from Jenkins
You can also get started by using one of the .gitlab-ci.yml templates available through the UI. You can use them by creating a new file, choosing a template that suits your application, and adjusting it to your needs:</p><p><img loading="lazy" alt="Gitlab CI" src="/assets/images/gitlab-ci-yml-39aa867cf00d68637e5554ba9a0633a8.png" width="2872" height="960" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="concepts">Concepts<a class="hash-link" href="#concepts" title="Direct link to heading">​</a></h2><p>GitLab CI/CD uses a number of concepts to describe and run your build and deploy.</p><table><thead><tr><th>Concept</th><th>Description</th></tr></thead><tbody><tr><td>Pipelines</td><td>Structure your CI/CD process through pipelines.</td></tr><tr><td>Environment variables</td><td>Reuse values based on a variable/value key pair.</td></tr><tr><td>Environments</td><td>Deploy your application to different environments (e.g., staging, production).</td></tr><tr><td>Job artifacts</td><td>Output, use, and reuse job artifacts.</td></tr><tr><td>Cache dependencies</td><td>Cache your dependencies for a faster execution.</td></tr><tr><td>GitLab Runner</td><td>Configure your own runners to execute your scripts.</td></tr><tr><td>Pipeline efficiency</td><td>Configure your pipelines to run quickly and effienctly.</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuration">Configuration<a class="hash-link" href="#configuration" title="Direct link to heading">​</a></h2><p>GitLab CI/CD supports numerous configuration options:</p><table><thead><tr><th>Configuration</th><th>Description</th></tr></thead><tbody><tr><td>Schedule pipelines</td><td>Schedule pipelines to run as often as you need.</td></tr><tr><td>Custom path for .gitlab-ci.yml</td><td>Define a custom path for the CI/CD configuration file.</td></tr><tr><td>Git submodules for CI/CD</td><td>Configure jobs for using Git submodules.</td></tr><tr><td>SSH keys for CI/CD</td><td>Using SSH keys in your CI pipelines.</td></tr><tr><td>Pipeline triggers</td><td>Trigger pipelines through the API.</td></tr><tr><td>Pipelines for Merge Requests</td><td>Design a pipeline structure for running a pipeline in merge requests.</td></tr><tr><td>Integrate with Kubernetes clusters</td><td>Connect your project to Google Kubernetes Engine (GKE) or an existing Kubernetes cluster.</td></tr><tr><td>Optimize GitLab and GitLab Runner for large repositories</td><td>Recommended strategies for handling large repositories.</td></tr><tr><td>.gitlab-ci.yml full reference</td><td>All the attributes you can use with GitLab CI/CD.</td></tr></tbody></table><p>Note that certain operations can only be performed according to the user and job permissions.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="feature-set">Feature set<a class="hash-link" href="#feature-set" title="Direct link to heading">​</a></h2><p>Use the vast GitLab CI/CD to easily configure it for specific purposes. Its feature set is listed on the table below according to DevOps stages.</p><table><thead><tr><th>Feature</th><th>Description</th></tr></thead><tbody><tr><td>Configure</td><td></td></tr><tr><td>Auto DevOps</td><td>Set up your app’s entire lifecycle.</td></tr><tr><td>ChatOps</td><td>Trigger CI jobs from chat, with results sent back to the channel.</td></tr><tr><td>Verify</td><td></td></tr><tr><td>Browser Performance Testing</td><td>Quickly determine the browser performance impact of pending code changes.</td></tr><tr><td>Load Performance Testing</td><td>Quickly determine the server performance impact of pending code changes.</td></tr><tr><td>CI services</td><td>Link Docker containers with your base image.</td></tr><tr><td>Code Quality</td><td>Analyze your source code quality.</td></tr><tr><td>GitLab CI/CD for external repositories</td><td>Get the benefits of GitLab CI/CD combined with repositories in GitHub and Bitbucket Cloud.</td></tr><tr><td>Interactive Web Terminals</td><td>Open an interactive web terminal to debug the running jobs.</td></tr><tr><td>Unit test reports</td><td>Identify script failures directly on merge requests.</td></tr><tr><td>Using Docker images</td><td>Use GitLab and GitLab Runner with Docker to build and test applications.</td></tr><tr><td>Release</td><td></td></tr><tr><td>Auto Deploy</td><td>Deploy your application to a production environment in a Kubernetes cluster.</td></tr><tr><td>Building Docker images</td><td>Maintain Docker-based projects using GitLab CI/CD.</td></tr><tr><td>Canary Deployments</td><td>Ship features to only a portion of your pods and let a percentage of your user base to visit the temporarily deployed feature.</td></tr><tr><td>Deploy Boards</td><td>Check the current health and status of each CI/CD environment running on Kubernetes.</td></tr><tr><td>Feature Flags</td><td>Deploy your features behind Feature Flags.</td></tr><tr><td>GitLab Pages</td><td>Deploy static websites.</td></tr><tr><td>GitLab Releases</td><td>Add release notes to Git tags.</td></tr><tr><td>Review Apps</td><td>Configure GitLab CI/CD to preview code changes.</td></tr><tr><td>Cloud deployment</td><td>Deploy your application to a main cloud provider.</td></tr><tr><td>Secure</td><td></td></tr><tr><td>Container Scanning</td><td>Check your Docker containers for known vulnerabilities.</td></tr><tr><td>Dependency Scanning</td><td>Analyze your dependencies for known vulnerabilities.</td></tr><tr><td>License Compliance</td><td>Search your project dependencies for their licenses.</td></tr><tr><td>Security Test reports</td><td>Check for app vulnerabilities.</td></tr></tbody></table><p>#####################</p><p>Continuous Integration (CI) is a phase in the software development cycle where code from different team members or different features are integrated together. This usually involves merging code (integration), building the application and carrying out basic tests all within an ephemeral environment.</p><p>In the past, the code was integrated at an “integration phase” of the software development life cycle. This phase came after different teams would have spent weeks, months or even years working in separately, dedicated to different (parts of) application or services. You can guess how painful the integration phase of the project would have been. It was not uncommon to spend weeks or even months in this phase. This was during the waterfall era.</p><p>With Extreme Programming (XP) and agile, integration became frequent with developers integrating as often as possible usually soon after a unit is complete. This is done on the shared source code repository. The frequent integration became automated and continuous which prompted the need for some kind of checks before the new code is integrated. Thus, Continuous Integration.</p><p>CI workflows vary a lot depending on tools, programming language, project and many other factors but a common flow has these steps.</p><ul><li>Pushing to the code repository</li><li>Static analysis</li><li>Pre-deployment testing</li><li>Packaging and deployment to the test environment</li><li>Post-deployment testing</li></ul><p>Let’s take a look at how this flow would work on a java project with Gradle as the build tool.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="code-repository">Code repository<a class="hash-link" href="#code-repository" title="Direct link to heading">​</a></h2><p>Typically, there would have a code repository and some kind of workflow for contributing new code. Depending on the workflow, committing code kicks off the CI pipeline, which often starts with static code analysis. You could refer to this post to help choose an appropriate workflow.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="static-analysis">Static analysis<a class="hash-link" href="#static-analysis" title="Direct link to heading">​</a></h2><p>Static (code) analysis is done on the code base of the application without the need to run the software. The goal here is to ensure the code doesn’t have possible bugs and conforms to standard formatting and styling.</p><p>Let’s add FindBugs to check for possible errors and Checkstyle to ensure the project conforms to coding standard (we’ll use the Google Java Style).</p><p>The Gradle build script would be something like this:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">apply plugin: 'java'</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">apply plugin: 'findbugs'</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">apply plugin: 'checkstyle'</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">repositories {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    mavenCentral()</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dependencies {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">tasks.withType(FindBugs) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  reports {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    xml.enabled false</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    html.enabled true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">tasks.withType(Checkstyle) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  reports {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    xml.enabled false</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    html.enabled true</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="gradle-build-script-with-findbugs-and-checkstyle">Gradle build script with Findbugs and Checkstyle<a class="hash-link" href="#gradle-build-script-with-findbugs-and-checkstyle" title="Direct link to heading">​</a></h2><p>To complete the Checkstyle configuration, we’ll need to add a Checkstyle configuration file to the project path config/checkstyle/checkstyle.xml. There’s a sample config file on GitHub based on the Google Java style. With FindBugs and Checkstyle configured, static analysis can now be run:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-gradle-check">$ gradle check<a class="hash-link" href="#-gradle-check" title="Direct link to heading">​</a></h2><p>At this phase, any test that could be run without deploying to a server should be. This will include unit tests and various other types of tests (maybe functional or integration). This phase is used to ensure that the change set doesn’t break functionalities and works well with other parts code since the tests are run on the whole code base, not just the new changes (as the author might have done on the dev env).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="packaging-and-deployment-to-the-teststaging-environment">Packaging and deployment to the test/staging environment<a class="hash-link" href="#packaging-and-deployment-to-the-teststaging-environment" title="Direct link to heading">​</a></h2><p>Depending on the kind of project, the application is built, packaged, sent to a test or staging environment (that mimics production). This ensures that the integrated changes build well with other parts and can be deployed for a functional test can to be carried out. It’s at this phase that we also verify that the new changes are compatible with other libraries and the deployment environment. This is phase should also automated.</p><p>For tests that need the application to be deployed, this phase of the CI pipeline is where they’re run. The tests vary depending on tools, frameworks, and language of the application but they’re usually functional integration and performance tests. Successful execution of this phase ends the CI pipeline for the changeset signalling it’s good enough for users.</p><p>Once the CI pipeline completes successfully, the deployed application could undergo a manual test by a “user” or the QA team to ensure that it fits the client’s requirements. The packages or artifacts generated by the CI pipeline can now be taken/deployed to production. This can also be automated with a successful implementation of a Continuous Delivery (CD) pipeline.</p><p>Hope you find this useful. look forward to seeing how this is implemented for different projects.</p>]]></content>
        <author>
            <name>Mike Polinowski</name>
            <uri>https://github.com/mpolinowski</uri>
        </author>
        <category label="DevOps" term="DevOps"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is meant by CI/CD?]]></title>
        <id>continuous-integration</id>
        <link href="https://mpolinowski.github.io/blog/continuous-integration"/>
        <updated>2019-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is meant by CI/CD?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-meant-by-cicd">What is meant by CI/CD?<a class="hash-link" href="#what-is-meant-by-cicd" title="Direct link to heading">​</a></h2><p>This is a method of regularly delivering apps to customers and automating all phases of application development. The main concepts of CI/CD are Continuous Integration, Continuous Delivery and Continuous Deployment. CI/CD solves the problems that integrating new code can cause for DevOps teams (also known as "integration hell").</p><p>In particular, CI/CD ensures continuous automation and monitoring throughout the entire app lifecycle, from the integration and testing to the deployment and implementation phase. These interrelated practices are often referred to as the "CI/CD pipeline" and are supported by agile collaboration between DevOps teams.</p><ul><li><a href="#what-is-meant-by-cicd">What is meant by CI/CD?</a><ul><li><a href="#what-is-the-difference-between-ci-and-cd-and-the-other-cd">What is the difference between CI and CD (and the other CD)?</a></li></ul></li><li><a href="#cicd-pipeline">CI/CD Pipeline</a></li><li><a href="#continuous-integration">Continuous Integration</a></li><li><a href="#technical-details">Technical Details</a><ul><li><a href="#continuous-delivery">Continuous Delivery</a></li><li><a href="#continuous-deployment">Continuous Deployment</a></li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-the-difference-between-ci-and-cd-and-the-other-cd">What is the difference between CI and CD (and the other CD)?<a class="hash-link" href="#what-is-the-difference-between-ci-and-cd-and-the-other-cd" title="Direct link to heading">​</a></h3><p>The abbreviation CI/CD has different meanings. "CI" means Continuous Integration, i.e. the automation process for developers. In a successful CI, new code changes for apps are regularly developed, checked and merged in a common repository. This is intended to prevent the conflict that too many branches of an app can cause if they are developed simultaneously.</p><p>"CD" means Continuous Delivery or Continuous Deployment. These are related concepts that are sometimes used synonymously. Although both concepts deal with the automation of further phases of the pipeline, the terms are sometimes used differently to illustrate the extent of automation.</p><p>Continuous delivery typically means that a developer's app changes are automatically tested for bugs and uploaded to a repository (such as GitHub or a container registry) from where they can be deployed by the operations team in a live production environment. This process is the answer to transparency and communication problems between dev and business teams. It is designed to ensure that new code can be implemented with minimal effort.</p><p>Continuous Deployment (the other "CD") can refer to the automatic release of developer changes from the repository to the production phase, where they can be used directly by the customer. This process is intended to counteract the overload of operations teams during manual processes that slow down application deployment. Continuous Development extends the benefits of continuous delivery by automating the next phase of the pipeline.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cicd-pipeline">CI/CD Pipeline<a class="hash-link" href="#cicd-pipeline" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="CI/CD Pipeline" src="/assets/images/ci-cd-pipeline-9c85177895b9fbefdad1e4135d64445c.png" width="826" height="218" class="img_ev3q"></p><p>Sometimes CI/CD refers only to the interrelated practices of Continuous Integration and Continuous Delivery, but sometimes it also refers to all three concepts of Continuous Integration, Continuous Delivery and Continuous Deployment. The whole thing is further complicated by the fact that Continuous Delivery sometimes also refers to the processes of Continuous Deployment.</p><p>Ultimately, however, these details do not get us anywhere. Just think of CI/CD as a process that is often visualized as a pipeline and that involves a high degree of continuous automation and monitoring in application development. Depending on the case, the interpretation of the term depends on the degree of automation of the CI/CD pipeline. Many companies initially work with CI and later continue the process with automated deployment and implementation, e.g. for cloudnative apps.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="continuous-integration">Continuous Integration<a class="hash-link" href="#continuous-integration" title="Direct link to heading">​</a></h2><p>In modern application development, several developers work on different features of the same app. The simultaneous merging of all source code branches in one day (also known as "Merge Day") can be a huge amount of work and time. The reason for this is that application changes made by developers working separately can conflict with each other if they are performed simultaneously. This problem can be aggravated if each developer defines his own local Integrated Development Environment (IDE) instead of creating a common cloud-based IDE as a team.</p><p>Continuous Integration (CI) allows developers to merge their code changes into a common "branch" or "trunk" of the application much more frequently, sometimes even daily. Once a developer's changes are merged, they are validated in automated app builds and different levels of automation testing (typically unit and integration testing). This ensures that functionality has not been compromised. All classes and functions up to the various modules of the app must be tested. If the automated test detects conflicts between current and new code, CI can help resolve them more quickly and frequently.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="technical-details">Technical Details<a class="hash-link" href="#technical-details" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="continuous-delivery">Continuous Delivery<a class="hash-link" href="#continuous-delivery" title="Direct link to heading">​</a></h3><p>After automating builds and unit and integration testing for the CI, continuous delivery also automatically releases the validated code to a repository. Therefore, to ensure an efficient continuous delivery process, the CI must already be integrated into your development pipeline. The goal of continuous delivery is a code base that can be made available in a production environment at any time.</p><p>With continuous delivery, every phase - from merging code changes to delivering production-ready builds - includes automated testing and code releases. At the end of this process, the operations team can quickly and easily deploy an app into production.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="continuous-deployment">Continuous Deployment<a class="hash-link" href="#continuous-deployment" title="Direct link to heading">​</a></h3><p>The final phase of the CI/CD pipeline is Continuous Deployment. As an extension of Continuous Delivery, in which production-ready builds are automatically released to a code repository, Continuous Deployment also automates the release of an app into the production phase. Because the production phase in the pipeline is not preceded by a manual gate, automated testing must always be well thought through in continuous deployment.</p><p>In practice, continuous deployment means that a developer's app changes can go live within minutes of their creation (provided they pass the automated test). This makes continuous integration of user feedback much easier. All these interrelated CI/CD practices make an application implementation less risky because changes are released in parts rather than all at once. However, the up-front investment is considerable, since automatic tests must be written for the various test and release phases in the CI/CD pipeline.</p>]]></content>
        <author>
            <name>Mike Polinowski</name>
            <uri>https://github.com/mpolinowski</uri>
        </author>
        <category label="DevOps" term="DevOps"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Application Development and Server Operation]]></title>
        <id>devops-introduction</id>
        <link href="https://mpolinowski.github.io/blog/devops-introduction"/>
        <updated>2019-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I just want to build something useful]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="i-just-want-to-build-something-useful">I just want to build something useful<a class="hash-link" href="#i-just-want-to-build-something-useful" title="Direct link to heading">​</a></h2><p>Coming from a conservative country I was raised with a strong sensibility for the separation of concerns - put your inline CSS into a style sheet, let the computer scientist handle the shopping list for new office computers and never even think about putting the salt shaker into the spice rack! Salt belongs to MSG and sugar rack on the right.</p><p>So is DevOps really the monster it is made out to be? Is a backend developer able to design a usable user interface and will a frontend dev bring down the whole service by ignoring best practices of harding the server before uploading his application?</p><blockquote><p>How does a Jack-of-all-Trades handle a specific task compared to a specialist?</p></blockquote><ul><li><a href="#application-development-and-server-operation">Application Development and Server Operation</a><ul><li><a href="#i-just-want-to-build-something-useful">I just want to build something useful</a><ul><li><a href="#the-curse">The Curse</a></li><li><a href="#the-cure">The Cure</a></li><li><a href="#the-future">The Future</a></li></ul></li><li><a href="#so-what-do-i-really-need-to-know">So what do I really need to know?</a><ul><li><a href="#server-security">Server Security</a></li><li><a href="#server-monitoring">Server Monitoring</a></li><li><a href="#continous-integration">Continous Integration</a></li><li><a href="#state-management">State Management</a></li><li><a href="#web-application">Web Application</a></li></ul></li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-curse">The Curse<a class="hash-link" href="#the-curse" title="Direct link to heading">​</a></h3><p>When you start out as a backend server admin it can be frustrating to get started on your own. I was always the guy who did not dive into the details but wanted to learn skills that allowed me to build something. As a backend engineer this lead you down the road of setting up a webserver, maybe even a cluster of servers that exchange information through micro services. You might even add hardened military grade security so that not even that Nigerian prince, everyone is talking about, can hack his way into your Cloud Servers. Amazing! But what now?</p><p>Or you start our at the frontend of things. You saw this beautiful website - all those smooth animations, beautiful colour palets and responsiveness. That is what you want to learn how to create yourself. And after months of hard work you figured out your stack, you put it all together and your page looks amazing! But what now?</p><p>Backend and frontend belong together but they - literally - do not even speak the same language...</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-cure">The Cure<a class="hash-link" href="#the-cure" title="Direct link to heading">​</a></h3><p>When I started out there was still this divide and the internet was full of memes about sysadmins being unable to grasp the necessities of modern web applications - there must have been memes coming in from the backend as well... I just did not get the IRC invite.</p><p>But there was also a new shining light on the horizon:</p><blockquote><p>Why don't you do it in Javascript?</p></blockquote><p>I fell in love with React frontends right away. Then learning that you can use a Node.js backend to drive your application - that sounded just like the solution I was looking for.</p><p>The first full-stack web application I ever wrote for my company was a Node.js/Express.js knowledge base. Just a bunch of EJS pages served by a Javascript backend. I never looked back to the old times since.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-future">The Future<a class="hash-link" href="#the-future" title="Direct link to heading">​</a></h3><p>I have - so far - never worked on a web project that reached the limitations of a Javascript backend. I am aware that they are there. But breaking down my applications into small, single purpose services has prevented me from bumping into them.</p><p>There is one trend that is slowly creeping it's way into my work, though. The backend itself is slowly abstracted away from me. First I started to wrap my code into Containers - because that was convenient. And now I am supposed to com up with solutions to keep an eye on my swarm of little virtual minions. The big <strong>K</strong> arrived. Written in the Go language and complex to the degree of a Google Megacorp server center. And all controllable by the magic word <code>kubectl</code>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-what-do-i-really-need-to-know">So what do I really need to know?<a class="hash-link" href="#so-what-do-i-really-need-to-know" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="server-security">Server Security<a class="hash-link" href="#server-security" title="Direct link to heading">​</a></h3><p>In a true sysadmin fashion - let's start with fighting the dark minions of Mordor.</p><p>I remember back in the days of Windows 95 - when I set up a new PC at my workplace and plugged it into the university network... It died. The network was so overloaded with virtual pathogens that you first had to find a way to update your Windows <strong>offline</strong> to the newest version, add a firewall and a solid virus scanner. And then you could plug it into the network.</p><blockquote><p>Welcome to the Internet</p></blockquote><p>Securing your server is mandatory. Even if it is just your personal playground. It is valuable training to keep your system updated (which sometimes kills your application and has you hunt down insects in your code) and maintain a sensible degree of security:</p><ul><li><strong>Randomly generate a long SSH login</strong>: There are ways to use those without memorizing them - so make them hard... so to speak.</li><li><strong>Change your default ports</strong>: When an evildoer decides to attack your server, it does not matter where you put your SSH port - she will find it. But most attacks that I witnessed were executed by bots. Those bots just rattle your cage and see if they can find a weakness. If they can't find one fast enough they move on. If they can't find your SSH port automatically, they don't bother to return.</li><li><strong>A Mould with Crocodiles and a Wall of Fire</strong>: Your server is your castle. Make sure that the only ports that are opened are the ones that your application needs to communicate with the world. Those entry point can be hardened against brute force and denial-of-service attacks.</li><li><strong>Keep your Software Up2Date</strong>: There are many reasons why your server still runs a system that is 5 years old and was never updated or restarted. Such servers are kept caged in inside your local network. Every server that communicates with the world is kept fresh.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="server-monitoring">Server Monitoring<a class="hash-link" href="#server-monitoring" title="Direct link to heading">​</a></h3><p>When you have your first 1, 2 or 3 servers to maintain it is exciting! The first thing you do in the morning is to check all of them, run the commands to see that everything is still running and happy and check the log files for anomalies. Once you have more than 10 under your control you do not do that anymore. You need a server dashboard that gives you the all-green and you are good to go.</p><p>I did try out a few Kubernetes based monitoring tools and they are fantastic. You get everything you need at a glance. And since it is Kubernetes you usually just see that there was an issue and it was fixed 20ms later.</p><p>But I consider myself lucky to have worked for companies that still maintained their own servers - things still had to be done by hand. Giving you an inside into what tools like Kubernetes present to you as a magic blackbox.</p><p>There isn't a shortage of tools that install agents on your server that report to a master dashboard. They can be configured to monitor your server hardware and web services. Making sure that everything is running smoothly.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="continous-integration">Continous Integration<a class="hash-link" href="#continous-integration" title="Direct link to heading">​</a></h3><blockquote><p>The time of major releases is over!</p></blockquote><p>There is no longer a new Windows every 2 years - now it is Windows 10 and it stays that way. <strong>Continous Integration</strong> (CI) means that you commit your edited source code today. It will be tested, automatically over night and be deployed before you return the next day - or if that sounds scary to you, there might be a blinking button waiting for you to start the deployment whenever you are ready.</p><p>What do you need to achieve this? </p><ul><li>A source control system that keeps track of your changes</li><li>A tool that receives your source code and runs a build for you</li><li>A testing suite that knows what the release should be able to do</li><li>A containerized solution to swap in your new code without interrupting your service</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="state-management">State Management<a class="hash-link" href="#state-management" title="Direct link to heading">​</a></h3><p>Just like Server Management, State Management frees up your hands when you start to become overwhelmed with the amount of servers that you have to maintain. There will be the point where you are no longer able to be logged into every server, see drop-outs and react in second notice.</p><p>Again, Kubernetes handles most of that for you. But since we are dealing with a classical setup here - we do it ourself. State management tools are often configured by something like a YAML file (ever wondered where Kubernetes got all those ideas from?). And the state that is configured could be, e.g. install a webserver, copy a configuration file to the conf folder and some HTML content to the serve folder, when done run the server as a system service, if a new configuration file becomes available upload it to the server and restart the service, etc...</p><p>State management often overlaps with CI/CD pipelines. Or it can be the <strong>Continous Deployment</strong> (CD) part of that pipeline. The selection of tools available can be a bit overwhelming ~ similar to Server Management tools. But you will quickly find out that all of the do the same thing with different naming conventions and slightly different looking config files. Just make sure that the program you choose integrates well into the rest of your pipeline and that the rest of the team is comfortable with it.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="web-application">Web Application<a class="hash-link" href="#web-application" title="Direct link to heading">​</a></h3><p>Most modern "website" is now applications. Gone are the days where all you needed to set up a site was HTML, CSS and maybe some jQuery for a fancy accordion animation inside your navigation menu.</p><p>An web application connects your user to databases, services that he can use e.g. to authenticate himself and delivers a rich interface that sometimes looks and behaves more like a desktop application than a website.</p><p>How to set up a web application broadly differs depending on what kind of services you want to provide. But the basic ingredients of every application are:</p><ul><li><strong>Database</strong>: To store your page data as well as data generated by user interactions</li><li><strong>Webserver</strong>: It doesn't matter if you prefer NGINX, Apache or Express.js, your interface needs to be served</li><li><strong>Frontend</strong>: If your backend speaks Javascript it makes sense to have flavour of JS in your frontend as well - React, Angular, Vue</li></ul>]]></content>
        <author>
            <name>Mike Polinowski</name>
            <uri>https://github.com/mpolinowski</uri>
        </author>
        <category label="DevOps" term="DevOps"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Modern Web]]></title>
        <id>the-modern-web</id>
        <link href="https://mpolinowski.github.io/blog/the-modern-web"/>
        <updated>2019-05-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[When websites stopped being simple fixed HTML layouts with hyperlinks they called it Web 2.0. What number are we at now? I must have lost count. I have learnt HTML5 and CSS3 on my own long before I had to use it professionally. And once I started being asked to provide solutions for web projects... those no longer seemed to matter much. Sure JSX vaguely resembles HTML5 and CSSinJS - well, if you squint your eyes a little you might find things that sound familiar.]]></summary>
        <content type="html"><![CDATA[<p>When websites stopped being simple fixed HTML layouts with hyperlinks they called it <strong>Web 2.0</strong>. What number are we at now? I must have lost count. I have learnt HTML5 and CSS3 on my own long before I had to use it professionally. And once I started being asked to provide solutions for web projects... those no longer seemed to matter much. Sure JSX vaguely resembles HTML5 and CSS<code>in</code>JS - well, if you squint your eyes a little you might find things that sound familiar.</p><h1>The Modern Web</h1><ul><li><a href="#the-modern-web">The Modern Web</a><ul><li><a href="#choose-you-stack">Choose you Stack</a></li><li><a href="#what-makes-a-web-application">What makes a Web Application</a></li><li><a href="#downfalls">Downfalls</a></li></ul></li></ul><blockquote><p>The day the web changed - but did it become better?</p></blockquote><p>When I got first in contact with web development in an professional setting I thought that it was very <code>clonky</code>, all those jQuery components were limiting and bleeding CSS an absolute nightmare. The first time that I felt love for something in the webdev field was due to my encounter with <strong>Twitter Bootstrap</strong>. Responsive web pages - I could not get enough of it. And the second time - <strong>Facebook React</strong>.</p><p>A modern website often resembles more a desktop application. Gone are the days of the destruction of the DOM between page loads. Clicking on buttons now loads the content you want to see without you having to stare at a white page transition. You type in a search query and the results appear, magically a few seconds later.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="choose-you-stack">Choose you Stack<a class="hash-link" href="#choose-you-stack" title="Direct link to heading">​</a></h2><p>Your first step into the modern WebDev mine field can be daunting. Not only are there already thousands of libraries and hundreds of Frameworks that are in regular use in the industry. But there will be a new one every day in your inbox and some of them just look so tempting. You really want to add all of them to your web project and bedazzle your users as well as your coworkers.</p><p>But you will quickly learn that learning all of them is not an option - there are too many. And the quality and longevity of them varies widely. And then there is the job perspective - what libraries / frameworks are in demand in your area? You will not be able to pass the screening process if you lean to heavy on exotics.</p><p>A stack is a combination of - let's call them - tools then can be combined to build a full-stack web application from top to bottom. An example is the <strong>MERN Stack</strong>. The acronym describes a tool stack consisting of:</p><ul><li><strong>MongoDB</strong> for your page data__, </li><li><strong>Express.js</strong> as a webserver for you application</li><li><strong>React.js</strong> to build your frontend user interface and connect to your database</li><li><strong>Node.js</strong> the backend that drives your application</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-makes-a-web-application">What makes a Web Application<a class="hash-link" href="#what-makes-a-web-application" title="Direct link to heading">​</a></h2><p>The uninitiated use might be surfing amazon.com and still considering it to be a website. But on the other hand, if you show him a "real" website you cooked yourself in 5 minutes based on simple HTML/CSS + a fancy jQuery accordion for your site nav, he will probably not be impressed and agree that there is an obvious difference between them.</p><p>So what makes a website a web application? To be honest I don't know if there is a list you have to comply with. It is a very soft discriminator. For me, I have an image in my mind how a smartphone app or desktop application works. When a website shows a similar behaviour then it is a web application. What are tools that can give you the <code>application</code> <em>look&amp;feel</em> ?</p><ul><li><strong>Reactive Interface</strong>: React, Angular, Vue und Co. allow you to write webpages that no longer navigate between pages. You whole application can be on a single URL (<strong>SPA</strong>; <em>Single Page Application</em>). Interaction that require your app to get new data now trigger a background service to take care of everything. Once the data arrives every element that relies on this new data will be re-rendered. The trick is now to break up your page into small components so that your user faces a mostly static interface - just like you would expect a desktop to behave.</li><li><strong>Offline Support</strong>: A smartphone app, even if it partly relies on an online API, can be launched and partly used when you are offline - only online features will result in an loading animation or error message. Websites have always been dead when you cut your internet. Not anymore! <strong>Service Worker</strong> now take over the loading and caching of data from your web browser. Such a worker can be embedded inside your web app and cache the complete content making everything available offline. A use case would be a webUI for an IoT device. The data that has to be cached is minimal and it won't disturb your smartphones cache management system. Whenever you open the URL to your web cam, the interface will be available instantly - just like a native smartphone app. Service worker also add support for background downloads of new data, that will only be displayed once the download is completed.</li><li><strong>API Interaction</strong>: A webapp can interact with your backend and apply some logic to it. For example you can show different content based on user permission, fetch data from different sources and combine them in one dashboard, allow the user to interact with this data and send updates back to your backend services,...</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="downfalls">Downfalls<a class="hash-link" href="#downfalls" title="Direct link to heading">​</a></h2><blockquote><p>Should I now build Web Applications for everything?</p></blockquote><p>Yes, absolutely :)</p><p>So what are the problems we might encounter with web apps? Surely there is a higher degree of complexity that needs to be created, maintained and executed. In general it is said that webapps are slow loading and this is true. When you enter a HTML webpage you only download whatever is displayed on that page. With a webapp you have to download the complete application code (think of downloading an <code>*.exe</code> file on Windows before you are able to start the application).</p><p>So how can we solve those issues?</p><ul><li><strong>Complexity &amp; Maintenance</strong>: This is an issue. If you don't have a full-stack team in place that uses your choice of Stack to solve everything (so having the necessary experience) I would not recommend building a web application. The KISS principle applies.If you worry about your marketing team (without webdev experience) having to maintain the page content - that is not a problem. Once you have your application in place you can e.g. use Markdown to create new content - all you need for that is some MS Word skills (see. JAM Stack).</li><li><strong>Slow First Page Prints</strong>: If all you need is some static web content going with a web application was hard to recommend as download speeds take a bad hit once you add application logic. Of course only for the first page load - once everything is in place the application can dramatically improve your user experience. Even if it is just loading some static content in a very elegant way. The issue is solved once you start using <strong>Server Side Rendering (SSR)</strong>. Combining both worlds a SSR web application will first serve a static HTML version of itself and then start loading the application part in the background. The static version will be replaced by the interactive one as soon as the code download is completed.</li></ul>]]></content>
        <author>
            <name>Mike Polinowski</name>
            <uri>https://github.com/mpolinowski</uri>
        </author>
        <category label="Development" term="Development"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MDX Blog Post]]></title>
        <id>mdx-blog-post</id>
        <link href="https://mpolinowski.github.io/blog/mdx-blog-post"/>
        <updated>2017-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Flip Cards]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flip-cards">Flip Cards<a class="hash-link" href="#flip-cards" title="Direct link to heading">​</a></h3><div style="display:flex;flex-flow:row wrap;justify-content:space-between;align-content:flex-start;margin-bottom:15px;width:100%"><div class="react-card-flip" style="perspective:1000px;z-index:auto"><div class="react-card-flipper" style="height:100%;position:relative;width:100%"><div class="react-card-front" style="-webkit-backface-visibility:hidden;backface-visibility:hidden;height:100%;left:0;position:relative;top:0;transform:rotateY(0deg);transform-style:preserve-3d;transition:0.6s;width:100%;z-index:2"><div style="padding:20px;margin-bottom:20px;width:300px;height:300px;border-radius:15px;box-shadow:0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.54), 0px 1px 3px 0px rgba(0, 0, 0, 0.12)" class="CardFront"><div><h3>A Flip Card</h3><ul><li>Some shocking information</li><li>Some filler content with product placements</li><li>And now the evidence</li></ul></div></div></div><div class="react-card-back" style="-webkit-backface-visibility:hidden;backface-visibility:hidden;height:100%;left:0;position:absolute;top:0;transform:rotateY(-180deg);transform-style:preserve-3d;transition:0.6s;width:100%"><div style="padding:20px;margin-bottom:20px;width:300px;height:300px;border-radius:15px;box-shadow:0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.54), 0px 1px 3px 0px rgba(0, 0, 0, 0.12)" class="CardBack"><h3>A Flip Card</h3><img width="250" src="/img/worldmap_hk.png" alt="image"><p>Curabitur tempus elit odio, ut commodo eget scelerisque et.</p></div></div></div></div><div class="react-card-flip" style="perspective:1000px;z-index:auto"><div class="react-card-flipper" style="height:100%;position:relative;width:100%"><div class="react-card-front" style="-webkit-backface-visibility:hidden;backface-visibility:hidden;height:100%;left:0;position:relative;top:0;transform:rotateY(0deg);transform-style:preserve-3d;transition:0.6s;width:100%;z-index:2"><div style="padding:20px;margin-bottom:20px;width:300px;height:300px;border-radius:15px;box-shadow:0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.54), 0px 1px 3px 0px rgba(0, 0, 0, 0.12)" class="CardFront"><div><h3>This is another Flip Card</h3><ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></div></div></div><div class="react-card-back" style="-webkit-backface-visibility:hidden;backface-visibility:hidden;height:100%;left:0;position:absolute;top:0;transform:rotateY(-180deg);transform-style:preserve-3d;transition:0.6s;width:100%"><div style="padding:20px;margin-bottom:20px;width:300px;height:300px;border-radius:15px;box-shadow:0px 2px 1px -1px rgba(0, 0, 0, 0.2), 0px 1px 1px 0px rgba(0, 0, 0, 0.54), 0px 1px 3px 0px rgba(0, 0, 0, 0.12)" class="CardBack"><h3>This is another Flip Card</h3><img width="250" src="/img/worldmap_hk.png" alt="image"><p>Nullam porta magna nulla, ut aliquet Vestibulum semper tortor.</p></div></div></div></div></div><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Use the power of React to create interactive blog posts.</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token operator">&lt;</span><span class="token plain">button onClick</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token arrow operator">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">alert</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">'button clicked!'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token operator">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token plain">button</span><span class="token operator">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><button>Click me!</button></div></div><div class="theme-admonition theme-admonition-warning alert alert--danger admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>danger</div><div class="admonitionContent_S0QG"><p>Sed suscipit dictum odio ultrices mollis. Donec in pellentesque lectus. Ut congue vitae urna id sollicitudin. Curabitur tempus elit odio, ut condimentum est ullamcorper a. Duis nisi dolor, commodo eget scelerisque et, sollicitudin ut lacus. Vivamus fringilla consequat auctor. Duis ornare vel leo lobortis sagittis. Etiam dignissim dui eget velit fringilla.</p></div></div><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>Maecenas pellentesque leo eget neque aliquam, eget faucibus ipsum pharetra. Donec sed luctus risus. Nullam porta magna nulla, ut aliquet risus malesuada ac. Vestibulum semper, nisl accumsan accumsan maximus, tortor mauris dictum massa.</p></div></div><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_S0QG"><p>Sed suscipit dictum odio ultrices mollis. Donec in pellentesque lectus. Ut congue vitae urna id sollicitudin. Curabitur tempus elit odio, ut condimentum est ullamcorper a. Duis nisi dolor, commodo eget scelerisque et, sollicitudin ut lacus. Vivamus fringilla consequat auctor. Duis ornare vel leo lobortis sagittis. Etiam dignissim dui eget velit fringilla.</p></div></div>]]></content>
        <author>
            <name>Mike Polinowski</name>
            <uri>https://github.com/mpolinowski</uri>
        </author>
        <category label="Markdown" term="Markdown"/>
    </entry>
</feed>